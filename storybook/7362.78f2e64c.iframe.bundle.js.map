{"version":3,"file":"7362.78f2e64c.iframe.bundle.js","mappings":";;;;;;;;;;AA2FA;AAUA;;;;AAiFA;;;;;;AAOA;;;;;;;AAQA;;;;;;;;AASA;;;;ACzJA;AAiBA;;;;AC7DA;AACA;;;;;ACyDA;AA8BA;;;;ACOA;AA2CA;AAEA;;;;;AAWA;;;;ACjGA;AACA;;;;AAKA;AAEA;;AAEA;;AAGA;;;;;;;;;;;;AAaA;AAKA;AAIA;AAEA;ACxFA;AACA;;;;;;;;;;;;ACsEA;AAQA;;;;;;;;;;;;;;AAgBA;AAUA;;;;;AC/CA;AAuCA;AAIA;AACA;;;;;AAKA;;AC/DA;AAEA;;;;AAIA;;;AAIA;;;;AAIA;;;;;;;AC1BA;AACA;AACA;AACA;;;;;;ACqBA;;;;AAKA;AACA;;;AC5DA;;;;;;AC2HA;AACA;;;AAIA;AA2BA;;;AAIA;AAuBA;;;AAIA;AAyBA;;;;;;;;;;;;AAaA","sources":["webpack://stelios/./src/components/Alert/Alert.tsx","webpack://stelios/./src/components/Avatar/Avatar.tsx","webpack://stelios/./src/components/Breadcrumbs/Breadcrumbs.tsx","webpack://stelios/./src/components/Breadcrumbs/BreadcrumbsItem/BreadcrumbsItem.tsx","webpack://stelios/./src/components/Button/Button.tsx","webpack://stelios/./src/components/CodeDisplay/CodeDisplay.tsx","webpack://stelios/./src/components/ColorPicker/ColorPicker.tsx","webpack://stelios/./src/components/Header/Header.tsx","webpack://stelios/./src/components/IconButton/IconButton.tsx","webpack://stelios/./src/components/Link/Link.tsx","webpack://stelios/./src/components/SideBar/SideBar.tsx","webpack://stelios/./src/components/SideBar/SideBarGroup/SideBarGroup.tsx","webpack://stelios/./src/components/SideBar/SideBarGroupItem/SideBarGroupItem.tsx","webpack://stelios/./src/components/Slider/Slider.tsx"],"sourcesContent":["import * as React from \"react\";\nimport Text from \"../Text/Text\";\nimport styled from \"styled-components\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport { AlertProps, AlertStyleProps } from \"./Alert.types\";\nimport { getColorPalette } from \"../../helpers/helpers\";\n\nconst Alert: React.FunctionComponent<AlertProps> = ({\n  title,\n  titleIcon,\n  description,\n  leadingIcon,\n  color = colorTokens.default.primary.main,\n  variant = \"contained\",\n  width = \"400px\",\n  style,\n  className,\n  \"data-testid\": dataTestId,\n  \"data-leading-icon\": dataLeadingIcon,\n  ...props\n}: AlertProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme,color);\n\n  const Content = React.useCallback(() => {\n    if (!title && !description) return null;\n\n    const Title = title ? (\n      <StyledTitleContainer>\n        {titleIcon && <StyledTitleIcon>{titleIcon}</StyledTitleIcon>}\n        {typeof title === \"string\" ? (\n          <Text disableColor variant=\"span\" style={{ marginTop: \"0.2rem\" }}>\n            {title}\n          </Text>\n        ) : (\n          title\n        )}\n      </StyledTitleContainer>\n    ) : null;\n\n    const Description =\n      description && typeof description === \"string\" ? (\n        <Text disableColor variant=\"paragraph\" size=\"small\">\n          {description}\n        </Text>\n      ) : (\n        description\n      );\n\n    return (\n      <StyledContentContainer>\n        {Title}\n        {Description}\n      </StyledContentContainer>\n    );\n  }, [title, description, titleIcon]);\n\n  const LeadingIcon = React.useCallback(() => {\n    if (!leadingIcon) return null;\n\n    return <StyledIcon data-testid={dataLeadingIcon}>{leadingIcon}</StyledIcon>;\n  }, [leadingIcon, dataLeadingIcon]);\n\n  return (\n    <StyledAlertContainer\n      style={style}\n      className={className}\n      $width={width}\n      $color={color}\n      $variant={variant}\n      $colorPalette={colorPalette}\n      data-testid={dataTestId}\n      {...props}\n    >\n      <LeadingIcon />\n      <Content />\n    </StyledAlertContainer>\n  );\n};\nexport default Alert;\n\nconst StyledAlertContainer = styled.div<AlertStyleProps>`\n  display: flex;\n  flex-direction: row;\n  box-sizing: border-box;\n  gap: 1rem;\n  justify-content: flex-start;\n  align-items: center;\n  padding: 0.75rem 1rem 1rem 1rem;\n  border-radius: 0.8rem;\n  ${props => {\n    const properties = propsAlertContainerHandler(props.$variant, props.$color, props.$colorPalette);\n    return `\n      background-color: ${properties.background.default};\n      border: ${properties.border.default};\n      border-left: ${properties.borderLeft.default};\n      color: ${properties.color.default};\n      width: ${props.$width};\n    `;\n  }}\n`;\nconst propsAlertContainerHandler = (\n  variant: AlertStyleProps[\"$variant\"],\n  color: AlertStyleProps[\"$color\"],\n  colorPalette: AlertStyleProps[\"$colorPalette\"]\n) => {\n  return { ...getVariantProps(variant, color, colorPalette) };\n};\nconst getVariantProps = (\n  variant: AlertStyleProps[\"$variant\"],\n  color: AlertStyleProps[\"$color\"],\n  colorPalette: AlertStyleProps[\"$colorPalette\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      return {\n        background: {\n          default: colorPalette[color].accentScale[8],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[10]}`,\n        },\n        borderLeft: {\n          default: `0.5rem solid ${colorPalette[color].accentScale[10]}`,\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n        }\n      };\n    case \"outlined\":\n      return {\n        background: {\n          default: \"transparent\",\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[8]}`,\n        },\n        borderLeft: {\n          default: `0.5rem solid ${colorPalette[color].accentScale[8]}`,\n        },\n        color: {\n          default: colorPalette[color].accentScale[11],\n        }\n      };\n    case \"soft\":\n      return {\n        background: {\n          default: colorPalette[color].accentScale[2],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[2]}`,\n        },\n        borderLeft: {\n          default: `0.5rem solid ${colorPalette[color].accentScale[6]}`,\n        },\n        color: {\n          default: colorPalette[color].accentScale[11],\n        }\n      };\n    case \"outlined-soft\":\n      return {\n        background: {\n          default: colorPalette[color].accentScale[2],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[8]}`,\n        },\n        borderLeft: {\n          default: `0.5rem solid ${colorPalette[color].accentScale[8]}`,\n        },\n        color: {\n          default: colorPalette[color].accentScale[11],\n        }\n      };\n  }\n}\n\nconst StyledContentContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n`;\nconst StyledTitleContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 0.5rem;\n  flex: 1 1 auto;\n`;\nconst StyledTitleIcon = styled.div`\n  width: 18px;\n  height: 18px;\n  & svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\nconst StyledIcon = styled.div`\n  flex: 1 0 auto;\n  width: 24px;\n  height: 24px;\n  & svg {\n    width: 100%;\n    height: 100%;\n  }\n`;","import * as React from \"react\";\nimport { AvatarProps, AvatarStyledProps } from \"./Avatar.types\";\nimport styled from \"styled-components\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport Text from \"../Text/Text\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\n\nconst Avatar: React.FunctionComponent<AvatarProps> = ({\n  src,\n  alt,\n  initials,\n  variant = \"contained\",\n  size = \"medium\",\n  shape = \"rounded\",\n  type = \"image\",\n  color = colorTokens.default.primary.main,\n\n  // Test props\n  \"data-testid\": dataTestId,\n  ...props\n}) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n  const AvatarContent = () => {\n    switch (type) {\n      case \"image\":\n        return <img src={src} alt={alt} />;\n      case \"initials\":\n        const _size = size === \"xlarge\" || size === \"medium\" ? \"large\" : \"medium\";\n        return <Text size={_size} disableColor variant=\"span\">{initials}</Text>;\n    }\n  };\n\n  return (\n    <StyledImgContainer\n      $shape={shape}\n      $size={size}\n      $variant={variant}\n      $colorPalette={colorPalette}\n      $color={color}\n      data-testid={dataTestId}\n      {...props}\n    >\n      <AvatarContent />\n    </StyledImgContainer>\n  );\n};\n\nconst StyledImgContainer = styled.div<AvatarStyledProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  ${(props) => {\n    const properties = styleHandler(props.$size, props.$shape, props.$variant, props.$colorPalette, props.$color);\n    return `\n      border-radius: ${properties.borderRadius};\n      width: ${properties.width};\n      height: ${properties.height};\n      background-color: ${properties.backgroundColor};\n      color: ${properties.color};\n      outline: ${properties.outline};\n      & img {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n        border-radius: ${properties.borderRadius};\n      }\n    `;\n  }}\n`;\nconst styleHandler = (\n  size: AvatarStyledProps[\"$size\"],\n  shape: AvatarStyledProps[\"$shape\"],\n  variant: AvatarStyledProps[\"$variant\"],\n  colorPalette: any,\n  color: AvatarStyledProps[\"$color\"]\n) => {\n  return {\n    ...sizeHandler(size),\n    ...shapeHandler(shape),\n    ...variantHandler(variant, colorPalette, color),\n  };\n};\nconst shapeHandler = (shape: AvatarStyledProps[\"$shape\"]) => {\n  switch (shape) {\n    case \"rounded\":\n      return {\n        borderRadius: \"50%\",\n      };\n    case \"square\":\n      return {\n        borderRadius: \"8px\",\n      };\n  }\n};\nconst sizeHandler = (size: AvatarStyledProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return {\n        width: \"3rem\",\n        height: \"3rem\",\n      };\n    case \"medium\":\n      return {\n        width: \"5rem\",\n        height: \"5rem\",\n      };\n    case \"large\":\n      return {\n        width: \"7rem\",\n        height: \"7rem\",\n      };\n    case \"xlarge\":\n      return {\n        width: \"10rem\",\n        height: \"10rem\",\n      };\n  }\n};\nconst variantHandler = (\n  variant: AvatarStyledProps[\"$variant\"],\n  colorPalette: AvatarStyledProps[\"$colorPalette\"],\n  color: AvatarStyledProps[\"$color\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      return {\n        backgroundColor: colorPalette[color].accentScale[8],\n        color: colorPalette[color].accentContrast,\n        outline: \"none\" \n      };\n    case \"outlined\":\n      return {\n        backgroundColor: \"transparent\",\n        color: colorPalette[color].accentScale[10],\n        outline: `1px solid ${colorPalette[color].accentScale[8]}`,\n      };\n  }\n};\n\nexport default Avatar;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport { BreadcrumbsProps } from \"./Breadcrumbs.types\";\n\nconst StyledDelimiterSpan = styled.span<{ size: BreadcrumbsProps[\"size\"] }>`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: ${props => sizeHandler(props.size)};\n`;\n\nconst Breadcrumbs: React.FunctionComponent<BreadcrumbsProps> = ({\n  children,\n  delimiter,\n  color = colorTokens.default.primary.main,\n  size = \"medium\",\n  variant = \"contained\",\n  //Test Props\n  \"data-testid\": dataTestId,\n  ...props\n}) => {\n  return (\n    <div style={{ display: \"inline-flex\" }} data-testid={dataTestId} {...props}>\n      {React.Children.map(children, (child, index) => {\n        if (!React.isValidElement(child)) return child;\n        return (\n          <>\n            {React.cloneElement(child as React.ReactElement, {\n              ...(!child.props.variant && { variant: variant }),\n              ...(!child.props.size && { size: size }),\n              ...(!child.props.color && { color: color }),\n            })}\n\n            {index < React.Children.count(children) - 1 && (\n              <StyledDelimiterSpan size={size}>\n                {delimiter ?? \">\"}\n              </StyledDelimiterSpan>\n            )}\n          </>\n        );\n      })}\n    </div>\n  );\n};\nconst sizeHandler = (size: BreadcrumbsProps[\"size\"]) => {\n  switch (size) {\n    case \"small\":\n      return \"0 0.25rem\";\n    case \"medium\":\n      return \"0 0.25rem\";\n    case \"large\":\n      return \"0 0.5rem\";\n  }\n};\n\nexport default Breadcrumbs;\n","import * as React from \"react\";\nimport Link from \"../../Link/Link\";\nimport Text from \"../../Text/Text\";\nimport colorTokens from \"../../../tokens/colors.json\";\nimport styled from \"styled-components\";\nimport {\n  BreadcrumbsItemProps,\n  BreadcrumbsItemStyledProps,\n} from \"./BreadcrumbsItem.types\";\nimport { useTheme } from \"../../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../../helpers/helpers\";\n\nconst BreadcrumbsItem: React.FunctionComponent<BreadcrumbsItemProps> = ({\n  link,\n  title,\n  color = colorTokens.default.primary.main,\n  size = \"medium\",\n  variant = \"contained\",\n  \"data-testid\": dataTestId,\n  ...props\n}: BreadcrumbsItemProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  const getPreciseColor = () => {\n    if (colorPalette)\n      return variant === \"contained\"\n        ? colorPalette[color].accentContrast\n        : colorPalette[color].accentScale[10];\n  };\n\n  const BreadcrumbsItemContent = link ? (\n    <Link\n      size={size}\n      preciseColor={getPreciseColor()}\n      variant=\"hover\"\n      href={link}\n    >\n      {title}\n    </Link>\n  ) : (\n    <Text disableColor size={size} variant=\"span\">\n      {title}\n    </Text>\n  );\n\n  return (\n    <StyledBreadcrumbsItem\n      $variant={variant}\n      $color={color}\n      $colorPalette={colorPalette}\n      $size={size}\n      $isSelectable={!!link}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {BreadcrumbsItemContent}\n    </StyledBreadcrumbsItem>\n  );\n};\nexport default BreadcrumbsItem;\n\nconst StyledBreadcrumbsItem = styled.div<BreadcrumbsItemStyledProps>`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 0.5rem;\n  ${(props) => {\n    const properties = styledHandler(\n      props.$variant,\n      props.$color,\n      props.$colorPalette,\n      props.$isSelectable,\n      props.$size\n    );\n    return `\n      background-color: ${properties.backgroundColor.default};\n      color: ${properties.color.default};\n      border: ${properties.border.default};\n      padding: ${properties.padding};\n      margin: ${properties.margin};\n      ${\n        props.$isSelectable\n          ? `&:hover {\n          background-color: ${properties.backgroundColor.hover};\n          color: ${properties.color.hover};\n          border: ${properties.border.hover};\n          }\n          &:active {\n          background-color: ${properties.backgroundColor.active};\n          color: ${properties.color.active};\n          border: ${properties.border.active};\n          `\n          : \"\"\n      }\n      `;\n  }}\n`;\nconst styledHandler = (\n  variant: BreadcrumbsItemStyledProps[\"$variant\"],\n  color: BreadcrumbsItemStyledProps[\"$color\"],\n  colorPalette: BreadcrumbsItemStyledProps[\"$colorPalette\"],\n  isSelectable: BreadcrumbsItemStyledProps[\"$isSelectable\"],\n  size: BreadcrumbsItemStyledProps[\"$size\"]\n) => {\n  return {\n    ...variantHandler(variant, color, colorPalette, isSelectable),\n    ...sizeHandler(size),\n  };\n};\nconst variantHandler = (\n  variant: BreadcrumbsItemStyledProps[\"$variant\"],\n  color: BreadcrumbsItemStyledProps[\"$color\"],\n  colorPalette: BreadcrumbsItemStyledProps[\"$colorPalette\"],\n  isSelectable: BreadcrumbsItemStyledProps[\"$isSelectable\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      if (!isSelectable) {\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[8],\n          },\n          color: {\n            default: colorPalette[color].accentContrast,\n          },\n          border: {\n            default: `1px solid ${colorPalette[color].grayScale[8]}`,\n          },\n        };\n      }\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[8],\n          hover: colorPalette[color].accentScale[9],\n          active: colorPalette[color].accentScale[9],\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n          hover: colorPalette[color].accentContrast,\n          active: colorPalette[color].accentContrast,\n        },\n        border: {\n          default: `1px solid ${colorPalette[color].accentScale[8]}`,\n          hover: `1px solid ${colorPalette[color].accentScale[9]}`,\n          active: `1px solid ${colorPalette[color].accentScale[9]}`,\n        },\n      };\n    case \"outlined\":\n      if (!isSelectable) {\n        return {\n          backgroundColor: {\n            default: \"transparent\",\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `1px solid ${colorPalette[color].grayScale[8]}`,\n          },\n        };\n      }\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `1px solid ${colorPalette[color].accentScale[6]}`,\n          hover: `1px solid ${colorPalette[color].accentScale[7]}`,\n          active: `1px solid ${colorPalette[color].accentScale[7]}`,\n        },\n      };\n    case \"soft\":\n      if (!isSelectable) {\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[3],\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `1px solid ${colorPalette[color].grayScale[3]}`,\n          },\n        };\n      }\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n          hover: colorPalette[color].accentScale[3],\n          active: colorPalette[color].accentScale[3],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `1px solid ${colorPalette[color].accentScale[2]}`,\n          hover: `1px solid ${colorPalette[color].accentScale[3]}`,\n          active: `1px solid ${colorPalette[color].accentScale[3]}`,\n        },\n      };\n    case \"text\":\n      if (!isSelectable) {\n        return {\n          backgroundColor: {\n            default: \"transparent\",\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `1px solid transparent`,\n          },\n        };\n      }\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[11],\n          active: colorPalette[color].accentScale[11],\n        },\n        border: {\n          default: \"1px solid transparent\",\n          hover: \"1px solid transparent\",\n          active: \"1px solid transparent\",\n        },\n      };\n  }\n};\nconst sizeHandler = (size: BreadcrumbsItemStyledProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return {\n        margin: \"0rem 0.25rem\",\n        padding: \"0.25rem 0.5rem\",\n      };\n    case \"medium\":\n      return {\n        margin: \"0rem 0.5rem\",\n        padding: \"0.25rem 0.5rem\",\n      };\n    case \"large\":\n      return {\n        margin: \"0rem 0.5rem\",\n        padding: \"0.25rem 0.5rem\",\n      };\n  }\n};\n","import React, {\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  forwardRef,\n} from \"react\";\nimport styled from \"styled-components\";\nimport {\n  ButtonProps,\n  ButtonStyleProps,\n  ButtonIconStyleProps,\n} from \"./Button.types\";\nimport Text from \"../Text/Text\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette, hasPropertyChain } from \"../../helpers/helpers\";\nimport colors from \"../../tokens/colors.json\";\nimport layout from \"../../tokens/layout.json\";\n\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      leadingIcon,\n      trailingIcon,\n      size = \"medium\",\n      variant = \"contained\",\n      color = colors.default.primary.main,\n      rounded = false,\n      disabled = false,\n      children,\n      isFullWidth = false,\n      style,\n      onClick,\n      \"data-testid\": dataTestId,\n      \"data-leading-icon\": dataLeadingIcon,\n      \"data-trailing-icon\": dataTrailingIcon,\n      ...rest\n    }: ButtonProps,\n    ref\n  ) => {\n    const innerRef = useRef<HTMLButtonElement>(null);\n    useImperativeHandle(ref, () => innerRef.current!, [innerRef]);\n    const theme = useTheme().theme;\n    const colorPalette = getColorPalette(theme, color);\n\n    const [borderRadius, setBorderRadius] = React.useState<string>(\n      rounded\n        ? innerRef.current\n          ? `${innerRef.current.offsetHeight / 2}px`\n          : \"\"\n        : `${layout.rounded.default.rem}rem`\n    );\n    useEffect(() => {\n      if (!innerRef || !innerRef.current) return;\n      setBorderRadius(\n        rounded\n          ? `${innerRef.current.offsetHeight / 2}px`\n          : `${layout.rounded.default.rem}rem`\n      );\n    }, [rounded, innerRef.current?.offsetHeight]);\n\n    return (\n      <StyledButton\n        ref={innerRef}\n        $size={size}\n        $variant={variant}\n        $color={color}\n        $colorPalette={colorPalette}\n        $disabled={disabled}\n        $rounded={rounded}\n        $isFullWidth={isFullWidth}\n        $borderRadius={borderRadius}\n        aria-disabled={disabled}\n        style={style}\n        onClick={onClick}\n        data-testid={dataTestId}\n        {...rest}\n      >\n        {leadingIcon && (\n          <StyledButtonIcon $size={size} data-testid={dataLeadingIcon}>\n            {leadingIcon}\n          </StyledButtonIcon>\n        )}\n        {typeof children === \"string\" ? (\n          <Text disableColor variant=\"span\" size={size}>\n            {children}\n          </Text>\n        ) : (\n          children\n        )}\n        {trailingIcon && (\n          <StyledButtonIcon $size={size} data-testid={dataTrailingIcon}>\n            {trailingIcon}\n          </StyledButtonIcon>\n        )}\n      </StyledButton>\n    );\n  }\n);\nexport default Button;\n\nconst StyledButton = styled.button<ButtonStyleProps>`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  ${(props: ButtonStyleProps) => {\n    const properties = propsHandler(\n      props.$variant,\n      props.$color,\n      props.$colorPalette,\n      props.$size,\n      props.$disabled\n    );\n    return `\n      background-color: ${properties.backgroundColor.default};\n      color: ${properties.color.default};\n      padding: ${properties.padding};\n      gap: ${properties.gap};\n      width: ${props.$isFullWidth ? \"100%\" : \"auto\"};\n      cursor: ${props.$disabled ? \"not-allowed\" : \"pointer\"};\n      border-radius: ${props.$borderRadius};\n      border: ${properties.border!.default};\n      ${hasPropertyChain(properties, [\"boxShadow\", \"default\"]) ? `box-shadow: ${properties.boxShadow!.default};` : \"\"}\n      ${\n        !props.$disabled\n          ? `\n          &:hover {\n          background-color: ${properties.backgroundColor.hover};\n          color: ${properties.color.hover};\n          border: ${properties.border!.hover};\n          ${hasPropertyChain(properties, [\"boxShadow\", \"hover\"]) ? `box-shadow: ${properties.boxShadow!.hover};` : \"\"}\n        }\n        &:active {\n          background-color: ${properties.backgroundColor.active};\n          color: ${properties.color.active};\n          ${properties.border ? `border: ${properties.border.active};` : \"\"}\n          ${hasPropertyChain(properties, [\"filter\", \"active\"]) ? `filter: ${properties.filter!.active};` : \"\"};\n          ${hasPropertyChain(properties, [\"boxShadow\", \"active\"]) ? `box-shadow: ${properties.boxShadow!.active};` : \"\"}\n        }  \n        &:focus-visible {\n          outline-offset: 2px;\n          outline: 2px solid ${props.$colorPalette[props.$color].accentScale[8]};\n        }`\n          : \"\"\n      }\n\n    `;\n  }}\n`;\nconst StyledButtonIcon = styled.span<ButtonIconStyleProps>`\n  ${(props: ButtonIconStyleProps) => {\n    const size = getIconSizeProps(props.$size);\n    return `\n      width: ${size.width};\n      height: ${size.height};\n    `;\n  }}\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst propsHandler = (\n  variant: ButtonStyleProps[\"$variant\"],\n  color: ButtonStyleProps[\"$color\"],\n  colorPalette: ButtonStyleProps[\"$colorPalette\"],\n  size: ButtonStyleProps[\"$size\"],\n  disabled: ButtonStyleProps[\"$disabled\"]\n) => {\n  return {\n    ...getVariantProps(variant, color, colorPalette, disabled),\n    ...getSizeProps(size),\n  };\n};\nconst getVariantProps = (\n  variant: ButtonStyleProps[\"$variant\"],\n  color: ButtonStyleProps[\"$color\"],\n  colorPalette: ButtonStyleProps[\"$colorPalette\"],\n  disabled: ButtonStyleProps[\"$disabled\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[8],\n          },\n          color: {\n            default: colorPalette[color].accentContrast,\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[8]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[8],\n          hover: colorPalette[color].accentScale[9],\n          active: colorPalette[color].accentScale[9],\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n          hover: colorPalette[color].accentContrast,\n          active: colorPalette[color].accentContrast,\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[8]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[9]}`,\n          active: `2px solid ${colorPalette[color].accentScale[9]}`,\n        },\n        filter: {\n          active: \"brightness(0.92) saturate(1.1)\",\n        },\n      };\n    case \"outlined\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: \"transparent\",\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[5]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[5]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[6]}`,\n          active: `2px solid ${colorPalette[color].accentScale[7]}`,\n        },\n      };\n    case \"soft\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[2],\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[2]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n          hover: colorPalette[color].accentScale[3],\n          active: colorPalette[color].accentScale[3],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[2]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[3]}`,\n          active: `2px solid ${colorPalette[color].accentScale[3]}`,\n        },\n        filter: {\n          active: \"brightness(0.92) saturate(1.1)\",\n        },\n      };\n    case \"outlined-soft\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[2],\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[5]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n          hover: colorPalette[color].accentScale[3],\n          active: colorPalette[color].accentScale[3],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[5]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[6]}`,\n          active: `2px solid ${colorPalette[color].accentScale[7]}`,\n        },\n      };\n    case \"neumorph\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: \"transparent\",\n          },\n          color: {\n            default: colorPalette[color].grayScale[5],\n          },\n          border: {\n            default: `2px solid transparent`,\n          },\n          boxShadow: {\n            default: `-6px -6px 14px rgba(255, 255, 255, .7),\n              -6px -6px 10px rgba(255, 255, 255, .5),\n              6px 6px 8px rgba(255, 255, 255, .075),\n              6px 6px 10px rgba(0, 0, 0, .15)`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: \"2px solid transparent\",\n          hover: \"2px solid transparent\",\n          active: \"2px solid transparent\",\n        },\n        boxShadow: {\n          default: `-6px -6px 14px rgba(255, 255, 255, .7),\n              -6px -6px 10px rgba(255, 255, 255, .5),\n              6px 6px 8px rgba(255, 255, 255, .075),\n              6px 6px 10px rgba(0, 0, 0, .15)`,\n          hover: `-2px -2px 6px rgba(255, 255, 255, .6),\n              -2px -2px 4px rgba(255, 255, 255, .4),\n              2px 2px 2px rgba(255, 255, 255, .05),\n              2px 2px 4px rgba(0, 0, 0, .1)`,\n          active: `inset -2px -2px 6px rgba(255, 255, 255, .7),\n              inset -2px -2px 4px rgba(255, 255, 255, .5),\n              inset 2px 2px 2px rgba(255, 255, 255, .075),\n              inset 2px 2px 4px rgba(0, 0, 0, .15)`,\n        },\n      };\n  }\n};\nconst getSizeProps = (size: ButtonStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return { padding: \"0.25rem 0.5rem\", gap: \"0.5rem\" };\n    case \"medium\":\n      return { padding: \"0.5rem 1rem\", gap: \"0.75rem\" };\n    case \"large\":\n      return { padding: \"0.5rem 1rem\", gap: \"0.75rem\" };\n  }\n};\n\nconst getIconSizeProps = (size: ButtonStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return { width: \"1.25rem\", height: \"1.25rem\" };\n    case \"medium\":\n      return { width: \"1.5rem\", height: \"1.5rem\" };\n    case \"large\":\n      return { width: \"1.75rem\", height: \"1.75rem\" };\n  }\n};\n","import styled from \"styled-components\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { CodeDisplayProps, CodeDisplayStyleProps } from \"./CodeDisplay.types\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport Text from \"../Text/Text\";\nimport { vs, dark } from \"react-syntax-highlighter/dist/cjs/styles/hljs\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\nconst CodeDisplay = ({\n  text,\n  width = \"auto\",\n  title,\n  style,\n  language,\n  color = colorTokens.default.primary.main,\n  \"data-testid\": dataTestId,\n  ...props\n}: CodeDisplayProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n  const appearance = colorPalette![color].appearance\n\n  return (\n    <StyledCodeDisplay\n      style={style}\n      $colorPalette={colorPalette}\n      $color={color}\n      $width={width}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {title && (\n        <StyledTitle $colorPalette={colorPalette} $color={color}>\n          <Text disableColor variant=\"paragraph\" size=\"small\">\n            {title}\n          </Text>\n        </StyledTitle>\n      )}\n      <StyledCodeContainer\n        $colorPalette={colorPalette}\n        $color={color}\n        $hasTitle={!!title}\n      >\n        <StyledSyntaxHighlighter\n          language={language}\n          title={title}\n          style={appearance === colorTokens.theme.appearance.light ? vs : dark}\n          $colorPalette={colorPalette}\n          $color={color}\n        >\n          {text}\n        </StyledSyntaxHighlighter>\n      </StyledCodeContainer>\n    </StyledCodeDisplay>\n  );\n};\nexport default CodeDisplay;\n\nconst StyledCodeDisplay = styled.div<CodeDisplayStyleProps>`\n  display: flex;\n  flex-direction: column;\n  border-radius: 0.5rem;\n  width: ${(props) => props.$width};\n`;\nconst StyledTitle = styled.div<CodeDisplayStyleProps>`\n  display: flex;\n  align-items: center;\n  padding: 0.5rem 2rem;\n  background-color: ${(props) =>\n    props.$colorPalette[props.$color].accentScale[6]};\n  color: ${(props) => props.$colorPalette[props.$color].accentContrast};\n  border-radius: 0.5rem 0.5rem 0 0;\n`;\nconst StyledCodeContainer = styled.div<CodeDisplayStyleProps>`\n  display: block;\n  background-color: ${(props) =>\n    props.$colorPalette[props.$color].accentScale[4]};\n  padding: 1rem 2rem;\n  pre {\n    margin: 0;\n    padding: 0 !important;\n    white-space: pre-wrap;\n    word-break: break-word;\n    code {\n      font-size: 14px;\n      font-family: \"Source Code Pro\", monospace;\n    }\n  }\n  ${(props) => {\n    return `\n      border-radius: ${props.$hasTitle ? \"0 0 0.5rem 0.5rem\" : \"0.5rem\"};\n    `;\n  }}\n`;\nconst StyledSyntaxHighlighter = styled(\n  SyntaxHighlighter\n)<CodeDisplayStyleProps>`\n  background-color: ${(props) =>\n    props.$colorPalette[props.$color].accentScale[4]} !important;\n`;\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { ChromePicker, ColorResult } from \"react-color\";\nimport { ColorPickerProps, ColorPickerStyleProps } from \"./ColorPicker.types\";\nimport Input from \"../Input/Input\";\nimport styled from \"styled-components\";\nimport { usePopper } from \"react-popper\";\nimport ClickAwayListener from \"../ClickAwayListener/ClickAwayListener\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\n\nconst StyledChromePicker = styled.div<ColorPickerStyleProps>`\n  display: ${(props) => (props.$open ? \"block\" : \"none\")};\n`;\n\nconst ColorPicker = ({\n  label,\n  color = colorTokens.default.primary.main,\n  open,\n  size,\n  width,\n  variant = \"outlined\",\n  onChange,\n  \"data-testid\": dataTestId,\n}: ColorPickerProps) => {\n  const [isOpen, setIsOpen] = useState(open ?? false);\n  const anchorElement = useRef<HTMLDivElement | null>(null);\n  const popperElement = useRef<HTMLDivElement | null>(null);\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme,color);\n  const [innerColor, setInnerColor] = useState<string>(colorPalette ? colorPalette[color].main : color);\n\n  React.useEffect(() => {\n    const colorPalette = getColorPalette(theme,color);\n    setInnerColor(colorPalette ? colorPalette[color].main : color);\n  }, [color, theme]);\n\n  useEffect(() => {\n    setIsOpen(open ?? false);\n  }, [open]);\n\n  const { styles, attributes, update } = usePopper(\n    anchorElement.current,\n    popperElement.current,\n    {\n      placement: \"bottom-start\",\n      modifiers: [\n        {\n          name: \"offset\",\n          options: {\n            offset: [0, 2.5],\n          },\n        },\n      ],\n    }\n  );\n\n  const _onChange = (color: ColorResult) => {\n    setInnerColor(color.hex);\n    onChange && onChange(color.hex);\n  };\n\n  const _onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInnerColor(e.target.value);\n    onChange && onChange(e.target.value);\n  };\n\n  const _onInputClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleClickAway = useCallback(() => {\n    setIsOpen(false);\n  }, []);\n\n  useEffect(() => {\n    if (isOpen && update) {\n      update();\n    }\n  }, [isOpen, update]);\n\n  return (\n    <ClickAwayListener onClickAway={handleClickAway}>\n      <Input\n        variant={variant}\n        width={width}\n        size={size}\n        label={label}\n        containerRef={anchorElement}\n        value={innerColor}\n        onChange={_onInputChange}\n        onClick={_onInputClick}\n        color={color}\n        leadingIcon={\n          <div\n            onClick={() => setIsOpen(!isOpen)}\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n              backgroundColor: innerColor,\n              borderRadius: \"4px\",\n            }}\n          />\n        }\n        data-testid={dataTestId}\n      />\n      <StyledChromePicker\n        ref={popperElement}\n        $open={isOpen}\n        style={{ ...styles.popper }}\n        {...attributes.popper}\n      >\n        <ChromePicker disableAlpha color={innerColor} onChange={_onChange} />\n      </StyledChromePicker>\n    </ClickAwayListener>\n  );\n};\n\nexport default ColorPicker;\n","import React from \"react\";\nimport {\n  IconChevronCompactDown,\n  IconChevronCompactUp,\n} from \"@tabler/icons-react\";\nimport { HeaderProps, HeaderStyleProps } from \"./Header.types\";\nimport styled from \"styled-components\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\nconst Header = ({\n  id,\n  children,\n  height,\n  className,\n  style,\n  expandable = true,\n  iconWidth = \"3rem\",\n  iconHeight = \"1.75rem\",\n  iconRight = \"5rem\",\n  iconBottom = \"-1.5rem\",\n  color = colorTokens.default.primary.main,\n  \"data-testid\": dataTestId,\n  \"data-testid-icon\": dataTestIdIcon,\n  ...props\n}: HeaderProps) => {\n  const [expanded, setExpanded] = React.useState<boolean>(true);\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  const ExpandIcon = () => {\n    const _onExpandHandler = () => {\n      setExpanded(!expanded);\n    };\n    return (\n      <StyledExpandIcon\n        $colorPalette={colorPalette}\n        $color={color}\n        $expanded={expanded}\n        $iconWidth={iconWidth}\n        $iconHeight={iconHeight}\n        $iconRight={iconRight}\n        $iconBottom={iconBottom}\n        onClick={_onExpandHandler}\n        data-testid={dataTestIdIcon}\n      >\n        {expanded ? <IconChevronCompactUp /> : <IconChevronCompactDown />}\n      </StyledExpandIcon>\n    );\n  };\n\n  return (\n    <StyledHeader\n      id={id}\n      $height={height}\n      $expanded={expanded}\n      $colorPalette={colorPalette}\n      $color={color}\n      className={className}\n      style={style}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {expanded && children}\n      {expandable && <ExpandIcon />}\n    </StyledHeader>\n  );\n};\nexport default Header;\n\nconst StyledHeader = styled.header<HeaderStyleProps>`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  box-sizing: border-box;\n  z-index: 100;\n  transition: height 330ms ease-in-out;\n  padding: 0 1rem;\n  position: sticky;\n  top: 0;\n  ${(props) => {\n    return `\n      background-color: ${props.$colorPalette[props.$color].background};\n      height: ${props.$expanded ? props.$height : \"0rem\"};\n      box-shadow: ${props.$expanded ? \"none\" : \"0 0 10px 0 rgba(0, 0, 0, 0.35)\"};\n      outline: ${props.$expanded ? `1px solid ${props.$colorPalette[props.$color].grayScale[5]}` : \"none\"};\n    `;\n  }}\n`;\n\nconst StyledExpandIcon = styled.div<HeaderStyleProps>`\n  position: absolute;\n  border-radius: 0 0 0.25rem 0.25rem;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  box-shadow:\n    -4px 5px 5px 0 rgba(0, 0, 0, 0.15),\n    4px 5px 5px 0 rgba(0, 0, 0, 0.15);\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n  ${(props) => {\n    return `\n      right: ${props.$iconRight};\n      bottom: ${props.$iconBottom};\n      width: ${props.$iconWidth};\n      height: ${props.$iconHeight};\n      background-color: ${props.$colorPalette[props.$color].background};\n      color: ${props.$colorPalette[props.$color].grayScale[11]};\n    `;\n  }}\n`;\n","import React, { forwardRef } from \"react\";\nimport { IconButtonProps, IconButtonStyleProps } from \"./IconButton.types\";\nimport styled from \"styled-components\";\nimport Text from \"../Text/Text\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette, hasPropertyChain } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\nconst IconButton = forwardRef(\n  (\n    {\n      icon,\n      size = \"medium\",\n      variant = \"contained\",\n      color = colorTokens.default.primary.main,\n      disabled = false,\n      className,\n      style,\n      onClick,\n      \"data-testid\": dataTestId,\n      ...rest\n    }: IconButtonProps,\n    ref: React.ForwardedRef<HTMLButtonElement>\n  ) => {\n    const theme = useTheme().theme;\n    const colorPalette = getColorPalette(theme, color);\n\n    return (\n      <StyledIconBtn\n        ref={ref}\n        $variant={variant}\n        $size={size}\n        $color={color}\n        $disabled={disabled}\n        $colorPalette={colorPalette}\n        aria-disabled={disabled}\n        style={style}\n        className={className}\n        onClick={onClick}\n        data-testid={dataTestId}\n        {...rest}\n      >\n        {typeof icon === \"string\" ? (\n          <Text variant=\"span\" size={size}>\n            {icon}\n          </Text>\n        ) : (\n          <IconButtonIcon icon={icon} size={size} />\n        )}\n      </StyledIconBtn>\n    );\n  }\n);\n\nexport default IconButton;\nconst IconButtonIcon = ({\n  icon,\n  size,\n}: {\n  icon: React.ReactNode;\n  size: \"small\" | \"medium\" | \"large\";\n}) => {\n  return <StyledIconButtonIcon $size={size}>{icon}</StyledIconButtonIcon>;\n};\n\nconst StyledIconBtn = styled.button<IconButtonStyleProps>`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  ${(props) => {\n    const properties = propsHandler(\n      props.$variant,\n      props.$color,\n      props.$colorPalette,\n      props.$size,\n      props.$disabled\n    );\n    return `\n      background-color: ${properties.backgroundColor.default};\n      color: ${properties.color.default};\n      padding: ${properties.padding};\n      border: ${properties.border.default};\n      cursor: ${props.$disabled ? \"not-allowed\" : \"pointer\"};\n      ${hasPropertyChain(properties, [\"boxShadow\", \"default\"]) ? `box-shadow: ${properties.boxShadow!.default};` : \"\"}\n\n      &:hover {\n        background-color: ${properties.backgroundColor.hover};\n        color: ${properties.color.hover};\n        border: ${properties.border.hover};\n        ${hasPropertyChain(properties, [\"boxShadow\", \"hover\"]) ? `box-shadow: ${properties.boxShadow!.hover};` : \"\"}\n      }\n      &:active {\n        background-color: ${properties.backgroundColor.active};\n        color: ${properties.color.active};\n        border: ${properties.border.active};\n        ${hasPropertyChain(properties, [\"boxShadow\", \"active\"]) ? `box-shadow: ${properties.boxShadow!.active};` : \"\"}\n        ${\n          hasPropertyChain(properties, [\"filter\", \"active\"])\n            ? `filter: ${properties.filter!.active};`\n            : \"\"\n        }\n      };\n      ${`&:focus-visible {\n          outline-offset: 2px;\n          outline: 2px solid ${props.$colorPalette[props.$color].accentScale[8]};\n        }`}\n    `;\n  }}\n`;\nconst StyledIconButtonIcon = styled.div<{\n  $size: \"small\" | \"medium\" | \"large\";\n}>`\n  width: ${(props) => getSizeProps(props.$size).width};\n  height: ${(props) => getSizeProps(props.$size).height};\n  & svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst propsHandler = (\n  variant: IconButtonStyleProps[\"$variant\"],\n  color: IconButtonStyleProps[\"$color\"],\n  colorPalette: IconButtonStyleProps[\"$colorPalette\"],\n  size: IconButtonStyleProps[\"$size\"],\n  disabled: IconButtonStyleProps[\"$disabled\"]\n) => {\n  return {\n    ...getVariantProps(variant, color, colorPalette, disabled),\n    ...getSizeProps(size),\n  };\n};\nconst getVariantProps = (\n  variant: IconButtonStyleProps[\"$variant\"],\n  color: IconButtonStyleProps[\"$color\"],\n  colorPalette: IconButtonStyleProps[\"$colorPalette\"],\n  disabled: IconButtonStyleProps[\"$disabled\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[8],\n          },\n          color: {\n            default: colorPalette[color].accentContrast,\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[8]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[8],\n          hover: colorPalette[color].accentScale[9],\n          active: colorPalette[color].accentScale[9],\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n          hover: colorPalette[color].accentContrast,\n          active: colorPalette[color].accentContrast,\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[8]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[9]}`,\n          active: `2px solid ${colorPalette[color].accentScale[9]}`,\n        },\n      };\n    case \"outlined\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: \"transparent\",\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[5]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[5]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[6]}`,\n          active: `2px solid ${colorPalette[color].accentScale[7]}`,\n        },\n      };\n    case \"soft\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[2],\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[2]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n          hover: colorPalette[color].accentScale[3],\n          active: colorPalette[color].accentScale[3],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[2]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[3]}`,\n          active: `2px solid ${colorPalette[color].accentScale[3]}`,\n        },\n        filter: {\n          active: \"brightness(0.92) saturate(1.1)\",\n        },\n      };\n    case \"outlined-soft\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[2],\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[5]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n          hover: colorPalette[color].accentScale[3],\n          active: colorPalette[color].accentScale[3],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[5]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[6]}`,\n          active: `2px solid ${colorPalette[color].accentScale[7]}`,\n        },\n      };\n    case \"neumorph\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: \"transparent\",\n          },\n          color: {\n            default: colorPalette[color].grayScale[5],\n          },\n          border: {\n            default: `2px solid transparent`,\n          },\n          boxShadow: {\n            default: `-6px -6px 14px rgba(255, 255, 255, .7),\n              -6px -6px 10px rgba(255, 255, 255, .5),\n              6px 6px 8px rgba(255, 255, 255, .075),\n              6px 6px 10px rgba(0, 0, 0, .15)`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid transparent`,\n          hover: `2px solid transparent`,\n          active: `2px solid transparent`,\n        },\n        boxShadow: {\n          default: `-6px -6px 14px rgba(255, 255, 255, .7),\n              -6px -6px 10px rgba(255, 255, 255, .5),\n              6px 6px 8px rgba(255, 255, 255, .075),\n              6px 6px 10px rgba(0, 0, 0, .15)`,\n          hover: `-2px -2px 6px rgba(255, 255, 255, .6),\n              -2px -2px 4px rgba(255, 255, 255, .4),\n              2px 2px 2px rgba(255, 255, 255, .05),\n              2px 2px 4px rgba(0, 0, 0, .1)`,\n          active: `inset -2px -2px 6px rgba(255, 255, 255, .7),\n              inset -2px -2px 4px rgba(255, 255, 255, .5),\n              inset 2px 2px 2px rgba(255, 255, 255, .075),\n              inset 2px 2px 4px rgba(0, 0, 0, .15)`,\n        },\n      };\n    case \"neumorph-contained\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[8],\n          },\n          color: {\n            default: colorPalette[color].accentContrast,\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].background}`,\n          },\n          boxShadow: {\n            default: `-6px -6px 14px rgba(255, 255, 255, .7),\n              -6px -6px 10px rgba(255, 255, 255, .5),\n              6px 6px 8px rgba(255, 255, 255, .075),\n              6px 6px 10px rgba(0, 0, 0, .15)`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[8],\n          hover: colorPalette[color].accentScale[9],\n          active: colorPalette[color].accentScale[9],\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n          hover: colorPalette[color].accentContrast,\n          active: colorPalette[color].accentContrast,\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].background}`,\n          hover: `2px solid ${colorPalette[color].background}`,\n          active: `2px solid ${colorPalette[color].background}`,\n        },\n        boxShadow: {\n          default: `-6px -6px 14px rgba(255, 255, 255, .7),\n              -6px -6px 10px rgba(255, 255, 255, .5),\n              6px 6px 8px rgba(255, 255, 255, .075),\n              6px 6px 10px rgba(0, 0, 0, .15)`,\n          hover: `-2px -2px 6px rgba(255, 255, 255, .6),\n              -2px -2px 4px rgba(255, 255, 255, .4),\n              2px 2px 2px rgba(255, 255, 255, .05),\n              2px 2px 4px rgba(0,\n              0, 0, .1)`,\n          active: `inset -2px -2px 6px rgba(255, 255, 255, .7),\n              inset -2px -2px 4px rgba(255, 255, 255, .5),\n              inset 2px 2px 2px rgba(255, 255, 255, .075),\n              inset 2px 2px 4px rgba(0, 0, 0, .15)`,\n        },\n      };\n  }\n};\nconst getSizeProps = (size: IconButtonStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return {\n        padding: \"0.5rem 0.5rem\",\n        width: \"1.25rem\",\n        height: \"1.25rem\",\n      };\n    case \"medium\":\n      return {\n        padding: \"0.75rem 0.75rem\",\n        width: \"1.5rem\",\n        height: \"1.5rem\",\n      };\n    case \"large\":\n      return {\n        padding: \"1rem 1rem\",\n        width: \"2rem\",\n        height: \"2rem\",\n      };\n  }\n};\n","import React from \"react\";\nimport { LinkProps, LinkStyleProps } from \"./Link.types\";\nimport Text from \"../Text/Text\";\nimport styled from \"styled-components\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\nconst Link = ({\n  href,\n  children,\n  variant = \"default\",\n  size = \"medium\",\n  className,\n  target,\n  style,\n  color = colorTokens.default.primary.main,\n  preciseColor,\n  tabIndex,\n  onClick,\n  \"data-testid\": dataTestId,\n}: LinkProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n  const _color =\n    preciseColor ?? colorPalette![color].accentScale[10];\n\n  const LinkText = () => {\n    return typeof children === \"string\" ? (\n      <Text disableColor size={size} variant=\"span\">\n        {children}\n      </Text>\n    ) : (\n      children\n    );\n  };\n  return (\n    <StyledLink\n      tabIndex={tabIndex}\n      $color={_color}\n      $variant={variant}\n      target={target}\n      href={href}\n      className={className}\n      style={style}\n      onClick={onClick}\n      data-testid={dataTestId}\n    >\n      {LinkText()}\n    </StyledLink>\n  );\n};\nexport default Link;\n\nconst StyledLink = styled.a<LinkStyleProps>`\n  width: fit-content;\n  text-decoration: ${(props) =>\n    props.$variant === \"underline\" ? \"underline\" : \"none\"};\n  color: ${(props) => props.$color};\n  cursor: pointer;\n  display: inline-block;\n  &:hover {\n    text-decoration: ${(props) =>\n      props.$variant === \"default\" ? \"none\" : \"underline\"};\n  }\n  &:focus-visible {\n    outline: 1px solid ${(props) => props.$color};\n    outline-offset: 2px;\n    border-radius: 0.25rem;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { SideBarProps, SideBarStyleProps } from \"./SideBar.types\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\nconst SideBar = ({\n  children,\n  className,\n  style,\n  top = \"0\",\n  right = \"0\",\n  color = colorTokens.default.primary.main,\n  \"data-testid\": dataTestId,\n  ...props\n}: SideBarProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n  return (\n    <StyledSideBar\n      $colorPalette={colorPalette}\n      $color={color}\n      className={className}\n      style={style}\n      $top={top}\n      $right={right}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {children}\n    </StyledSideBar>\n  );\n};\n\nexport default SideBar;\n\nconst StyledSideBar = styled.div<SideBarStyleProps>`\n  display: flex;\n  flex-direction: column;\n  position: fixed;\n  width: 10rem;\n  height: 100vh;\n  overflow: scroll;\n  right: ${(props) => props.$right};\n  top: ${(props) => props.$top};\n  color: ${(props) => props.$colorPalette[props.$color].grayScale[11]};\n`;\n","import React from \"react\";\nimport {\n  SideBarGroupProps,\n  SideBarGroupStyleProps,\n} from \"./SideBarGroup.types\";\nimport styled from \"styled-components\";\nimport Text from \"../../Text/Text\";\nimport Link from \"../../Link/Link\";\nimport { useTheme } from \"../../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../../helpers/helpers\";\nimport colorTokens from \"../../../tokens/colors.json\";\n\nconst SideBarGroup = ({\n  children,\n  className,\n  style,\n  title,\n  leadingIcon,\n  trailingIcon,\n  size,\n  selected,\n  color = colorTokens.default.primary.main,\n  // Events\n  onClick,\n  \"data-testid\": dataTestId,\n  ...props\n}: SideBarGroupProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  return (\n    <StyledSideBarGroup\n      className={className}\n      style={style}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {(title || leadingIcon || trailingIcon) && (\n        <StyledSideBarGroupHeader $colorPalette={colorPalette} $color={color}>\n          {leadingIcon && <span>{leadingIcon}</span>}\n          {title && typeof title === \"string\" ? (\n            onClick ? (\n              <Link size={size} variant=\"hover\" color={color} onClick={onClick}>\n                {title}\n              </Link>\n            ) : (\n              <Text color={color} size={size} variant=\"span\">\n                {title}\n              </Text>\n            )\n          ) : (\n            title\n          )}\n          {trailingIcon && <span>{trailingIcon}</span>}\n        </StyledSideBarGroupHeader>\n      )}\n      {children}\n    </StyledSideBarGroup>\n  );\n};\nexport default SideBarGroup;\n\nconst StyledSideBarGroup = styled.ul`\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  margin: 0;\n  list-style-type: none;\n`;\nconst StyledSideBarGroupHeader = styled.li<SideBarGroupStyleProps>`\n  display: flex;\n  flex-direction: row;\n  padding: 0.5rem 0.5rem 0.25rem 1rem;\n  color: ${(props) => props.$colorPalette[props.$color].grayScale[11]};\n`;\n","import React from \"react\";\nimport {\n  SideBarGroupItemProps,\n  SideBarGroupItemStyleProps,\n} from \"./SideBarGroupItem.types\";\nimport styled from \"styled-components\";\nimport Link from \"../../Link/Link\";\nimport { useTheme } from \"../../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../../helpers/helpers\";\nimport colorTokens from \"../../../tokens/colors.json\";\n\nconst StyledSideBarGroupItem = styled.div<SideBarGroupItemStyleProps>`\n  display: flex;\n  padding: 0.25rem 0.5rem 0.25rem 1.75rem;\n`;\n\nconst SideBarGroupItem = ({\n  children,\n  className,\n  style,\n  size,\n  selected,\n  color = colorTokens.default.primary.main,\n  // Events\n  onClick,\n  \"data-testid\": dataTestId,\n  ...props\n}: SideBarGroupItemProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  return (\n    <StyledSideBarGroupItem\n      $colorPalette={colorPalette}\n      $color={color}\n      className={className}\n      style={style}\n      onClick={onClick}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {typeof children === \"string\" ? (\n        <Link\n          tabIndex={onClick ? 0 : undefined}\n          size={size}\n          variant=\"hover\"\n          color={color}\n          className={className}\n          style={style}\n          onClick={onClick}\n        >\n          {children}\n        </Link>\n      ) : (\n        children\n      )}\n    </StyledSideBarGroupItem>\n  );\n};\n\nexport default SideBarGroupItem;\n","import * as React from \"react\";\nimport {\n  SliderLabelProps,\n  SliderProps,\n  SliderTrackStyleProps,\n} from \"./Slider.types\";\nimport styled from \"styled-components\";\nimport Text from \"../Text/Text\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\n\nconst Slider: React.FunctionComponent<SliderProps> = ({\n  value,\n  defaultValue,\n  min = 0,\n  minDisplay = \"0\",\n  max = 100,\n  maxDisplay = \"100\",\n  step = 1,\n  width = \"400px\",\n  color = colorTokens.default.primary.main,\n  className,\n  style,\n  variant = \"contained\",\n  size = \"medium\",\n  disabled,\n  disableLabels = false,\n  // Events\n  onChange,\n}) => {\n  const sliderRef = React.useRef<HTMLDivElement | null>(null);\n  const [sliderValue, setSliderValue] = React.useState<number>(\n    value ?? defaultValue ?? 0\n  );\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  React.useEffect(() => {\n    setSliderValue(value ?? defaultValue ?? 0);\n  }, [value, defaultValue]);\n\n  /* ------------------------------\n    Calculate new value on MouseMove\n  ------------------------------- */\n  const calculateNewValue = (pageX: number) => {\n    if (!sliderRef || !sliderRef.current) return;\n\n    const containerX =\n      sliderRef.current.getBoundingClientRect().x + window.scrollX;\n    const containerWidth = sliderRef.current.offsetWidth;\n\n    const offset = calculateHandleOffset(containerX, pageX, containerWidth);\n    const scaleValue = getScaleValue(offset, min, max, 2);\n    setSliderValue(scaleValue);\n    onChange && onChange(scaleValue);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    e.preventDefault();\n    if (disabled) return;\n    calculateNewValue(e.pageX);\n\n    const handleMouseMove = (e: MouseEvent) => {\n      calculateNewValue(e.pageX);\n    };\n\n    const handleMouseUp = () => {\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      document.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n\n    document.addEventListener(\"mousemove\", handleMouseMove);\n    document.addEventListener(\"mouseup\", handleMouseUp);\n  };\n\n  return (\n    <div style={{ width: width }} aria-disabled={disabled}>\n      <StyledSliderLabel $color={color} $colorPalette={colorPalette}>\n        {!disableLabels && (\n          <Text disableColor size={size}>\n            {minDisplay}\n          </Text>\n        )}\n        {!disableLabels && (\n          <Text disableColor size={size}>\n            {maxDisplay}\n          </Text>\n        )}\n      </StyledSliderLabel>\n      <StyledSliderTrack\n        ref={sliderRef}\n        className={className}\n        style={style}\n        $colorPalette={colorPalette}\n        $color={color}\n        $variant={variant}\n        $size={size}\n        $disabled={disabled}\n        onMouseDown={handleMouseDown}\n      >\n        <StyledSliderTrackFinal\n          style={{ width: `${sliderValue}%` }}\n          $colorPalette={colorPalette}\n          $color={color}\n          $variant={variant}\n          $size={size}\n        >\n          {!disabled && (\n            <StyledSliderHandle\n              $colorPalette={colorPalette}\n              $color={color}\n              $variant={variant}\n              $size={size}\n            />\n          )}\n        </StyledSliderTrackFinal>\n        <StyledSliderInput\n          type=\"slider\"\n          min={min}\n          max={max}\n          step={step}\n          value={sliderValue}\n          readOnly\n        />\n      </StyledSliderTrack>\n    </div>\n  );\n};\nexport default Slider;\n\nconst StyledSliderLabel = styled.div<SliderLabelProps>`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 4px;\n  color: ${(props) => props.$colorPalette[props.$color].accentScale[10]};\n`;\nconst StyledSliderTrack = styled.div<SliderTrackStyleProps>`\n  position: relative;\n  cursor: pointer;\n  ${(props) => {\n    const properties = styleHandler(\n      props.$colorPalette,\n      props.$color,\n      props.$variant,\n      props.$size\n    );\n    return `\n      background-color: ${properties.track.backgroundColor.default};\n      height: ${properties.track.height};\n      border-radius: ${properties.track.borderRadius};\n      outline: ${properties.track.outline.default};\n      \n      ${\n        !props.$disabled\n          ? `&:hover {\n        background-color: ${properties.track.backgroundColor.hover};\n        outline: ${properties.track.outline.hover};\n      }\n      &:active {\n        background-color: ${properties.track.backgroundColor.active};\n        outline: ${properties.track.outline.active};\n      }`\n          : \"\"\n      }\n    `;\n  }}\n`;\nconst StyledSliderTrackFinal = styled.div<SliderTrackStyleProps>`\n  position: relative;\n  z-index: 1;\n  ${(props) => {\n    const properties = styleHandler(\n      props.$colorPalette,\n      props.$color,\n      props.$variant,\n      props.$size\n    );\n    return `\n      height: ${properties.trackFinal.height};\n      border-radius: ${properties.trackFinal.borderRadius};\n      background-color: ${properties.trackFinal.backgroundColor.default};\n      ${\n        !props.$disabled\n          ? `&:hover {\n        background-color: ${properties.trackFinal.backgroundColor.hover};\n      }\n      &:active {\n        background-color: ${properties.trackFinal.backgroundColor.active};\n      }`\n          : \"\"\n      }\n    `;\n  }}\n`;\nconst StyledSliderHandle = styled.div<SliderTrackStyleProps>`\n  position: absolute;\n  border-radius: 50%;\n  ${(props) => {\n    const properties = styleHandler(\n      props.$colorPalette,\n      props.$color,\n      props.$variant,\n      props.$size\n    );\n    return `\n      background-color: ${properties.trackFinal.backgroundColor.default};\n      width: ${properties.handle.width};\n      height: ${properties.handle.height};\n      top: ${properties.handle.top};\n      right: ${properties.handle.right};\n      ${\n        !props.$disabled\n          ? `&:hover {\n        background-color: ${properties.trackFinal.backgroundColor.hover};\n      }\n      &:active {\n        background-color: ${properties.trackFinal.backgroundColor.active};\n      }`\n          : \"\"\n      }\n    `;\n  }}\n`;\nconst StyledSliderInput = styled.input`\n  position: absolute;\n  width: 100%;\n  left: 0;\n  top: 0;\n  border: 0;\n  padding: 0;\n  margin: 0;\n  height: 100%;\n  opacity: 0;\n  cursor: pointer;\n  z-index: 1;\n`;\nconst styleHandler = (\n  colorPalette: any,\n  color: string,\n  variant: SliderTrackStyleProps[\"$variant\"],\n  size: SliderTrackStyleProps[\"$size\"]\n) => {\n  return {\n    track: {\n      ...getVariantStyles(colorPalette, color, variant).track,\n      ...getSizeStyles(size).track,\n    },\n    trackFinal: {\n      ...getVariantStyles(colorPalette, color, variant).trackFinal,\n      ...getSizeStyles(size).trackFinal,\n    },\n    handle: {\n      ...getSizeStyles(size).handle,\n    },\n  };\n};\nconst getVariantStyles = (\n  colorPalette: any,\n  color: string,\n  variant: SliderTrackStyleProps[\"$variant\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      return {\n        track: {\n          backgroundColor: {\n            default: colorPalette[color].accentScale[4],\n            hover: colorPalette[color].accentScale[5],\n            active: colorPalette[color].accentScale[5],\n          },\n          outline: {\n            default: \"none\",\n            hover: \"none\",\n            active: \"none\",\n          },\n        },\n        trackFinal: {\n          backgroundColor: {\n            default: colorPalette[color].accentScale[8],\n            hover: colorPalette[color].accentScale[9],\n            active: colorPalette[color].accentScale[9],\n          },\n        },\n        handle: {},\n      };\n    case \"outlined\":\n      return {\n        track: {\n          backgroundColor: {\n            default: \"transparent\",\n            hover: \"transparent\",\n            active: \"transparent\",\n          },\n          outline: {\n            default: `1px solid ${colorPalette[color].accentScale[8]}`,\n            hover: `1px solid ${colorPalette[color].accentScale[9]}`,\n            active: `1px solid ${colorPalette[color].accentScale[9]}`,\n          },\n        },\n        trackFinal: {\n          backgroundColor: {\n            default: colorPalette[color].accentScale[8],\n            hover: colorPalette[color].accentScale[9],\n            active: colorPalette[color].accentScale[9],\n          },\n        },\n      };\n  }\n};\nconst getSizeStyles = (size: SliderTrackStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return {\n        track: {\n          height: \"6px\",\n          borderRadius: \"5px\",\n        },\n        trackFinal: {\n          height: \"100%\",\n          borderRadius: \"3px\",\n        },\n        handle: {\n          width: \"12px\",\n          height: \"12px\",\n          right: \"-6px\",\n          top: \"-3px\",\n        },\n      };\n    case \"medium\":\n      return {\n        track: {\n          height: \"10px\",\n          borderRadius: \"7px\",\n        },\n        trackFinal: {\n          height: \"100%\",\n          borderRadius: \"5px\",\n        },\n        handle: {\n          width: \"20px\",\n          height: \"20px\",\n          right: \"-10px\",\n          top: \"-5px\",\n          borderRadius: \"50%\",\n        },\n      };\n    case \"large\":\n      return {\n        track: {\n          height: \"14px\",\n          borderRadius: \"9px\",\n        },\n        trackFinal: {\n          height: \"100%\",\n          borderRadius: \"7px\",\n        },\n        handle: {\n          width: \"24px\",\n          height: \"24px\",\n          right: \"-12px\",\n          top: \"-6px\",\n          borderRadius: \"50%\",\n        },\n      };\n  }\n};\n\n/* -------------------------------\n  Calculate offset of the handle\n------------------------------- */\nconst calculateHandleOffset = (\n  containerStartingVal: number,\n  mouseVal: number,\n  containerLength: number\n) => {\n  const relativeVal = mouseVal - containerStartingVal;\n  if (relativeVal < 0) {\n    return 0;\n  } else if (relativeVal > containerLength) {\n    return 100;\n  } else {\n    return (relativeVal * 100) / containerLength;\n  }\n};\nconst getScaleValue = (\n  value: number,\n  min: number,\n  max: number,\n  rounded: number\n) => {\n  return +(min + (value / 100) * (max - min)).toFixed(rounded);\n};\n"],"names":[],"sourceRoot":""}