{"version":3,"file":"stories-components-NumberInput-NumberInput-stories.8663b615.iframe.bundle.js","mappings":";;;;;;AAkIA;;;AAIA;;;;AAKA;AACA;AACA;;;AAIA;AACA;;AAEA;AAwBA;;;;;;AAOA;AACA;AACA;;;;;;;;;;;;AAYA;AAYA;AC+DA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA","sources":["webpack://stelios/./src/components/NumberInput/NumberInput.tsx","webpack://stelios/./src/components/Text/Text.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport Text from \"../Text/Text\";\nimport styled from \"styled-components\";\nimport { IconMinus, IconPlus } from \"@tabler/icons-react\";\nimport { NumberInputProps, NumberInputStyleProps } from \"./NumberInput.types\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette, hasPropertyChain } from \"../../helpers/helpers\";\n\nconst NumberInput = ({\n  id,\n  placeholder,\n  value = 0,\n  className,\n  style,\n  label,\n  min = 0,\n  max = 100,\n  step = 1,\n  variant = \"contained\",\n  color = colorTokens.default.primary.main,\n  size = \"medium\",\n  disabled,\n  onChange,\n  onIncrement,\n  onDecrement,\n}: NumberInputProps) => {\n  const [finalValue, setFinalValue] = React.useState<number | undefined>(value);\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  useEffect(() => {\n    setFinalValue(value);\n  }, [value]);\n\n  const NumberInputLabel = () => {\n    if (!label || !React.isValidElement(label)) return null;\n    return typeof label === \"string\" ? (\n      <Text variant=\"label\" disableColor>\n        {label}\n      </Text>\n    ) : (\n      label\n    );\n  };\n  const _onMinusClick = (e: React.MouseEvent) => {\n    if (!finalValue) {\n      setFinalValue(-1);\n    } else {\n      setFinalValue(finalValue - 1);\n    }\n\n    onDecrement && onDecrement(e, finalValue);\n  };\n  const _onPlusClick = (e: React.MouseEvent) => {\n    if (!finalValue) {\n      setFinalValue(1);\n    } else {\n      setFinalValue(finalValue + 1);\n    }\n\n    onIncrement && onIncrement(e, finalValue);\n    onChange && onChange(e, finalValue);\n  };\n\n  const _onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.value === \"\") {\n      setFinalValue(0);\n    } else {\n      setFinalValue(parseInt(e.target.value));\n    }\n    onChange && onChange(e, parseInt(e.target.value));\n  };\n\n  return (\n    <NumberInputContainer id={id} className={className} style={style}>\n      <NumberInputLabel />\n      <NumberInputContent\n        $variant={variant}\n        $size={size}\n        $colorPalette={colorPalette}\n        $color={color}\n      >\n        <NumberInputIcon\n          $variant={variant}\n          $position=\"left\"\n          $colorPalette={colorPalette}\n          $color={color}\n          $size={size}\n          onClick={_onMinusClick}\n        >\n          <IconMinus />\n        </NumberInputIcon>\n\n        <NumberInputInput\n          $variant={variant}\n          placeholder={placeholder}\n          type=\"number\"\n          $size={size}\n          $colorPalette={colorPalette}\n          $color={color}\n          max={max}\n          min={min}\n          value={finalValue}\n          step={step}\n          onChange={_onChange}\n        />\n\n        <NumberInputIcon\n          $variant={variant}\n          $position=\"right\"\n          $size={size}\n          $colorPalette={colorPalette}\n          $color={color}\n          onClick={_onPlusClick}\n        >\n          <IconPlus />\n        </NumberInputIcon>\n      </NumberInputContent>\n    </NumberInputContainer>\n  );\n};\n\nexport default NumberInput;\n\nconst NumberInputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: fit-content;\n  gap: 0.5rem;\n`;\nconst NumberInputContent = styled.div<NumberInputStyleProps>`\n  display: flex;\n  flex-direction: row;\n`;\nconst NumberInputIcon = styled.button<NumberInputStyleProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: ${(props: NumberInputStyleProps) => getSize(props.$size).size};\n  height: ${(props: NumberInputStyleProps) => getSize(props.$size).size};\n  border-radius: ${(props) =>\n    props.$position === \"left\" ? \"4px 0 0 4px\" : \"0 4px 4px 0\"};\n  cursor: pointer;\n  svg {\n    width: ${(props: NumberInputStyleProps) => getSize(props.$size).iconSize};\n    height: ${(props: NumberInputStyleProps) => getSize(props.$size).iconSize};\n  }\n  ${(props) => {\n    const variantStyles = variantStyleHandler(\n      props.$variant,\n      props.$colorPalette,\n      props.$color\n    );\n    return `\n      background-color: ${variantStyles.numberInputIcon.backgroundColor.default};\n      color: ${variantStyles.numberInputIcon.color.default};\n      border: ${variantStyles.numberInputIcon.border.default};\n\n      &:hover {\n        background-color: ${variantStyles.numberInputIcon.backgroundColor.hover};\n        color: ${variantStyles.numberInputIcon.color.hover};\n        border: ${variantStyles.numberInputIcon.border.hover};\n      }\n\n      &:active {\n        background-color: ${variantStyles.numberInputIcon.backgroundColor.active};\n        color: ${variantStyles.numberInputIcon.color.active};\n        border: ${variantStyles.numberInputIcon.border.active};\n      }\n    `;\n  }}\n`;\nconst NumberInputInput = styled.input<NumberInputStyleProps>`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  font-family: \"Source Sans 3\", sans-serif;\n  font-size: ${(props) => getSize(props.$size).fontSize};\n  width: ${(props) => getSize(props.$size).width};\n  height: ${(props) => getSize(props.$size).size};\n  padding: 0 1rem;\n  box-sizing: border-box;\n  margin: 0;\n  &::-webkit-inner-spin-button,\n  &::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  &:focus {\n    outline: none;\n  }\n  ${(props) => {\n    const variantStyles = variantStyleHandler(\n      props.$variant,\n      props.$colorPalette,\n      props.$color\n    );\n    return `\n      border: ${variantStyles.numberInputInput.border.default};\n      ${hasPropertyChain(variantStyles, [\"numberInputInput\", \"borderTop\"]) ? `border-top: ${variantStyles.numberInputInput.borderTop!.default};` : \"\"}\n      ${hasPropertyChain(variantStyles, [\"numberInputInput\", \"borderBottom\"]) ? `border-bottom: ${variantStyles.numberInputInput.borderBottom!.default};` : \"\"}\n    `;\n  }}\n`;\n\nconst getSize = (size?: \"small\" | \"medium\" | \"large\") => {\n  switch (size) {\n    case \"large\":\n      return {\n        size: \"3rem\",\n        iconSize: \"1.5rem\",\n        width: \"5rem\",\n        fontSize: \"1rem\",\n      };\n    case \"medium\":\n      return {\n        size: \"2.5rem\",\n        iconSize: \"1.25rem\",\n        width: \"5rem\",\n        fontSize: \"1rem\",\n      };\n    case \"small\":\n      return {\n        size: \"2rem\",\n        iconSize: \"1rem\",\n        width: \"4rem\",\n        fontSize: \"0.875rem\",\n      };\n  }\n  return {\n    size: \"2.5rem\",\n    iconSize: \"1.25rem\",\n    width: \"5rem\",\n    fontSize: \"1rem\",\n  };\n};\nconst variantStyleHandler = (\n  variant: NumberInputStyleProps[\"$variant\"],\n  colorPalette: NumberInputStyleProps[\"$colorPalette\"],\n  color: NumberInputStyleProps[\"$color\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      return {\n        numberInputIcon: {\n          backgroundColor: {\n            default: colorPalette[color].accentScale[8],\n            hover: colorPalette[color].accentScale[9],\n            active: colorPalette[color].accentScale[9],\n          },\n          color: {\n            default: colorPalette[color].accentContrast,\n            hover: colorPalette[color].accentContrast,\n            active: colorPalette[color].accentContrast,\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].accentScale[8]}`,\n            hover: `2px solid ${colorPalette[color].accentScale[9]}`,\n            active: `2px solid ${colorPalette[color].accentScale[9]}`,\n          },\n        },\n        numberInputInput: {\n          border: {\n            default: `2px solid ${colorPalette[color].accentScale[8]}`,\n            hover: `2px solid ${colorPalette[color].accentScale[9]}`,\n            active: `2px solid ${colorPalette[color].accentScale[9]}`,\n          },\n        },\n      };\n    case \"outlined\":\n      return {\n        numberInputIcon: {\n          backgroundColor: {\n            default: \"transparent\",\n            hover: \"transparent\",\n            active: \"transparent\",\n          },\n          color: {\n            default: colorPalette[color].accentScale[10],\n            hover: colorPalette[color].accentScale[10],\n            active: colorPalette[color].accentScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].accentScale[5]}`,\n            hover: `2px solid ${colorPalette[color].accentScale[6]}`,\n            active: `2px solid ${colorPalette[color].accentScale[7]}`,\n          },\n        },\n        numberInputInput: {\n          border: {\n            default: `2px solid transparent`,\n            hover: `2px solid transparent`,\n            active: `2px solid transparent`,\n          },\n          borderTop: {\n            default: `2px solid ${colorPalette[color].accentScale[5]}`,\n            hover: `2px solid ${colorPalette[color].accentScale[6]}`,\n            active: `2px solid ${colorPalette[color].accentScale[7]}`,\n          },\n          borderBottom: {\n            default: `2px solid ${colorPalette[color].accentScale[5]}`,\n            hover: `2px solid ${colorPalette[color].accentScale[6]}`,\n            active: `2px solid ${colorPalette[color].accentScale[7]}`,\n          }\n        },\n      };\n    case \"soft\":\n      return {\n        numberInputIcon: {\n          backgroundColor: {\n            default: colorPalette[color].accentScale[2],\n            hover: colorPalette[color].accentScale[3],\n            active: colorPalette[color].accentScale[3],\n          },\n          color: {\n            default: colorPalette[color].accentScale[10],\n            hover: colorPalette[color].accentScale[10],\n            active: colorPalette[color].accentScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].accentScale[2]}`,\n            hover: `2px solid ${colorPalette[color].accentScale[3]}`,\n            active: `2px solid ${colorPalette[color].accentScale[3]}`,\n          },\n        },\n        numberInputInput: {\n          border: {\n            default: `2px solid ${colorPalette[color].accentScale[2]}`,\n            hover: `2px solid ${colorPalette[color].accentScale[3]}`,\n            active: `2px solid ${colorPalette[color].accentScale[3]}`,\n          },\n        },\n      };\n  }\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextProps, TextStyleProps } from \"./Text.types\";\nimport { Helmet } from \"react-helmet\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\ninterface StyledProps {\n  $disableColor?: boolean;\n  $color?: string;\n}\n\nconst Text = ({\n  variant = \"div\",\n  strong,\n  children,\n  align = \"center\",\n  color = colorTokens.default.primary.main,\n  preciseColor,\n  wrap = false,\n  size = \"medium\",\n  disableColor = false,\n  fontSize,\n  lineHeight,\n  style,\n  className,\n  fontFamily,\n  ...rest\n}: TextProps) => {\n  const theme = useTheme().theme;\n  let _styledProps: StyledProps;\n  if (disableColor) {\n    _styledProps = { $disableColor: disableColor };\n  } else {\n    const colorPalette = getColorPalette(theme, color);\n    const _color = preciseColor ?? (color && colorPalette\n      ? colorPalette[color].accentScale[10]\n      : color);\n    _styledProps = { $disableColor: disableColor, $color: _color };\n  }\n\n  const _Text = () => {\n    switch (variant) {\n      case \"h1\":\n        return (\n          <StyledH1\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH1>\n        );\n      case \"h2\":\n        return (\n          <StyledH2\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH2>\n        );\n      case \"h3\":\n        return (\n          <StyledH3\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH3>\n        );\n      case \"h4\":\n        return (\n          <StyledH4\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH4>\n        );\n      case \"h5\":\n        return (\n          <StyledH5\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH5>\n        );\n      case \"h6\":\n        return (\n          <StyledH6\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH6>\n        );\n      case \"div\":\n        return (\n          <StyledDiv\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledDiv>\n        );\n      case \"paragraph\":\n        return (\n          <StyledP\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledP>\n        );\n      case \"label\":\n        return (\n          <StyledLabel\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledLabel>\n        );\n      case \"span\":\n        return (\n          <StyledSpan\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledSpan>\n        );\n      default:\n        return (\n          <StyledDiv\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledDiv>\n        );\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link\n          rel=\"preconnect\"\n          href=\"https://fonts.gstatic.com\"\n          crossOrigin=\"\"\n        />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Varela+Round&display=swap\"\n          rel=\"stylesheet\"\n        />\n      </Helmet>\n      {_Text()}\n    </>\n  );\n};\nexport default Text;\n\nconst commonStyles = `\n  padding: 0;\n  margin: 0;\n`;\nconst StyledH1 = styled.h1<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2.25rem\"\n        : \"2rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$lineHeight === \"large\"\n      ? \"4rem\"\n      : props.$size === \"medium\"\n        ? \"3.5rem\"\n        : \"3rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${commonStyles}\n`;\nconst StyledH2 = styled.h2<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"2.25rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$size === \"large\"\n      ? \"3.5rem\"\n      : props.$size === \"medium\"\n        ? \"3rem\"\n        : \"2.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH3 = styled.h3<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$size === \"large\"\n      ? \"3rem\"\n      : props.$size === \"medium\"\n        ? \"2.5rem\"\n        : \"2rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH4 = styled.h4<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$size === \"large\"\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH5 = styled.h5<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"1.5rem\"\n      : props.$size === \"medium\"\n        ? \"1.25rem\"\n        : \"1rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$size === \"large\"\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH6 = styled.h6<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$size === \"large\"\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledDiv = styled.div<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$size === \"large\"\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledLabel = styled.label<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$size === \"large\"\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledSpan = styled.span<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$size === \"large\"\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledP = styled.p<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$size === \"large\"\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\n"],"names":[],"sourceRoot":""}