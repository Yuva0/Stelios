{"version":3,"file":"2078.21034741.iframe.bundle.js","mappings":";;AA4JA;AACA;;;AAGA;AAzBA;AACA;AACA;AACA;;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;;AAYA;;;;;;;;;;;AAYA;;;;;;;AC1EA;AAEA;;AAGA;;;;;;;;;;AAWA;AAUA;AACA;;;AAGA;AACA;;;;AAIA;AACA;;;;AAIA;;;;AAIA;;AAIA;;;AAGA;AACA;;;;;AAKA;;;;AAIA;;;;AAIA;AAGA;AACA;;;AAGA;AACA;;;;AAIA;AACA;;;;AAIA;;;;AAIA","sources":["webpack://stelios/./src/components/Menu/Menu.tsx","webpack://stelios/./src/components/MenuItem/MenuItem.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useEffect, useState } from \"react\";\nimport { MenuProps, MenuStyleProps } from \"./Menu.types\";\nimport { MenuItemKeyProps, MenuItemPrivateProps } from \"../MenuItem/MenuItem.types\";\nimport styled, { css } from \"styled-components\";\nimport { usePopper } from \"react-popper\";\nimport { MenuItemProps } from \"../MenuItem/MenuItem.types\";\nimport ClickAwayListener from \"../ClickAwayListener/ClickAwayListener\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\nconst Menu = forwardRef<HTMLDivElement, MenuProps>(\n  (\n    {\n      children,\n      popperStyles,\n      variant = \"contained\",\n      open = false,\n      minWidth = \"none\",\n      anchorElement,\n      hideOnOutsideClick = true,\n      color = colorTokens.default.primary.main,\n      className,\n      style,\n      // Events\n      onClick,\n      onClose,\n      \"data-testid\": dataTestId,\n      ...props\n    },\n    ref\n  ) => {\n    const [isOpen, setIsOpen] = useState(open);\n    const [popperElement, setPopperElement] = useState<HTMLDivElement | null>(\n      null\n    );\n    const [focusVisible, setFocusVisible] = useState<number>(0);\n    const theme = useTheme().theme;\n    const colorPalette = getColorPalette(theme, color);\n    const { styles, attributes } = usePopper(anchorElement, popperElement, {\n      placement: (popperStyles && popperStyles.placement) ?? \"bottom-start\",\n      modifiers: (popperStyles && popperStyles.modifiers) ?? [\n        {\n          name: \"offset\",\n          options: {\n            offset: [0, 2.5],\n          },\n        },\n      ],\n    });\n\n    useEffect(() => {\n      setIsOpen(open);\n    }, [open]);\n    useEffect(() => {\n      setFocusVisible(0);\n    },[isOpen]);\n\n    const _onClick = useCallback((\n      e: React.MouseEvent<HTMLLIElement>,\n      { title, value }: MenuItemKeyProps\n    ) => {\n      onClick && onClick(e, { title, value });\n    },[onClick]);\n\n    const _onClose = useCallback((e: MouseEvent) => {\n      setIsOpen(false);\n      onClose && onClose(e);\n    },[onClose]);\n\n    const _onKeyDown = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n      if(e.key === \"ArrowDown\") {\n        e.preventDefault();\n        setFocusVisible((prev) => (prev + 1) % React.Children.count(children));\n      }\n      else if(e.key === \"ArrowUp\"){\n        e.preventDefault();\n        setFocusVisible((prev) => (prev - 1 + React.Children.count(children)) % React.Children.count(children));\n      }\n    },[children]);\n\n    if (Array.isArray(children) && children.length === 0) return null;\n\n    const MenuElement = (\n      <StyledMenuContainer\n        ref={setPopperElement}\n        $open={isOpen}\n        $minWidth={minWidth}\n        $colorPalette={colorPalette}\n        $color={color}\n        $variant={variant}\n        style={{ ...styles.popper, ...style }}\n        onKeyDown={_onKeyDown}\n        data-testid={dataTestId}\n        className={className}\n        {...attributes.popper}\n        {...props}\n      >\n        <StyledMenu>\n          {React.Children.map(children, (child, index) => {\n            if (!child) return child;\n            if (!React.isValidElement(child)) return child;\n            return React.cloneElement(child, {\n              key: child.props.index ?? index,\n              ...(!child.props.color && { color: color }),\n              ...(!child.props.variant && { variant: variant }),\n              pvtHasFocus: focusVisible === index,\n              pvtOnClick: _onClick,\n            } as MenuItemProps & MenuItemPrivateProps);\n          })}\n        </StyledMenu>\n      </StyledMenuContainer>\n    );\n\n    if (hideOnOutsideClick) {\n      return (\n        <ClickAwayListener onClickAway={_onClose}>\n          {MenuElement}\n        </ClickAwayListener>\n      );\n    }\n\n    return MenuElement;\n  }\n);\nexport default Menu;\n\nconst variantStyleHandler = (\n  variant: MenuStyleProps[\"$variant\"],\n  colorPalette: MenuStyleProps[\"$colorPalette\"],\n  color: MenuStyleProps[\"$color\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      return css`\n        background-color: ${colorPalette[color].accentScale[8]};\n        color: ${colorPalette[color].accentContrast};\n        border: 2px solid ${colorPalette[color].accentScale[8]};\n      `;\n    case \"outlined\":\n      return css`\n        background-color: \"transparent\";\n        color: ${colorPalette[color].accentScale[10]};\n        border: 2px solid ${colorPalette[color].accentScale[5]};\n      `;\n    case \"soft\":\n      return css`\n        background-color: ${colorPalette[color].accentScale[2]};\n        color: ${colorPalette[color].accentScale[10]};\n        border: 2px solid ${colorPalette[color].accentScale[2]};\n      `;\n      \n  }\n};\n\nconst StyledMenuContainer = styled.div<MenuStyleProps>`\n  display: ${(props) => (props.$open ? \"block\" : \"none\")};\n  min-width: ${(props) => props.$minWidth};\n  border-radius: 0.5rem;\n  padding: 0.5rem 0;\n  ${props => variantStyleHandler(props.$variant, props.$colorPalette, props.$color)}\n  \n`;\nconst StyledMenu = styled.ul`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  box-sizing: border-box;\n  width: 100%;\n  list-style-type: none;\n  cursor: pointer;\n  padding: 0;\n  margin: 0;\n  user-select: none;\n`;\n\n\n","import React, { useEffect, useRef } from \"react\";\nimport Text from \"../Text/Text\";\nimport {\n  MenuItemPrivateProps,\n  MenuItemProps,\n  MenuItemStyleProps,\n} from \"./MenuItem.types\";\nimport styled, { css } from \"styled-components\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\nconst MenuItem: React.FC<MenuItemProps> = ({\n  leadingIcon,\n  trailingIcon,\n  children,\n  title,\n  value,\n  variant = \"contained\",\n  color = colorTokens.default.primary.main,\n  onClick,\n  // Test Props\n  \"data-testid\": dataTestId,\n\n  pvtHasFocus,\n  pvtOnClick,\n}: MenuItemProps & MenuItemPrivateProps) => {\n  const menuItemRef = useRef<HTMLLIElement>(null);\n  const theme = useTheme().theme;\n  useEffect(() => {\n    if (pvtHasFocus && menuItemRef.current) {\n      menuItemRef.current.focus();\n    }\n  }, [menuItemRef, pvtHasFocus]);\n\n  const colorPalette = getColorPalette(theme, color);\n\n  const _onClick = (event: React.MouseEvent<HTMLLIElement>) => {\n    pvtOnClick && pvtOnClick(event, { title, value });\n    onClick && onClick(event, { title, value });\n  };\n  const _onKeyDown = (event: React.KeyboardEvent<HTMLLIElement>) => {\n    if (event.key === \"Enter\" || event.key === \" \") {\n      pvtOnClick && pvtOnClick(event, { title, value });\n      onClick && onClick(event, { title, value });\n    }\n  };\n\n  return (\n    <StyledMenuItem\n      ref={menuItemRef}\n      tabIndex={pvtHasFocus ? 0 : -1}\n      $variant={variant}\n      $colorPalette={colorPalette}\n      $color={color}\n      onClick={_onClick}\n      onKeyDown={_onKeyDown}\n      data-testid={dataTestId}\n    >\n      {leadingIcon && <StyledMenuItemIcon>{leadingIcon}</StyledMenuItemIcon>}\n      <StyledMenuItemContent\n        $variant={variant}\n        $color={color}\n        $colorPalette={colorPalette}\n      >\n        {children ? (\n          typeof children === \"string\" ? (\n            <Text disableColor variant=\"paragraph\">\n              {children}\n            </Text>\n          ) : (\n            children\n          )\n        ) : (\n          <Text disableColor variant=\"paragraph\">\n            {title}\n          </Text>\n        )}\n      </StyledMenuItemContent>\n      {trailingIcon && (\n        <StyledMenuItemContent\n          $variant={variant}\n          $color={color}\n          $colorPalette={colorPalette}\n        >\n          {trailingIcon}\n        </StyledMenuItemContent>\n      )}\n    </StyledMenuItem>\n  );\n};\nexport default MenuItem;\n\nconst StyledMenuItem = styled.li<MenuItemStyleProps>`\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  padding: 0.5rem 1rem 0.5rem 1rem;\n  gap: 0.25rem;\n  cursor: pointer;\n  ${(props) =>\n    variantStyleHandler(props.$variant, props.$colorPalette, props.$color)}\n`;\nconst StyledMenuItemContent = styled.span<MenuItemStyleProps>`\n  width: 100%;\n`;\nconst StyledMenuItemIcon = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 1.25rem;\n  height: 1.25rem;\n  & svg {\n    width: 1.25rem;\n    height: 1.25rem;\n  }\n`;\n\nconst variantStyleHandler = (\n  variant: MenuItemStyleProps[\"$variant\"],\n  colorPalette: MenuItemStyleProps[\"$colorPalette\"],\n  color: MenuItemStyleProps[\"$color\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      return css`\n        background-color: ${colorPalette[color].accentScale[8]};\n        color: ${colorPalette[color].accentContrast};\n\n        &:hover {\n          background-color: ${colorPalette[color].accentScale[9]};\n          color: ${colorPalette[color].accentContrast};\n        }\n\n        &:active {\n          background-color: ${colorPalette[color].accentScale[9]};\n          color: ${colorPalette[color].accentContrast};\n        }\n\n        &:focus-visible {\n          outline: 2px solid ${colorPalette[color].accentScale[10]};\n          border-radius: 0.25rem;\n          outline-offset: -0.125rem;\n        }\n      `;\n    case \"outlined\":\n      return css`\n        background-color: transparent;\n        color: ${colorPalette[color].accentScale[10]};\n\n        &:hover {\n          background-color: ${colorPalette[color].grayScale[1]};\n          color: ${colorPalette[color].accentScale[10]};\n        }\n\n        &:active {\n          background-color: transparent;\n          color: ${colorPalette[color].accentScale[10]};\n        }\n\n        &:focus-visible {\n          outline: 2px solid ${colorPalette[color].accentScale[10]};\n          border-radius: 0.25rem;\n          outline-offset: -0.125rem;\n        }\n      `;\n    case \"soft\":\n      return css`\n        background-color: ${colorPalette[color].accentScale[2]};\n        color: ${colorPalette[color].accentScale[10]};\n\n        &:hover {\n          background-color: ${colorPalette[color].accentScale[3]};\n          color: ${colorPalette[color].accentScale[10]};\n        }\n\n        &:active {\n          background-color: ${colorPalette[color].accentScale[3]};\n          color: ${colorPalette[color].accentScale[10]};\n        }\n\n        &:focus-visible {\n          outline: 2px solid ${colorPalette[color].accentScale[10]};\n          border-radius: 0.25rem;\n          outline-offset: -0.125rem;\n        }\n      `;\n  }\n};\n"],"names":[],"sourceRoot":""}