{"version":3,"file":"stories-components-ToggleButton-ToggleButton-mdx.3f7a1dfc.iframe.bundle.js","mappings":";;;;;AA8HA;;;AAGA;;AAEA;AAEA;AAEA;;;;AAKA;;;;AAKA;;;;AAKA;;;;AAKA;AACA;;AAEA;;;;;ACpIA;;;;;;;;;AASA;AAEA;AAEA;;;;AAKA;AAEA;AAEA;;;;AAKA;AAEA;AAEA;;;;;;AAOA;;;AAGA;;;AAGA;;;AAIA;ACyLA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA","sources":["webpack://stelios/./src/components/ToggleButton/ToggleButton.tsx","webpack://stelios/./src/components/ToggleButton/ToggleButtonGroup/ToggleButtonGroup.tsx","webpack://stelios/./src/components/Text/Text.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  ToggleButtonProps,\n  ToggleButtonStyleProps,\n} from \"./ToggleButton.types\";\nimport styled from \"styled-components\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\"\n\nconst ToggleButton = ({\n  index,\n  children,\n  value,\n  defaultSelected,\n  selected,\n  color = colorTokens.default.primary.main,\n  size = \"medium\",\n  className,\n  style,\n  // Events\n  onClick,\n  \"data-testid\": dataTestId,\n}: ToggleButtonProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme,color);\n  const isSelected = selected ?? defaultSelected ?? false;\n\n  const _onClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    onClick && onClick(e, value, index);\n  };\n\n  return (\n    <StyledToggleBtn\n      $size={size}\n      $selected={isSelected}\n      $color={color}\n      $colorPalette={colorPalette}\n      className={className}\n      style={style}\n      onClick={_onClick}\n      data-testid={dataTestId}\n    >\n      {children}\n    </StyledToggleBtn>\n  );\n};\nToggleButton.displayName = \"ToggleButton\";\nexport default ToggleButton;\n\nconst getBgColor = (\n  color: ToggleButtonStyleProps[\"$color\"],\n  colorPalette: ToggleButtonStyleProps[\"$colorPalette\"],\n  selected: ToggleButtonStyleProps[\"$selected\"]\n) => {\n  if (selected) {\n    return {\n      default: `${colorPalette[color].accentScale[8]}`,\n    };\n  }\n  return {\n    default: `${colorPalette[color].accentScale[0]}`,\n    hover: `${colorPalette[color].accentScale[1]}`,\n    active: `${colorPalette[color].accentScale[2]}`,\n  };\n};\nconst getColor = (\n  color: ToggleButtonStyleProps[\"$color\"],\n  colorPalette: ToggleButtonStyleProps[\"$colorPalette\"],\n  selected: ToggleButtonStyleProps[\"$selected\"]\n) => {\n  if (selected) {\n    return {\n      default: `${colorPalette[color].accentContrast}`,\n    };\n  }\n  return {\n    default: `${colorPalette[color].accentScale[10]}`,\n  };\n};\nconst getPadding = (size: ToggleButtonStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return \"4px 8px\";\n    case \"medium\":\n      return \"8px 16px\";\n    case \"large\":\n      return \"12px 18px\";\n    default:\n      return \"8px 16px\";\n  }\n};\nconst getIconSize = (size: ToggleButtonStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return \"16px\";\n    case \"medium\":\n      return \"20px\";\n    case \"large\":\n      return \"24px\";\n    default:\n      return \"20px\";\n  }\n};\nconst getGap = (size: ToggleButtonStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return \"0.25rem\";\n    case \"medium\":\n      return \"0.5rem\";\n    case \"large\":\n      return \"0.5rem\";\n    default:\n      return \"0.5rem\";\n  }\n};\nconst getOutlineFocus = (\n  color: ToggleButtonStyleProps[\"$color\"],\n  colorPalette: ToggleButtonStyleProps[\"$colorPalette\"],\n) => {\n  return `2px solid ${colorPalette[color].accentScale[7]}`;\n};\nconst StyledToggleBtn = styled.button<ToggleButtonStyleProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: ${(props) => getPadding(props.$size)};\n  font-size: 1rem;\n  width: 100%;\n  gap: ${(props) => getGap(props.$size)};\n  cursor: pointer;\n  color: ${(props) =>\n    getColor(props.$color, props.$colorPalette, props.$selected).default};\n  background-color: ${(props) =>\n    getBgColor(props.$color, props.$colorPalette, props.$selected).default};\n  color: ${(props) =>\n    getColor(props.$color, props.$colorPalette, props.$selected).default};\n\n  &:focus-visible {\n    outline-offset: -2px;\n    outline: ${(props) =>\n      getOutlineFocus(props.$color, props.$colorPalette)};\n  }\n\n  &:hover {\n    background-color: ${(props) =>\n      getBgColor(props.$color, props.$colorPalette, props.$selected).hover};\n  }\n\n  &:active {\n    background-color: ${(props) =>\n      getBgColor(props.$color, props.$colorPalette, props.$selected).active};\n  }\n\n  & svg {\n    width: ${(props) => getIconSize(props.$size)};\n    height: ${(props) => getIconSize(props.$size)};\n  }\n`;","import React from \"react\";\nimport {\n  ToggleButtonGroupProps,\n  ToggleButtonStyleGroupProps,\n} from \"./ToggleButtonGroup.types\";\nimport styled from \"styled-components\";\nimport { useTheme } from \"../../ThemeProvider/ThemeProvider\";\nimport colorTokens from \"../../../tokens/colors.json\";\nimport { getColorPalette } from \"../../../helpers/helpers\";\n\nconst getBorder = (\n  color: ToggleButtonStyleGroupProps[\"$color\"],\n  colorPalette: ToggleButtonStyleGroupProps[\"$colorPalette\"]\n) => {\n  return {\n    default: `1px solid ${colorPalette[color].accentScale[8]}`,\n    hover: `1px solid ${colorPalette[color].accentScale[9]}`,\n    active: `1px solid ${colorPalette[color].accentScale[9]}`,\n  };\n};\n\nconst StyledToggleBtnGroup = styled.div<ToggleButtonStyleGroupProps>`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  width: ${(props) => props.$width};\n  & > :first-child {\n    border-top-left-radius: 4px;\n    border-bottom-left-radius: 4px;\n  }\n  & > :not(:first-child):not(:last-child) {\n    border-radius: 0;\n  }\n  & > :not(:last-child) {\n    border-left: ${(props) =>\n      getBorder(props.$color, props.$colorPalette).default};\n    border-top: ${(props) =>\n      getBorder(props.$color, props.$colorPalette).default};\n    border-bottom: ${(props) =>\n      getBorder(props.$color, props.$colorPalette).default};\n    border-right: 0;\n\n    &:hover {\n      border-left: ${(props) =>\n        getBorder(props.$color, props.$colorPalette).hover};\n      border-top: ${(props) =>\n        getBorder(props.$color, props.$colorPalette).hover};\n      border-bottom: ${(props) =>\n        getBorder(props.$color, props.$colorPalette).hover};\n    }\n\n    &:active {\n      border-left: ${(props) =>\n        getBorder(props.$color, props.$colorPalette).active};\n      border-top: ${(props) =>\n        getBorder(props.$color, props.$colorPalette).active};\n      border-bottom: ${(props) =>\n        getBorder(props.$color, props.$colorPalette).active};\n    }\n  }\n  & > :last-child {\n    border-top-right-radius: 4px;\n    border-bottom-right-radius: 4px;\n    border: ${(props) => getBorder(props.$color, props.$colorPalette).default};\n\n    &:hover {\n      border: ${(props) => getBorder(props.$color, props.$colorPalette).hover};\n    }\n    &:active {\n      border: ${(props) =>\n        getBorder(props.$color, props.$colorPalette).active};\n    }\n  }\n`;\n\nconst getIndexFromValue = (value: string, children: React.ReactNode) => {\n  const childrenArray = React.Children.toArray(children);\n  return childrenArray.findIndex((child: any) => child.props.value === value);\n};\n\nconst ToggleButtonGroup = ({\n  children,\n  value,\n  color = colorTokens.default.primary.main,\n  className,\n  size,\n  style,\n  width = \"fit-content\",\n  //Events\n  onClick,\n  \"data-testid\": dataTestId,\n  ...props\n}: ToggleButtonGroupProps) => {\n  const [selectedIndex, setSelectedIndex] = React.useState<number | null>(\n    value ? getIndexFromValue(value, children) : null\n  );\n\n  React.useEffect(() => {\n    setSelectedIndex(value ? getIndexFromValue(value, children) : null);\n  }, [value, children]);\n\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme,color);\n\n  const _onClick = (e: React.MouseEvent, value?: string, index?: number) => {\n    setSelectedIndex(index ?? null);\n    onClick && onClick(e, value);\n  };\n\n  return (\n    <StyledToggleBtnGroup\n      $width={width}\n      $color={color}\n      $colorPalette={colorPalette}\n      className={className}\n      style={style}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {React.Children.map(children, (child, index) => {\n        if (React.isValidElement(child) && child.type) {\n          const childElement = child as React.ReactElement;\n          const childType = childElement.type;\n\n          if (typeof childType === \"string\") return child;\n          /* causing an issue in production build as they define a custom name for the component */\n          if ((childType as any).displayName === \"ToggleButton\") {\n          return React.cloneElement(childElement, {\n            index: index,\n            selected: selectedIndex === index,\n            ...(!childElement.props.color && color && { color }),\n            ...(!childElement.props.size && size && { size }),\n            onClick: _onClick,\n          });\n          }\n        }\n        return child;\n      })}\n    </StyledToggleBtnGroup>\n  );\n};\n\nexport default ToggleButtonGroup;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextProps, TextStyleProps } from \"./Text.types\";\nimport { Helmet } from \"react-helmet\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\ninterface StyledProps {\n  $disableColor?: boolean;\n  $color?: string;\n}\n\nconst Text = ({\n  variant = \"div\",\n  strong,\n  children,\n  align = \"center\",\n  color = colorTokens.default.primary.main,\n  preciseColor,\n  wrap = false,\n  size = \"medium\",\n  disableColor = false,\n  fontSize,\n  lineHeight,\n  style,\n  className,\n  fontFamily,\n  \"data-testid\": dataTestId,\n  ...props\n}: TextProps) => {\n  const theme = useTheme().theme;\n  let _styledProps: StyledProps;\n  if (disableColor) {\n    _styledProps = { $disableColor: disableColor };\n  } else {\n    const colorPalette = getColorPalette(theme, color);\n    const _color = preciseColor ?? colorPalette![color].accentScale[10];\n    _styledProps = { $disableColor: disableColor, $color: _color };\n  }\n\n  const _Text = () => {\n    switch (variant) {\n      case \"h1\":\n        return (\n          <StyledH1\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH1>\n        );\n      case \"h2\":\n        return (\n          <StyledH2\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH2>\n        );\n      case \"h3\":\n        return (\n          <StyledH3\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH3>\n        );\n      case \"h4\":\n        return (\n          <StyledH4\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH4>\n        );\n      case \"h5\":\n        return (\n          <StyledH5\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH5>\n        );\n      case \"h6\":\n        return (\n          <StyledH6\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH6>\n        );\n      case \"div\":\n        return (\n          <StyledDiv\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledDiv>\n        );\n      case \"paragraph\":\n        return (\n          <StyledP\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledP>\n        );\n      case \"label\":\n        return (\n          <StyledLabel\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledLabel>\n        );\n      case \"span\":\n        return (\n          <StyledSpan\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledSpan>\n        );\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link\n          rel=\"preconnect\"\n          href=\"https://fonts.gstatic.com\"\n          crossOrigin=\"\"\n        />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Varela+Round&display=swap\"\n          rel=\"stylesheet\"\n        />\n      </Helmet>\n      {_Text()}\n    </>\n  );\n};\nexport default Text;\n\nconst commonStyles = `\n  padding: 0;\n  margin: 0;\n`;\nconst StyledH1 = styled.h1<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2.25rem\"\n        : \"2rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"4rem\"\n      : props.$size === \"medium\"\n        ? \"3.5rem\"\n        : \"3rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${commonStyles}\n`;\nconst StyledH2 = styled.h2<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"2.25rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3.5rem\"\n      : props.$size === \"medium\"\n        ? \"3rem\"\n        : \"2.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH3 = styled.h3<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3rem\"\n      : props.$size === \"medium\"\n        ? \"2.5rem\"\n        : \"2rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH4 = styled.h4<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH5 = styled.h5<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.5rem\"\n      : props.$size === \"medium\"\n        ? \"1.25rem\"\n        : \"1rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH6 = styled.h6<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledDiv = styled.div<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledLabel = styled.label<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledSpan = styled.span<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledP = styled.p<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\n"],"names":[],"sourceRoot":""}