{"version":3,"file":"stories-components-IconButton-IconButton-stories.74aacab7.iframe.bundle.js","mappings":";;;;;;AAuEA;AAuCA;AAIA;AACA;;;;;AAKA;AC2IA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA","sources":["webpack://stelios/./src/components/IconButton/IconButton.tsx","webpack://stelios/./src/components/Text/Text.tsx"],"sourcesContent":["import React, { forwardRef } from \"react\";\nimport { IconButtonProps, IconButtonStyleProps } from \"./IconButton.types\";\nimport styled from \"styled-components\";\nimport Text from \"../Text/Text\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette, hasPropertyChain } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\nconst IconButton = forwardRef(\n  (\n    {\n      alt,\n      icon,\n      size = \"medium\",\n      variant = \"contained\",\n      color = colorTokens.default.primary.main,\n      disabled = false,\n      className,\n      style,\n      onClick,\n      \"data-testid\": dataTestId,\n      ...rest\n    }: IconButtonProps,\n    ref: React.ForwardedRef<HTMLButtonElement>\n  ) => {\n    const theme = useTheme().theme;\n    const colorPalette = getColorPalette(theme, color);\n\n    return (\n      <StyledIconBtn\n        ref={ref}\n        $variant={variant}\n        $size={size}\n        $color={color}\n        $disabled={disabled}\n        $colorPalette={colorPalette}\n        aria-disabled={disabled}\n        style={style}\n        className={className}\n        onClick={onClick}\n        data-testid={dataTestId}\n        {...rest}\n      >\n        {typeof icon === \"string\" ? (\n          <Text variant=\"span\" size={size}>\n            {icon}\n          </Text>\n        ) : (\n          <IconButtonIcon icon={icon} size={size} />\n        )}\n      </StyledIconBtn>\n    );\n  }\n);\n\nexport default IconButton;\nconst IconButtonIcon = ({\n  icon,\n  size,\n}: {\n  icon: React.ReactNode;\n  size: \"small\" | \"medium\" | \"large\";\n}) => {\n  return <StyledIconButtonIcon $size={size}>{icon}</StyledIconButtonIcon>;\n};\n\nconst StyledIconBtn = styled.button<IconButtonStyleProps>`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  ${(props) => {\n    const properties = propsHandler(\n      props.$variant,\n      props.$color,\n      props.$colorPalette,\n      props.$size,\n      props.$disabled\n    );\n    return `\n      background-color: ${properties.backgroundColor.default};\n      color: ${properties.color.default};\n      padding: ${properties.padding};\n      border: ${properties.border.default};\n      cursor: ${props.$disabled ? \"not-allowed\" : \"pointer\"};\n      ${hasPropertyChain(properties, [\"boxShadow\", \"default\"]) ? `box-shadow: ${properties.boxShadow!.default};` : \"\"}\n\n      &:hover {\n        background-color: ${properties.backgroundColor.hover};\n        color: ${properties.color.hover};\n        border: ${properties.border.hover};\n        ${hasPropertyChain(properties, [\"boxShadow\", \"hover\"]) ? `box-shadow: ${properties.boxShadow!.hover};` : \"\"}\n      }\n      &:active {\n        background-color: ${properties.backgroundColor.active};\n        color: ${properties.color.active};\n        border: ${properties.border.active};\n        ${hasPropertyChain(properties, [\"boxShadow\", \"active\"]) ? `box-shadow: ${properties.boxShadow!.active};` : \"\"}\n        ${\n          hasPropertyChain(properties, [\"filter\", \"active\"])\n            ? `filter: ${properties.filter!.active};`\n            : \"\"\n        }\n      };\n      ${`&:focus-visible {\n          outline-offset: 2px;\n          outline: 2px solid ${props.$colorPalette[props.$color].accentScale[8]};\n        }`}\n    `;\n  }}\n`;\nconst StyledIconButtonIcon = styled.div<{\n  $size: \"small\" | \"medium\" | \"large\";\n}>`\n  width: ${(props) => getSizeProps(props.$size).width};\n  height: ${(props) => getSizeProps(props.$size).height};\n  & svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst propsHandler = (\n  variant: IconButtonStyleProps[\"$variant\"],\n  color: IconButtonStyleProps[\"$color\"],\n  colorPalette: IconButtonStyleProps[\"$colorPalette\"],\n  size: IconButtonStyleProps[\"$size\"],\n  disabled: IconButtonStyleProps[\"$disabled\"]\n) => {\n  return {\n    ...getVariantProps(variant, color, colorPalette, disabled),\n    ...getSizeProps(size),\n  };\n};\nconst getVariantProps = (\n  variant: IconButtonStyleProps[\"$variant\"],\n  color: IconButtonStyleProps[\"$color\"],\n  colorPalette: IconButtonStyleProps[\"$colorPalette\"],\n  disabled: IconButtonStyleProps[\"$disabled\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[8],\n          },\n          color: {\n            default: colorPalette[color].accentContrast,\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[8]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[8],\n          hover: colorPalette[color].accentScale[9],\n          active: colorPalette[color].accentScale[9],\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n          hover: colorPalette[color].accentContrast,\n          active: colorPalette[color].accentContrast,\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[8]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[9]}`,\n          active: `2px solid ${colorPalette[color].accentScale[9]}`,\n        },\n      };\n    case \"outlined\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: \"transparent\",\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[5]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[5]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[6]}`,\n          active: `2px solid ${colorPalette[color].accentScale[7]}`,\n        },\n      };\n    case \"soft\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[2],\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[2]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n          hover: colorPalette[color].accentScale[3],\n          active: colorPalette[color].accentScale[3],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[2]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[3]}`,\n          active: `2px solid ${colorPalette[color].accentScale[3]}`,\n        },\n        filter: {\n          active: \"brightness(0.92) saturate(1.1)\",\n        },\n      };\n    case \"outlined-soft\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[2],\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[5]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n          hover: colorPalette[color].accentScale[3],\n          active: colorPalette[color].accentScale[3],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[5]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[6]}`,\n          active: `2px solid ${colorPalette[color].accentScale[7]}`,\n        },\n      };\n    case \"neumorph\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: \"transparent\",\n          },\n          color: {\n            default: colorPalette[color].grayScale[5],\n          },\n          border: {\n            default: `2px solid transparent`,\n          },\n          boxShadow: {\n            default: `-6px -6px 14px rgba(255, 255, 255, .7),\n              -6px -6px 10px rgba(255, 255, 255, .5),\n              6px 6px 8px rgba(255, 255, 255, .075),\n              6px 6px 10px rgba(0, 0, 0, .15)`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid transparent`,\n          hover: `2px solid transparent`,\n          active: `2px solid transparent`,\n        },\n        boxShadow: {\n          default:\n            colorPalette[color].appearance === \"light\"\n              ? `-6px -6px 14px rgba(255, 255, 255, .7), -6px -6px 10px rgba(255, 255, 255, .5), 6px 6px 8px rgba(255, 255, 255, .075), 6px 6px 10px rgba(0, 0, 0, .15)`\n              : `-6px -6px 14px rgba(255, 255, 255, 0.1), -6px -6px 10px rgba(255, 255, 255, 0.1), 6px 6px 8px rgba(255, 255, 255, 0.05), 6px 6px 10px rgba(0, 0, 0, 0.1)`,\n          hover:\n            colorPalette[color].appearance === \"light\"\n              ? `-2px -2px 6px rgba(255, 255, 255, .6), -2px -2px 4px rgba(255, 255, 255, .4), 2px 2px 2px rgba(255, 255, 255, .05), 2px 2px 4px rgba(0, 0, 0, .1)`\n              : `-2px -2px 14px rgba(255, 255, 255, 0.1),  -2px -2px 4px rgba(255, 255, 255, .1), 2px 2px 2px rgba(255, 255, 255, .01), 2px 2px 4px rgba(0, 0, 0, .1)`,\n          active:\n            colorPalette[color].appearance === \"light\"\n              ? `inset -2px -2px 6px rgba(255, 255, 255, .7), inset -2px -2px 4px rgba(255, 255, 255, .5), inset 2px 2px 2px rgba(255, 255, 255, .075), inset 2px 2px 4px rgba(0, 0, 0, .15)`\n              : `inset -2px -2px 14px rgba(255, 255, 255, 0.1), inset -2px -2px 4px rgba(255, 255, 255, .1), inset 2px 2px 2px rgba(255, 255, 255, .01), inset 2px 2px 4px rgba(0, 0, 0, .1)`,\n        },\n      };\n    case \"neumorph-contained\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[8],\n          },\n          color: {\n            default: colorPalette[color].accentContrast,\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].background}`,\n          },\n          boxShadow: {\n            default: `-6px -6px 14px rgba(255, 255, 255, .7),\n              -6px -6px 10px rgba(255, 255, 255, .5),\n              6px 6px 8px rgba(255, 255, 255, .075),\n              6px 6px 10px rgba(0, 0, 0, .15)`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[8],\n          hover: colorPalette[color].accentScale[9],\n          active: colorPalette[color].accentScale[9],\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n          hover: colorPalette[color].accentContrast,\n          active: colorPalette[color].accentContrast,\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].background}`,\n          hover: `2px solid ${colorPalette[color].background}`,\n          active: `2px solid ${colorPalette[color].background}`,\n        },\n        boxShadow: {\n          default:\n            colorPalette[color].appearance === \"light\"\n              ? `-6px -6px 14px rgba(255, 255, 255, .7), -6px -6px 10px rgba(255, 255, 255, .5), 6px 6px 8px rgba(255, 255, 255, .075), 6px 6px 10px rgba(0, 0, 0, .15)`\n              : `-6px -6px 14px rgba(255, 255, 255, 0.1), -6px -6px 10px rgba(255, 255, 255, 0.1), 6px 6px 8px rgba(255, 255, 255, 0.05), 6px 6px 10px rgba(0, 0, 0, 0.1)`,\n          hover:\n            colorPalette[color].appearance === \"light\"\n              ? `-2px -2px 6px rgba(255, 255, 255, .6), -2px -2px 4px rgba(255, 255, 255, .4), 2px 2px 2px rgba(255, 255, 255, .05), 2px 2px 4px rgba(0, 0, 0, .1)`\n              : `-2px -2px 14px rgba(255, 255, 255, 0.1),  -2px -2px 4px rgba(255, 255, 255, .1), 2px 2px 2px rgba(255, 255, 255, .01), 2px 2px 4px rgba(0, 0, 0, .1)`,\n          active:\n            colorPalette[color].appearance === \"light\"\n              ? `inset -2px -2px 6px rgba(255, 255, 255, .7), inset -2px -2px 4px rgba(255, 255, 255, .5), inset 2px 2px 2px rgba(255, 255, 255, .075), inset 2px 2px 4px rgba(0, 0, 0, .15)`\n              : `inset -2px -2px 14px rgba(255, 255, 255, 0.1), inset -2px -2px 4px rgba(255, 255, 255, .1), inset 2px 2px 2px rgba(255, 255, 255, .01), inset 2px 2px 4px rgba(0, 0, 0, .1)`,\n        },\n      };\n  }\n};\nconst getSizeProps = (size: IconButtonStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return {\n        padding: \"0.5rem 0.5rem\",\n        width: \"1.25rem\",\n        height: \"1.25rem\",\n      };\n    case \"medium\":\n      return {\n        padding: \"0.75rem 0.75rem\",\n        width: \"1.5rem\",\n        height: \"1.5rem\",\n      };\n    case \"large\":\n      return {\n        padding: \"1rem 1rem\",\n        width: \"2rem\",\n        height: \"2rem\",\n      };\n  }\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextProps, TextStyleProps } from \"./Text.types\";\nimport { Helmet } from \"react-helmet\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\ninterface StyledProps {\n  $disableColor?: boolean;\n  $color?: string;\n}\n\nconst Text = ({\n  variant = \"div\",\n  strong,\n  children,\n  align = \"center\",\n  color = colorTokens.default.primary.main,\n  preciseColor,\n  wrap = false,\n  size = \"medium\",\n  disableColor = false,\n  fontSize,\n  lineHeight,\n  style,\n  className,\n  fontFamily,\n  \"data-testid\": dataTestId,\n  ...props\n}: TextProps) => {\n  const theme = useTheme().theme;\n  let _styledProps: StyledProps;\n  if (disableColor) {\n    _styledProps = { $disableColor: disableColor };\n  } else {\n    const colorPalette = getColorPalette(theme, color);\n    const _color = preciseColor ?? colorPalette![color].accentScale[10];\n    _styledProps = { $disableColor: disableColor, $color: _color };\n  }\n\n  const _Text = () => {\n    switch (variant) {\n      case \"h1\":\n        return (\n          <StyledH1\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH1>\n        );\n      case \"h2\":\n        return (\n          <StyledH2\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH2>\n        );\n      case \"h3\":\n        return (\n          <StyledH3\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH3>\n        );\n      case \"h4\":\n        return (\n          <StyledH4\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH4>\n        );\n      case \"h5\":\n        return (\n          <StyledH5\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH5>\n        );\n      case \"h6\":\n        return (\n          <StyledH6\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH6>\n        );\n      case \"div\":\n        return (\n          <StyledDiv\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledDiv>\n        );\n      case \"paragraph\":\n        return (\n          <StyledP\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledP>\n        );\n      case \"label\":\n        return (\n          <StyledLabel\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledLabel>\n        );\n      case \"span\":\n        return (\n          <StyledSpan\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledSpan>\n        );\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link\n          rel=\"preconnect\"\n          href=\"https://fonts.gstatic.com\"\n          crossOrigin=\"\"\n        />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Varela+Round&display=swap\"\n          rel=\"stylesheet\"\n        />\n      </Helmet>\n      {_Text()}\n    </>\n  );\n};\nexport default Text;\n\nconst commonStyles = `\n  padding: 0;\n  margin: 0;\n`;\nconst StyledH1 = styled.h1<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2.25rem\"\n        : \"2rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"4rem\"\n      : props.$size === \"medium\"\n        ? \"3.5rem\"\n        : \"3rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${commonStyles}\n`;\nconst StyledH2 = styled.h2<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"2.25rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3.5rem\"\n      : props.$size === \"medium\"\n        ? \"3rem\"\n        : \"2.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH3 = styled.h3<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3rem\"\n      : props.$size === \"medium\"\n        ? \"2.5rem\"\n        : \"2rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH4 = styled.h4<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH5 = styled.h5<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.5rem\"\n      : props.$size === \"medium\"\n        ? \"1.25rem\"\n        : \"1rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH6 = styled.h6<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledDiv = styled.div<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledLabel = styled.label<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledSpan = styled.span<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledP = styled.p<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\n"],"names":[],"sourceRoot":""}