{"version":3,"file":"stories-components-Tabs-Tabs-mdx.45161571.iframe.bundle.js","mappings":";;;AAkFA;;;;;;;;;ACfA;AACA;AAKA;AAGA;;AAIA;;AAIA;;;AAGA;;;AAGA;AAGA;AAGA;;AAIA;;AAIA;;;AAGA;;;AAGA;;;;;;;;;;;ACnFA;;;ACVA;;;ACAA;AC4PA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA","sources":["webpack://stelios/./src/components/Tab/Tabs.tsx","webpack://stelios/./src/components/Tab/Tab.tsx","webpack://stelios/./src/components/Tab/TabList.tsx","webpack://stelios/./src/components/Tab/TabPanels.tsx","webpack://stelios/./src/components/Tab/TabPanel.tsx","webpack://stelios/./src/components/Text/Text.tsx"],"sourcesContent":["import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { TabsProps } from \"./Tabs.types\";\nimport colorTokens from \"../../tokens/colors.json\";\n\nconst Tabs: React.FC<TabsProps> = ({\n  children,\n  variant = \"contained\",\n  color = colorTokens.default.primary.main,\n  value = \"\",\n  style,\n  className,\n  onChange,\n  ...props\n}) => {\n  const [selectedValue, setSelectedValue] = React.useState<string>(value);\n  // const theme = useTheme().theme;\n  // const colorPalette = getColorPalette(theme, color);\n\n  const _pvtOnClickHandler = (value: string) => {\n    setSelectedValue(value);\n    onChange && onChange(value);\n  };\n\n  const _Children = React.Children.map(children, (child) => {\n    if (!React.isValidElement(child)) return child;\n\n    if ((child.type as any).displayName === \"TabList\") {\n      return React.cloneElement(child as any, {\n        children: React.Children.map(child.props.children, (tab, index) => {\n          if (tab.type.displayName === \"Tab\") {\n            return React.cloneElement(tab, {\n              selected: selectedValue\n                ? tab.props.value === selectedValue\n                : index === 0,\n              pvtOnClick: _pvtOnClickHandler,\n              ...(color && !tab.props.color && { color: color }),\n              ...(variant && !tab.props.variant && { variant: variant }),\n            });\n          }\n          return tab;\n        }),\n        ...(color && !child.props.color && { color: color }),\n        ...(variant && !child.props.variant && { variant: variant }),\n      });\n    }\n\n    if ((child.type as any).displayName === \"TabPanels\") {\n      return React.cloneElement(child as any, {\n        children: React.Children.map(\n          child.props.children,\n          (tabPanel, index) => {\n            if (tabPanel.type.displayName === \"TabPanel\") {\n              return React.cloneElement(tabPanel, {\n                selected: selectedValue\n                  ? tabPanel.props.value === selectedValue\n                  : index === 0,\n                ...(color && !tabPanel.props.color && { color: color }),\n                ...(variant && !tabPanel.props.variant && { variant: variant }),\n              });\n            }\n            return tabPanel;\n          }\n        ),\n        ...(color && child.props.color && { color: color }),\n        ...(variant && child.props.variant && { variant: variant }),\n      });\n    }\n  });\n\n  return (\n    <StyledTabs className={className} style={style} {...props}>\n      {_Children}\n    </StyledTabs>\n  );\n};\nexport default Tabs;\nTabs.displayName = \"Tabs\";\n\nconst StyledTabs = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n","import * as React from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { TabProps, TabPvtProps, TabStyleProps } from \"./Tab.types\";\nimport Text from \"../Text/Text\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\n\nconst Tab: React.FC<TabProps> = ({\n  variant = \"contained\",\n  label,\n  value,\n  selected = false,\n  color = colorTokens.default.primary.main,\n  pvtOnClick,\n}: TabProps & TabPvtProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  const Label = (() => {\n    if (!label) return null;\n    return typeof label === \"string\" ? (\n      <Text\n        disableColor\n        style={{\n          overflow: \"hidden\",\n          width: \"100%\",\n          textWrap: \"nowrap\",\n          textOverflow: \"ellipsis\",\n        }}\n      >\n        {label}\n      </Text>\n    ) : (\n      label\n    );\n  })();\n\n  const _onClickHandler = () => {\n    pvtOnClick && pvtOnClick(value);\n  };\n\n  return (\n    <StyledTab\n      tabIndex={selected ? -1 : 0}\n      $variant={variant}\n      $selected={selected}\n      $colorPalette={colorPalette}\n      $color={color}\n      onClick={_onClickHandler}\n    >\n      {Label}\n    </StyledTab>\n  );\n};\nexport default Tab;\nTab.displayName = \"Tab\";\n\nconst StyledTab = styled.button<TabStyleProps>`\n  display: flex;\n  flex: 1 1 0;\n  overflow: hidden;\n  text-wrap: nowrap;\n  text-overflow: ellipsis;\n  flex-direction: column;\n  padding: 0.5rem 1rem;\n  cursor: pointer;\n  ${(props) => getVariantStyleProps(props)}\n`;\nconst getVariantStyleProps = (props: TabStyleProps) => {\n  switch (props.$variant) {\n    case \"contained\":\n      return css`\n        background-color: ${props.$selected\n          ? props.$colorPalette[props.$color].accentScale[8]\n          : props.$colorPalette[props.$color].accentScale[2]};\n        color: ${props.$selected\n          ? props.$colorPalette[props.$color].accentContrast\n          : props.$colorPalette[props.$color].accentScale[11]};\n        border: 2px solid\n          ${props.$selected\n            ? props.$colorPalette[props.$color].accentScale[8]\n            : props.$colorPalette[props.$color].accentScale[2]};\n        &:hover {\n          background-color: ${props.$selected ? props.$colorPalette[props.$color].accentScale[8] : props.$colorPalette[props.$color].accentScale[3]};\n        }\n        &:focus-visible {\n          outline: ${`2px solid ${props.$colorPalette[props.$color].accentScale[9]}`};\n          outline-offset: -2px;\n        }\n      `;\n    case \"outlined\":\n      return css`\n        background-color: ${props.$selected\n          ? props.$colorPalette[props.$color].accentScale[2]\n          : props.$colorPalette[props.$color].accentScale[1]};\n        color: ${props.$selected\n          ? props.$colorPalette[props.$color].accentScale[10]\n          : props.$colorPalette[props.$color].accentScale[10]};\n        border: 2px solid\n          ${props.$selected\n            ? props.$colorPalette[props.$color].accentScale[7]\n            : \"transparent\"};\n        &:hover {\n          background-color: ${props.$colorPalette[props.$color].accentScale[2]};\n        }\n        &:focus-visible {\n          background-color: ${props.$colorPalette[props.$color].accentScale[2]};\n          outline: 0;\n        }\n      `;\n  }\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\n\nimport { TabListProps } from './TabList.types';\n\nconst TabList: React.FC<TabListProps> = ({children, width = \"400px\"}) => {\n\n  return (\n    <StyledTabList style={{width: width}}>\n      {children}\n    </StyledTabList>\n  )\n};\nexport default TabList;\nTabList.displayName = \"TabList\";\n\nconst StyledTabList = styled.div`\n  display: flex;\n  flex-direction: row;\n\n  & > :first-child {\n    border-radius: 8px 0 0 8px;\n  }\n\n  & > :last-child {\n    border-radius: 0 8px 8px 0;\n  }\n`;","import * as React from 'react';\nimport styled from 'styled-components';\nimport { TabPanelsProps } from './TabPanels.types';\n\nconst TabPanels: React.FC<TabPanelsProps> = ({children}) => {\n  return (\n    <StyledTabPanels>\n      {children}\n    </StyledTabPanels>\n  )\n}\nexport default TabPanels;\nTabPanels.displayName = \"TabPanels\";\n\nconst StyledTabPanels = styled.div`\n  display: flex;\n  flex-direction: column;\n`;","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { TabPanelProps } from \"./TabPanel.types\";\n\nconst TabPanel: React.FC<TabPanelProps> = ({\n  children,\n  selected = false,\n}: TabPanelProps) => {\n  if(!selected) return null;\n  return <StyledTabPanel>{children}</StyledTabPanel>;\n};\nexport default TabPanel;\nTabPanel.displayName = \"TabPanel\";\n\nconst StyledTabPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextProps, TextStyleProps } from \"./Text.types\";\nimport { Helmet } from \"react-helmet\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\ninterface StyledProps {\n  $disableColor?: boolean;\n  $color?: string;\n}\n\nconst Text = ({\n  variant = \"div\",\n  strong,\n  children,\n  align = \"center\",\n  color = colorTokens.default.primary.main,\n  preciseColor,\n  wrap = false,\n  size = \"medium\",\n  disableColor = false,\n  fontSize,\n  lineHeight,\n  style,\n  className,\n  fontFamily,\n  \"data-testid\": dataTestId,\n  ...props\n}: TextProps) => {\n  const theme = useTheme().theme;\n  let _styledProps: StyledProps;\n  if (disableColor) {\n    _styledProps = { $disableColor: disableColor };\n  } else {\n    const colorPalette = getColorPalette(theme, color);\n    const _color = preciseColor ?? colorPalette![color].accentScale[10];\n    _styledProps = { $disableColor: disableColor, $color: _color };\n  }\n\n  const _Text = () => {\n    switch (variant) {\n      case \"h1\":\n        return (\n          <StyledH1\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH1>\n        );\n      case \"h2\":\n        return (\n          <StyledH2\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH2>\n        );\n      case \"h3\":\n        return (\n          <StyledH3\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH3>\n        );\n      case \"h4\":\n        return (\n          <StyledH4\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH4>\n        );\n      case \"h5\":\n        return (\n          <StyledH5\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH5>\n        );\n      case \"h6\":\n        return (\n          <StyledH6\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH6>\n        );\n      case \"div\":\n        return (\n          <StyledDiv\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledDiv>\n        );\n      case \"paragraph\":\n        return (\n          <StyledP\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledP>\n        );\n      case \"label\":\n        return (\n          <StyledLabel\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledLabel>\n        );\n      case \"span\":\n        return (\n          <StyledSpan\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledSpan>\n        );\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link\n          rel=\"preconnect\"\n          href=\"https://fonts.gstatic.com\"\n          crossOrigin=\"\"\n        />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Alegreya:wght@400;700&family=Varela+Round&display=swap\"\n          rel=\"stylesheet\"\n        />\n      </Helmet>\n      {_Text()}\n    </>\n  );\n};\nexport default Text;\n\nconst commonStyles = `\n  padding: 0;\n  margin: 0;\n`;\nconst StyledH1 = styled.h1<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2.25rem\"\n        : \"2rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"4rem\"\n      : props.$size === \"medium\"\n        ? \"3.5rem\"\n        : \"3rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${commonStyles}\n`;\nconst StyledH2 = styled.h2<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"2.25rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3.5rem\"\n      : props.$size === \"medium\"\n        ? \"3rem\"\n        : \"2.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH3 = styled.h3<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3rem\"\n      : props.$size === \"medium\"\n        ? \"2.5rem\"\n        : \"2rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH4 = styled.h4<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH5 = styled.h5<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.5rem\"\n      : props.$size === \"medium\"\n        ? \"1.25rem\"\n        : \"1rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH6 = styled.h6<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledDiv = styled.div<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledLabel = styled.label<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledSpan = styled.span<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledP = styled.p<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\n"],"names":[],"sourceRoot":""}