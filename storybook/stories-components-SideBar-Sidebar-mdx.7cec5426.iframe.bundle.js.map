{"version":3,"file":"stories-components-SideBar-Sidebar-mdx.7cec5426.iframe.bundle.js","mappings":";;;;;;AA4DA;AAIA;;ACRA;AAEA;;;;AAIA;;;AAIA;;;;AAIA;;;;;;;AC1BA;AACA;AACA;AACA;;;;;;ACqBA;;;;AAKA;AACA;;;AC5DA;ACqPA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA","sources":["webpack://stelios/./src/components/SideBar/SideBarItem/SideBarItem.tsx","webpack://stelios/./src/components/Link/Link.tsx","webpack://stelios/./src/components/SideBar/SideBar.tsx","webpack://stelios/./src/components/SideBar/SideBarGroup/SideBarGroup.tsx","webpack://stelios/./src/components/SideBar/SideBarGroupItem/SideBarGroupItem.tsx","webpack://stelios/./src/components/Text/Text.tsx"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { SideBarItemProps, SideBarItemStyleProps } from \"./SideBarItem.types\";\nimport Link from \"../../Link/Link\";\nimport { useTheme } from \"../../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../../helpers/helpers\";\nimport colorTokens from \"../../../tokens/colors.json\";\n\nconst SideBarItem = ({\n  children,\n  className,\n  style,\n  size,\n  selected,\n  color = colorTokens.default.primary.main,\n  //Events\n  onClick,\n  \"data-testid\": dataTestId,\n  ...props\n}: SideBarItemProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  return (\n    <StyledSideBarItem\n      $colorPalette={colorPalette}\n      $color={color}\n      onClick={onClick}\n      $selected={selected}\n      className={className}\n      style={style}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {typeof children === \"string\" ? (\n        <Link\n          tabIndex={onClick ? 0 : undefined}\n          color={color}\n          size={size}\n          variant=\"hover\"\n          className={className}\n          style={style}\n          onClick={onClick}\n        >\n          {children}\n        </Link>\n      ) : (\n        children\n      )}\n    </StyledSideBarItem>\n  );\n};\nexport default SideBarItem;\n\nconst StyledSideBarItem = styled.div<SideBarItemStyleProps>`\n  display: flex;\n  flex-direction: column;\n  padding: 0.5rem 0.5rem 0.25rem 1rem;\n  width: fit-content;\n  positon: relative;\n  color: ${(props) =>\n    props.$selected\n      ? props.$colorPalette[props.$color].accentScale[11]\n      : props.$colorPalette[props.$color].grayScale[11]};\n`;","import React from \"react\";\nimport { LinkProps, LinkStyleProps } from \"./Link.types\";\nimport Text from \"../Text/Text\";\nimport styled from \"styled-components\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\nconst Link = ({\n  href,\n  children,\n  variant = \"default\",\n  size = \"medium\",\n  className,\n  target,\n  style,\n  color = colorTokens.default.primary.main,\n  preciseColor,\n  tabIndex,\n  onClick,\n  \"data-testid\": dataTestId,\n}: LinkProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n  const _color =\n    preciseColor ?? colorPalette![color].accentScale[10];\n\n  const LinkText = () => {\n    return typeof children === \"string\" ? (\n      <Text disableColor size={size} variant=\"span\">\n        {children}\n      </Text>\n    ) : (\n      children\n    );\n  };\n  return (\n    <StyledLink\n      tabIndex={tabIndex}\n      $color={_color}\n      $variant={variant}\n      target={target}\n      href={href}\n      className={className}\n      style={style}\n      onClick={onClick}\n      data-testid={dataTestId}\n    >\n      {LinkText()}\n    </StyledLink>\n  );\n};\nexport default Link;\n\nconst StyledLink = styled.a<LinkStyleProps>`\n  width: fit-content;\n  text-decoration: ${(props) =>\n    props.$variant === \"underline\" ? \"underline\" : \"none\"};\n  color: ${(props) => props.$color};\n  cursor: pointer;\n  display: inline-block;\n  &:hover {\n    text-decoration: ${(props) =>\n      props.$variant === \"default\" ? \"none\" : \"underline\"};\n  }\n  &:focus-visible {\n    outline: 1px solid ${(props) => props.$color};\n    outline-offset: 2px;\n    border-radius: 0.25rem;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { SideBarProps, SideBarStyleProps } from \"./SideBar.types\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\nconst SideBar = ({\n  children,\n  className,\n  style,\n  top = \"0\",\n  right = \"0\",\n  color = colorTokens.default.primary.main,\n  \"data-testid\": dataTestId,\n  ...props\n}: SideBarProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n  return (\n    <StyledSideBar\n      $colorPalette={colorPalette}\n      $color={color}\n      className={className}\n      style={style}\n      $top={top}\n      $right={right}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {children}\n    </StyledSideBar>\n  );\n};\n\nexport default SideBar;\n\nconst StyledSideBar = styled.div<SideBarStyleProps>`\n  display: flex;\n  flex-direction: column;\n  position: fixed;\n  width: 10rem;\n  height: 100vh;\n  overflow: scroll;\n  right: ${(props) => props.$right};\n  top: ${(props) => props.$top};\n  color: ${(props) => props.$colorPalette[props.$color].grayScale[11]};\n`;\n","import React from \"react\";\nimport {\n  SideBarGroupProps,\n  SideBarGroupStyleProps,\n} from \"./SideBarGroup.types\";\nimport styled from \"styled-components\";\nimport Text from \"../../Text/Text\";\nimport Link from \"../../Link/Link\";\nimport { useTheme } from \"../../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../../helpers/helpers\";\nimport colorTokens from \"../../../tokens/colors.json\";\n\nconst SideBarGroup = ({\n  children,\n  className,\n  style,\n  title,\n  leadingIcon,\n  trailingIcon,\n  size,\n  selected,\n  color = colorTokens.default.primary.main,\n  // Events\n  onClick,\n  \"data-testid\": dataTestId,\n  ...props\n}: SideBarGroupProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  return (\n    <StyledSideBarGroup\n      className={className}\n      style={style}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {(title || leadingIcon || trailingIcon) && (\n        <StyledSideBarGroupHeader $colorPalette={colorPalette} $color={color}>\n          {leadingIcon && <span>{leadingIcon}</span>}\n          {title && typeof title === \"string\" ? (\n            onClick ? (\n              <Link size={size} variant=\"hover\" color={color} onClick={onClick}>\n                {title}\n              </Link>\n            ) : (\n              <Text color={color} size={size} variant=\"span\">\n                {title}\n              </Text>\n            )\n          ) : (\n            title\n          )}\n          {trailingIcon && <span>{trailingIcon}</span>}\n        </StyledSideBarGroupHeader>\n      )}\n      {children}\n    </StyledSideBarGroup>\n  );\n};\nexport default SideBarGroup;\n\nconst StyledSideBarGroup = styled.ul`\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  margin: 0;\n  list-style-type: none;\n`;\nconst StyledSideBarGroupHeader = styled.li<SideBarGroupStyleProps>`\n  display: flex;\n  flex-direction: row;\n  padding: 0.5rem 0.5rem 0.25rem 1rem;\n  color: ${(props) => props.$colorPalette[props.$color].grayScale[11]};\n`;\n","import React from \"react\";\nimport {\n  SideBarGroupItemProps,\n  SideBarGroupItemStyleProps,\n} from \"./SideBarGroupItem.types\";\nimport styled from \"styled-components\";\nimport Link from \"../../Link/Link\";\nimport { useTheme } from \"../../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../../helpers/helpers\";\nimport colorTokens from \"../../../tokens/colors.json\";\n\nconst StyledSideBarGroupItem = styled.div<SideBarGroupItemStyleProps>`\n  display: flex;\n  padding: 0.25rem 0.5rem 0.25rem 1.75rem;\n`;\n\nconst SideBarGroupItem = ({\n  children,\n  className,\n  style,\n  size,\n  selected,\n  color = colorTokens.default.primary.main,\n  // Events\n  onClick,\n  \"data-testid\": dataTestId,\n  ...props\n}: SideBarGroupItemProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  return (\n    <StyledSideBarGroupItem\n      $colorPalette={colorPalette}\n      $color={color}\n      className={className}\n      style={style}\n      onClick={onClick}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {typeof children === \"string\" ? (\n        <Link\n          tabIndex={onClick ? 0 : undefined}\n          size={size}\n          variant=\"hover\"\n          color={color}\n          className={className}\n          style={style}\n          onClick={onClick}\n        >\n          {children}\n        </Link>\n      ) : (\n        children\n      )}\n    </StyledSideBarGroupItem>\n  );\n};\n\nexport default SideBarGroupItem;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextProps, TextStyleProps } from \"./Text.types\";\nimport { Helmet } from \"react-helmet\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\ninterface StyledProps {\n  $disableColor?: boolean;\n  $color?: string;\n}\n\nconst Text = ({\n  variant = \"div\",\n  strong,\n  children,\n  align = \"center\",\n  color = colorTokens.default.primary.main,\n  preciseColor,\n  wrap = false,\n  size = \"medium\",\n  disableColor = false,\n  fontSize,\n  lineHeight,\n  style,\n  className,\n  fontFamily,\n  \"data-testid\": dataTestId,\n  ...props\n}: TextProps) => {\n  const theme = useTheme().theme;\n  let _styledProps: StyledProps;\n  if (disableColor) {\n    _styledProps = { $disableColor: disableColor };\n  } else {\n    const colorPalette = getColorPalette(theme, color);\n    const _color = preciseColor ?? colorPalette![color].accentScale[10];\n    _styledProps = { $disableColor: disableColor, $color: _color };\n  }\n\n  const _Text = () => {\n    switch (variant) {\n      case \"h1\":\n        return (\n          <StyledH1\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH1>\n        );\n      case \"h2\":\n        return (\n          <StyledH2\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH2>\n        );\n      case \"h3\":\n        return (\n          <StyledH3\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH3>\n        );\n      case \"h4\":\n        return (\n          <StyledH4\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH4>\n        );\n      case \"h5\":\n        return (\n          <StyledH5\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH5>\n        );\n      case \"h6\":\n        return (\n          <StyledH6\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH6>\n        );\n      case \"div\":\n        return (\n          <StyledDiv\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledDiv>\n        );\n      case \"paragraph\":\n        return (\n          <StyledP\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledP>\n        );\n      case \"label\":\n        return (\n          <StyledLabel\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledLabel>\n        );\n      case \"span\":\n        return (\n          <StyledSpan\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledSpan>\n        );\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link\n          rel=\"preconnect\"\n          href=\"https://fonts.gstatic.com\"\n          crossOrigin=\"\"\n        />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Varela+Round&display=swap\"\n          rel=\"stylesheet\"\n        />\n      </Helmet>\n      {_Text()}\n    </>\n  );\n};\nexport default Text;\n\nconst commonStyles = `\n  padding: 0;\n  margin: 0;\n`;\nconst StyledH1 = styled.h1<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2.25rem\"\n        : \"2rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"4rem\"\n      : props.$size === \"medium\"\n        ? \"3.5rem\"\n        : \"3rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${commonStyles}\n`;\nconst StyledH2 = styled.h2<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"2.25rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3.5rem\"\n      : props.$size === \"medium\"\n        ? \"3rem\"\n        : \"2.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH3 = styled.h3<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3rem\"\n      : props.$size === \"medium\"\n        ? \"2.5rem\"\n        : \"2rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH4 = styled.h4<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH5 = styled.h5<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.5rem\"\n      : props.$size === \"medium\"\n        ? \"1.25rem\"\n        : \"1rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH6 = styled.h6<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledDiv = styled.div<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledLabel = styled.label<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledSpan = styled.span<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledP = styled.p<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\n"],"names":[],"sourceRoot":""}