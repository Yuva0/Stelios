{"version":3,"file":"stories-components-Collapsible-Collapsible-mdx.f677bcd4.iframe.bundle.js","mappings":";;;;AAyEA;;AAEA;AAEA;;;;;;;;AAUA;AACA;;;;;;;AAQA;;AAIA;AAYA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEA;;AAMA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;;;AAGA;;AAEA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEA;;AAOA;;AAEA;AACA;;AAGA;;AAEA;;AAEA;;;AAGA;;AAEA;AC4EA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA","sources":["webpack://stelios/./src/components/Collapsible/Collapsible.tsx","webpack://stelios/./src/components/Text/Text.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { CollapsibleProps, CollapsibleStyleProps } from \"./Collapsible.types\";\nimport styled, { css } from \"styled-components\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colors from \"../../tokens/colors.json\";\nimport Text from \"../Text/Text\";\nimport { IconChevronDown, IconChevronUp } from \"@tabler/icons-react\";\n\nconst Collapsible: React.FC<CollapsibleProps> = ({\n  variant = \"contained\",\n  title,\n  children,\n  open = false,\n  color = colors.default.primary.main,\n  width = \"auto\",\n  onToggle,\n  ...props\n}) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  const [_isOpen, setIsOpen] = React.useState(open);\n\n  const handleToggle = () => {\n    setIsOpen((prev) => !prev);\n    onToggle && onToggle(!_isOpen);\n  };\n\n  const _ChildrenEle = (() => {\n    if(!_isOpen) return null;\n    return (\n      typeof children === \"string\" ? \n      (<StyledChildren $variant={variant} $colorPalette={colorPalette} $color={color}>\n        <Text disableColor variant=\"paragraph\">{children}</Text>\n      </StyledChildren>) : children\n    )\n  })();\n\n  return (\n    <StyledCollapsibleCtr\n      $variant={variant}\n      $colorPalette={colorPalette}\n      $color={color}\n      $width={width}\n      $open={_isOpen}\n      {...props}\n    >\n      <StyledCollapsibleTitle\n        $variant={variant}\n        $colorPalette={colorPalette}\n        $color={color}\n        onClick={handleToggle}\n      >\n        {typeof title === \"string\" ? (\n          <Text disableColor variant=\"paragraph\">\n            {title}\n          </Text>\n        ) : (\n          title\n        )}\n        <StyledIcon>\n          {_isOpen ? <IconChevronUp /> : <IconChevronDown />}\n        </StyledIcon>\n      </StyledCollapsibleTitle>\n      {_ChildrenEle}\n    </StyledCollapsibleCtr>\n  );\n};\n\nconst StyledCollapsibleCtr = styled.div<CollapsibleStyleProps>`\n  display: flex;\n  flex-direction: column;\n  width: ${(props) => props.$width};\n  border-radius: 1rem;\n  ${(props) =>\n    variantStylesHandler(props.$variant, props.$colorPalette, props.$color, props.$open)?.container}\n`;\n\nconst StyledCollapsibleTitle = styled.div<CollapsibleStyleProps>`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n  border-radius: 1rem;\n  cursor: pointer;\n  ${props => variantStylesHandler(props.$variant, props.$colorPalette, props.$color, props.$open)?.title}\n`;\nconst StyledIcon = styled.span`\n  width: 1.25rem;\n  height: 1.25rem;\n  & svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst StyledChildren = styled.div<CollapsibleStyleProps>`\n  padding: 1rem;\n`;\n\nconst variantStylesHandler = (\n  $variant: CollapsibleStyleProps[\"$variant\"],\n  $colorPalette: CollapsibleStyleProps[\"$colorPalette\"],\n  $color: CollapsibleStyleProps[\"$color\"],\n  $open: CollapsibleStyleProps[\"$open\"]\n) => {\n  switch ($variant) {\n    case \"contained\":\n      return {\n        container: css`\n          background-color: ${$colorPalette[$color].accentScale[8]};\n          color: ${$colorPalette[$color].accentContrast};\n          border: 2px solid ${$colorPalette[$color].accentScale[8]};\n          border-bottom: ${$open ? `2px solid ${$colorPalette[$color].accentScale[8]}` : \"none\"};\n        `,\n        title: css`\n          background-color: ${$colorPalette[$color].accentScale[8]};\n          color: ${$colorPalette[$color].accentContrast};\n          border: 2px solid ${$colorPalette[$color].accentScale[8]};\n          border-bottom: 2px solid ${$colorPalette[$color].accentScale[11]};\n          &:hover{\n            background-color: ${$colorPalette[$color].accentScale[9]};\n          }\n          &:active{\n            background-color: ${$colorPalette[$color].accentScale[9]};\n          }\n        `,\n      }\n    case \"outlined\": {\n      return {\n        container: css`\n          background-color: transparent;\n          color: ${$colorPalette[$color].accentScale[10]};\n          border: 2px solid ${$colorPalette[$color].accentScale[10]};\n          border-bottom: ${$open ? `2px solid ${$colorPalette[$color].accentScale[10]}` : \"none\"};\n        `,\n        title: css`\n          background-color: transparent;\n          color: ${$colorPalette[$color].accentScale[10]};\n          border: 2px solid transparent;\n          border-bottom: 2px solid ${$colorPalette[$color].accentScale[10]};\n          &:hover{\n            background-color: ${$colorPalette[$color].grayScale[0]};\n          }\n          &:active{\n            background-color: ${$colorPalette[$color].grayScale[1]};\n          }\n        `,\n      }\n    }\n    case \"soft\": {\n      return {\n        container: css`\n          background-color: ${$colorPalette[$color].accentScale[3]};\n          color: ${$colorPalette[$color].accentScale[11]};\n          border: 2px solid ${$colorPalette[$color].accentScale[3]};\n          border-bottom: ${$open ? `2px solid ${$colorPalette[$color].accentScale[3]}` : \"none\"};\n        `,\n        title: css`\n          background-color: ${$colorPalette[$color].accentScale[3]};\n          color: ${$colorPalette[$color].accentScale[11]};\n          border: 2px solid ${$colorPalette[$color].accentScale[3]};\n          border-bottom: 2px solid ${$colorPalette[$color].accentScale[6]};\n          &:hover{\n            background-color: ${$colorPalette[$color].accentScale[4]};\n          }\n          &:active{\n            background-color: ${$colorPalette[$color].accentScale[4]};\n          }\n        `,\n      }\n    }\n    case \"transparent\": {\n      return {\n        container: css`\n          background-color: transparent;\n          color: ${$colorPalette[$color].accentScale[10]};\n          border: 2px solid transparent;\n          border-bottom: ${$open ? `2px solid transparent` : \"none\"};\n        `,\n        title: css`\n          background-color: transparent;\n          color: ${$colorPalette[$color].accentScale[10]};\n          border: 2px solid transparent;\n          border-bottom: 2px solid ${$colorPalette[$color].accentScale[6]};\n          &:hover{\n            background-color: ${$colorPalette[$color].grayScale[0]};\n          }\n          &:active{\n            background-color: ${$colorPalette[$color].grayScale[1]};\n          }\n        `\n      }\n    }\n  }\n};\n\nexport default Collapsible;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextProps, TextStyleProps } from \"./Text.types\";\nimport { Helmet } from \"react-helmet\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\ninterface StyledProps {\n  $disableColor?: boolean;\n  $color?: string;\n}\n\nconst Text = ({\n  variant = \"div\",\n  strong,\n  children,\n  align = \"center\",\n  color = colorTokens.default.primary.main,\n  preciseColor,\n  wrap = false,\n  size = \"medium\",\n  disableColor = false,\n  fontSize,\n  lineHeight,\n  style,\n  className,\n  fontFamily,\n  \"data-testid\": dataTestId,\n  ...props\n}: TextProps) => {\n  const theme = useTheme().theme;\n  let _styledProps: StyledProps;\n  if (disableColor) {\n    _styledProps = { $disableColor: disableColor };\n  } else {\n    const colorPalette = getColorPalette(theme, color);\n    const _color = preciseColor ?? colorPalette![color].accentScale[10];\n    _styledProps = { $disableColor: disableColor, $color: _color };\n  }\n\n  const _Text = () => {\n    switch (variant) {\n      case \"h1\":\n        return (\n          <StyledH1\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH1>\n        );\n      case \"h2\":\n        return (\n          <StyledH2\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH2>\n        );\n      case \"h3\":\n        return (\n          <StyledH3\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH3>\n        );\n      case \"h4\":\n        return (\n          <StyledH4\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH4>\n        );\n      case \"h5\":\n        return (\n          <StyledH5\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH5>\n        );\n      case \"h6\":\n        return (\n          <StyledH6\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH6>\n        );\n      case \"div\":\n        return (\n          <StyledDiv\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledDiv>\n        );\n      case \"paragraph\":\n        return (\n          <StyledP\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledP>\n        );\n      case \"label\":\n        return (\n          <StyledLabel\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledLabel>\n        );\n      case \"span\":\n        return (\n          <StyledSpan\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledSpan>\n        );\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link\n          rel=\"preconnect\"\n          href=\"https://fonts.gstatic.com\"\n          crossOrigin=\"\"\n        />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Alegreya:wght@400;700&family=Varela+Round&display=swap\"\n          rel=\"stylesheet\"\n        />\n      </Helmet>\n      {_Text()}\n    </>\n  );\n};\nexport default Text;\n\nconst commonStyles = `\n  padding: 0;\n  margin: 0;\n`;\nconst StyledH1 = styled.h1<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2.25rem\"\n        : \"2rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"4rem\"\n      : props.$size === \"medium\"\n        ? \"3.5rem\"\n        : \"3rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${commonStyles}\n`;\nconst StyledH2 = styled.h2<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"2.25rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3.5rem\"\n      : props.$size === \"medium\"\n        ? \"3rem\"\n        : \"2.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH3 = styled.h3<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3rem\"\n      : props.$size === \"medium\"\n        ? \"2.5rem\"\n        : \"2rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH4 = styled.h4<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH5 = styled.h5<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.5rem\"\n      : props.$size === \"medium\"\n        ? \"1.25rem\"\n        : \"1rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH6 = styled.h6<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledDiv = styled.div<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledLabel = styled.label<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledSpan = styled.span<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledP = styled.p<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\n"],"names":[],"sourceRoot":""}