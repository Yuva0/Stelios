{"version":3,"file":"7748.9053c4dd.iframe.bundle.js","mappings":";;;;;;;;;AAqBA;AAEA;AACA;;;;;;ACmEA;;;;;;;;;;;AAYA;;;AAGA;;;AAGA;;AAEA;;;;;AAMA;;;;;AAKA;AACA;;AAGA;;;;;;;;;;;;AAYA;;;;;;;;;;ACrDA;AAIA;;AAKA;;;AAMA;;;AAMA;;;;;;;;AAQA;;;;AAKA;;AAGA;;;;;;;;ACrEA;;;;;;;;;AASA;;;;;;;;AAQA;;;;AAIA;;;;;;;;;ACYA;AAIA;;AAKA;;;AAMA;;;AAMA;;AAEA;;AAGA","sources":["webpack://stelios/./src/components/NavigationBar/NavigationBar.tsx","webpack://stelios/./src/components/NavigationBar/NavigationBarGroup/NavigationBarGroup.tsx","webpack://stelios/./src/components/NavigationBar/NavigationBarGroupItem/NavigationBarGroupItem.tsx","webpack://stelios/./src/components/NavigationBar/NavigationBarHeader/NavigationBarHeader.tsx","webpack://stelios/./src/components/NavigationBar/NavigationBarItem/NavigationBarItem.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  NavigationBarProps,\n  NavigationBarStyleProps,\n} from \"./NavigationBar.types\";\nimport styled from \"styled-components\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { NavigationBarGroupProps } from \"./NavigationBarGroup/NavigationBarGroup.types\";\nimport { NavigationBarGroupItemProps } from \"./NavigationBarGroupItem/NavigationBarGroupItem.types\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\nconst StyledNavigationBarCtr = styled.div<NavigationBarStyleProps>`\n  display: flex;\n  flex-direction: column;\n  position: sticky;\n  left: 0;\n  top: 0;\n  height: 100vh;\n  width: 15rem;\n  overflow: scroll;\n  border-right: ${(props) =>\n    `1px solid ${props.$colorPalette[props.$color].grayScale[5]}`};\n  background-color: ${(props) => props.$colorPalette[props.$color].grayScale[0]};\n`;\n\nconst NavigationBar: React.FC<NavigationBarProps> = ({\n  children,\n  className,\n  style,\n  color = colorTokens.default.primary.main,\n  // Events\n  onChange,\n  \"data-testid\": dataTestId,\n  ...props\n}) => {\n  const [selectedIndex, setSelectedIndex] = React.useState<\n    number | undefined\n  >();\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  const childrenList = Array.isArray(children) ? children : [children];\n\n  const _handleSelectedIndex = (index?: number, value?: string) => {\n    if (!index || !value) return;\n    if (index === selectedIndex) return;\n    setSelectedIndex(index);\n    onChange && onChange(value);\n  };\n\n  let index = 0;\n\n  const ChildrenEle = React.Children.map(childrenList, (child) => {\n    if (!React.isValidElement(child) || !child.type) return child;\n    if (typeof child.type === \"string\") return child;\n\n    if ((child.type as any).displayName === \"NavigationBarItem\") {\n      index++;\n      return React.cloneElement(child, {\n        _index: index,\n        selected: selectedIndex\n          ? selectedIndex === index\n          : child.props.selected,\n        _getSelectedIndex: _handleSelectedIndex,\n      } as Partial<NavigationBarGroupProps>);\n    }\n\n    if ((child.type as any).displayName === \"NavigationBarGroup\") {\n      return React.cloneElement(child, {\n        children: React.Children.map(\n          child.props.children,\n          (child: NavigationBarGroupItemProps) => {\n            if (!React.isValidElement(child)) return child;\n            index++;\n            return React.cloneElement(child, {\n              _index: index,\n              _getSelectedIndex: _handleSelectedIndex,\n              // todo\n              selected: selectedIndex\n                ? selectedIndex === index\n                : (child.props as any).selected,\n            } as Partial<NavigationBarGroupItemProps>);\n          }\n        ),\n      } as Partial<NavigationBarGroupProps>);\n    }\n\n    return child;\n  });\n\n  return (\n    <StyledNavigationBarCtr\n      $color={color}\n      $colorPalette={colorPalette}\n      className={className}\n      style={style}\n      data-testid={dataTestId}\n      {...props}\n    >\n      <nav>{ChildrenEle}</nav>\n    </StyledNavigationBarCtr>\n  );\n};\nNavigationBar.displayName = \"NavigationBar\";\n\nexport default NavigationBar;\n","import React, { useState } from \"react\";\nimport {\n  NavigationBarGroupProps,\n  NavigationBarGroupStyleProps,\n} from \"./NavigationBarGroup.types\";\nimport Text from \"../../Text/Text\";\nimport styled from \"styled-components\";\nimport { IconChevronRight } from \"@tabler/icons-react\";\nimport { useTheme } from \"../../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../../helpers/helpers\";\nimport colorTokens from \"../../../tokens/colors.json\";\n\nconst NavigationBarGroup = ({\n  leadingIcon,\n  children,\n  title,\n  expanded,\n  className,\n  color = colorTokens.default.primary.main,\n  onClick\n}: NavigationBarGroupProps) => {\n  const navigationBarGrpItmContnrRef = React.useRef(null);\n  const [expand, setExpand] = useState(expanded ?? false);\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  const _toggleExpand = (e: React.MouseEvent | React.KeyboardEvent) => {\n    setExpand((expand) => !expand);\n    onClick && onClick(e);\n  };\n  const _handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" || e.key === \" \") {\n      _toggleExpand(e);\n      onClick && onClick(e);\n    }\n  };\n\n  return (\n    <StyledNavBarGroup className={className}>\n      <StyledNavBarGroupHeader\n        tabIndex={0}\n        $color={color}\n        $colorPalette={colorPalette}\n        onClick={_toggleExpand}\n        onKeyDown={_handleKeyDown}\n      >\n        <span>\n          {leadingIcon && (\n            <StyledNavBarGroupIcon $colorPalette={colorPalette} $color={color}>\n              {leadingIcon}\n            </StyledNavBarGroupIcon>\n          )}\n          {title && typeof title === \"string\" ? (\n            <Text color={color} variant=\"span\">{title}</Text>\n          ) : (\n            title\n          )}\n        </span>\n        {\n          <StyledNavBarGroupIcon $colorPalette={colorPalette} $color={color} $expand={expand}>\n            <IconChevronRight />\n          </StyledNavBarGroupIcon>\n        }\n      </StyledNavBarGroupHeader>\n      {\n        <StyledNavBarGroupItemContainer\n          ref={navigationBarGrpItmContnrRef}\n          $colorPalette={colorPalette}\n          $color={color}\n          $expand={expand}\n        >\n          {React.Children.map(children, (child, index) => \n            child && React.cloneElement(child as React.ReactElement, {\n              tabIndex: expand ? 0 : -1,\n              key: index,\n            } as Partial<NavigationBarGroupProps>)\n          )}\n        </StyledNavBarGroupItemContainer>\n      }\n    </StyledNavBarGroup>\n  );\n};\nNavigationBarGroup.displayName = \"NavigationBarGroup\";\nexport default NavigationBarGroup;\n\nconst StyledNavBarGroup = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 0.15rem;\n  margin: 0.25rem 0 0 0;\n  padding: 0;\n`;\nconst StyledNavBarGroupHeader = styled.li<NavigationBarGroupStyleProps>`\n  display: flex;\n  flex-direction: row;\n  gap: 0.5rem;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.3rem 0.75rem;\n  border-radius: 0.5rem;\n  margin: 0 0.5rem;\n  cursor: pointer;\n  &:hover {\n    background-color: ${(props) => props.$colorPalette[props.$color].grayScale[1]};\n  }\n  &:active {\n    background-color: ${(props) => props.$colorPalette[props.$color].grayScale[2]};\n  }\n  &:focus-visible {\n    outline: 1px solid ${(props) => props.$colorPalette[props.$color].accentScale[6]};\n  }\n`;\nconst StyledNavBarGroupIcon = styled.span<NavigationBarGroupStyleProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transition: rotate 0.15s ease-in-out;\n  rotate: ${(props) => (props.$expand ? \"90deg\" : \"\")};\n  svg {\n    width: 1rem;\n    height: 1rem;\n  }\n  color: ${(props) => props.$colorPalette[props.$color].grayScale[11]};\n`;\nconst StyledNavBarGroupItemContainer = styled.ul<NavigationBarGroupStyleProps>`\n  height: auto;\n  max-height: ${(props) => (props.$expand ? \"100vh\" : \"0\")};\n  overflow: hidden;\n  transition: max-height 0.3s ease-in-out;\n  gap: 0.25rem;\n  padding: 0;\n\n  li:first-child {\n    margin-top: 0.1rem;\n  }\n  li:last-child {\n    margin-bottom: 0.1rem;\n  }\n`;","import React from \"react\";\nimport {\n  NavigationBarGroupItemProps,\n  NavigationBarGroupItemStyleProps,\n} from \"./NavigationBarGroupItem.types\";\nimport styled from \"styled-components\";\nimport Text from \"../../Text/Text\";\nimport colorTokens from \"../../../tokens/colors.json\";\nimport { useTheme } from \"../../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../../helpers/helpers\";\n\nconst NavigationBarGroupItem = ({\n  _index,\n  value,\n  children,\n  leadingIcon,\n  trailingIcon,\n  className,\n  style,\n  size,\n  selected,\n  tabIndex = 0,\n  color = colorTokens.default.primary.main,\n  // Events\n  _getSelectedIndex,\n  onClick,\n}: NavigationBarGroupItemProps) => {\n  const [_selected, setSelected] = React.useState(selected);\n\n  React.useEffect(() => {\n    setSelected(selected);\n  }, [selected]);\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  const _onClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    setSelected(true);\n    _getSelectedIndex && _getSelectedIndex(_index, value);\n    onClick && onClick(e);\n  };\n  const _handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" || e.key === \" \") {\n      _onClick(e);\n    }\n  };\n\n  return (\n    <StyledNavBarGroupItem\n      tabIndex={tabIndex}\n      $selected={_selected}\n      $colorPalette={colorPalette}\n      $color={color}\n      className={className}\n      style={style}\n      onClick={_onClick}\n      onKeyDown={_handleKeyDown}\n    >\n      {leadingIcon && (\n        <StyledNavBarGrpItemIcon>{leadingIcon}</StyledNavBarGrpItemIcon>\n      )}\n      {typeof children === \"string\" ? (\n        <Text color={color} variant=\"span\" size={size}>\n          {children}\n        </Text>\n      ) : (\n        children\n      )}\n      {trailingIcon && (\n        <StyledNavBarGrpItemIcon>{trailingIcon}</StyledNavBarGrpItemIcon>\n      )}\n    </StyledNavBarGroupItem>\n  );\n};\nexport default NavigationBarGroupItem;\n\nconst StyledNavBarGroupItem = styled.li<NavigationBarGroupItemStyleProps>`\n  display: flex;\n  position: relative;\n  flex-direction: row;\n  gap: 1rem;\n  align-items: center;\n  cursor: pointer;\n  border-radius: 0.5rem;\n  padding: 0.4rem 0 0.4rem 1.75rem;\n  margin: 0 0.5rem;\n  color: ${(props) =>\n    props.$selected\n      ? props.$colorPalette[props.$color].accentScale[10]\n      : props.$colorPalette[props.$color].grayScale[11]};\n  background-color: ${(props) =>\n    props.$selected\n      ? props.$colorPalette[props.$color].accentScale[2]\n      : \"transparent\"};\n  &:hover {\n    background-color: ${(props) =>\n      props.$selected\n        ? props.$colorPalette[props.$color].accentScale[3]\n        : props.$colorPalette[props.$color].grayScale[1]};\n  }\n  &:active {\n    background-color: ${(props) =>\n      props.$selected\n        ? props.$colorPalette[props.$color].accentScale[4]\n        : props.$colorPalette[props.$color].grayScale[2]};\n  }\n  &:focus-visible {\n    outline: 1px solid ${(props) => props.$colorPalette[props.$color].accentScale[5]};\n  }\n  &:after {\n    content: \"\";\n    position: absolute;\n    height: 100%;\n    margin-left: 0.43rem;\n    border-left: 1px solid\n      ${(props) => props.$selected\n        ? props.$colorPalette[props.$color].accentScale[5] : props.$colorPalette[props.$color].grayScale[5]};\n    top: 0;\n    left: 0;\n  }\n`;\nconst StyledNavBarGrpItemIcon = styled.span`\n  margin-left: auto;\n`;","import React from \"react\";\nimport {\n  NavigationBarHeaderProps,\n  NavigationBarHeaderStyleProps,\n} from \"./NavigationBarHeader.types\";\n// import colors from \"../../../tokens/colors.json\";\nimport styled from \"styled-components\";\nimport Text from \"../../Text/Text\";\nimport { useTheme } from \"../../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../../helpers/helpers\";\nimport colorTokens from \"../../../tokens/colors.json\";\n\nconst NavigationBarHeader = ({\n  children,\n  style,\n  className,\n  leadingIcon,\n  trailingIcon,\n  size,\n  color = colorTokens.default.primary.main,\n}: NavigationBarHeaderProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  return (\n    <StyledNavBarHeader\n      $colorPalette={colorPalette}\n      $color={color}\n      style={style}\n      className={className}\n    >\n      {leadingIcon && <span>{leadingIcon}</span>}\n      {typeof children === \"string\" ? (\n        <Text color={color} variant=\"span\" size={size ?? \"small\"}>\n          {children}\n        </Text>\n      ) : (\n        children\n      )}\n      {trailingIcon && <span>{trailingIcon}</span>}\n    </StyledNavBarHeader>\n  );\n};\nexport default NavigationBarHeader;\n\nconst StyledNavBarHeader = styled.li<NavigationBarHeaderStyleProps>`\n  display: flex;\n  position: relative;\n  flex-direction: row;\n  gap: 1rem;\n  align-items: center;\n  border-radius: 0.5rem;\n  padding: 0.25rem 0 0.25rem 2.25rem;\n  color: ${(props) => props.$colorPalette[props.$color].grayScale[11]};\n  &:before {\n    content: \"\";\n    position: absolute;\n    width: 0.35rem;\n    height: 0.35rem;\n    left: 0;\n    margin-left: 0.75rem;\n    border-radius: 50%;\n    border: 1px solid ${(props) => props.$colorPalette[props.$color].grayScale[5]};\n  }\n  &:after {\n    content: \"\";\n    position: absolute;\n    height: 50%;\n    margin-left: 0.93rem;\n    border-left: 1px solid\n      ${(props) => props.$colorPalette[props.$color].grayScale[5]};\n    top: calc(50% + 0.175rem);\n    left: 0;\n  }\n`;","import React from \"react\";\nimport {\n  NavigationBarItemProps,\n  NavigationBarItemStyleProps,\n} from \"./NavigationBarItem.types\";\nimport styled from \"styled-components\";\nimport Text from \"../../Text/Text\";\nimport { useTheme } from \"../../ThemeProvider/ThemeProvider\";\nimport colorTokens from \"../../../tokens/colors.json\";\nimport { getColorPalette } from \"../../../helpers/helpers\";\n\nconst NavigationBarItem = ({\n  _index,\n  value,\n  children,\n  leadingIcon,\n  trailingIcon,\n  className,\n  style,\n  size,\n  selected = false,\n  color = colorTokens.default.primary.main,\n  // Events\n  _getSelectedIndex,\n  onClick,\n  \"data-testid\": dataTestId,\n  ...props\n}: NavigationBarItemProps) => {\n  const [_selected, setSelected] = React.useState(selected);\n\n  React.useEffect(() => {\n    setSelected(selected);\n  }, [selected]);\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  const _onClick = (e: React.MouseEvent) => {\n    setSelected(true);\n    _getSelectedIndex && _getSelectedIndex(_index, value);\n    onClick && onClick(e);\n  };\n  const _onKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" || e.key === \" \") {\n      setSelected(true);\n      _getSelectedIndex && _getSelectedIndex(_index, value);\n      onClick && onClick(e);\n    }\n  };\n\n  return (\n    <StyledNavBarItem\n      tabIndex={0}\n      $selected={_selected}\n      $colorPalette={colorPalette}\n      $color={color}\n      className={className}\n      style={style}\n      onClick={_onClick}\n      onKeyDown={_onKeyDown}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {leadingIcon && <StyledNavBarIcon>{leadingIcon}</StyledNavBarIcon>}\n      {typeof children === \"string\" ? (\n        <Text color={color} variant=\"span\" size={size}>\n          {children}\n        </Text>\n      ) : (\n        children\n      )}\n      {trailingIcon && <StyledNavBarIcon>{trailingIcon}</StyledNavBarIcon>}\n    </StyledNavBarItem>\n  );\n};\nNavigationBarItem.displayName = \"NavigationBarItem\";\nexport default NavigationBarItem;\n\nconst StyledNavBarItem = styled.li<NavigationBarItemStyleProps>`\n  display: flex;\n  flex-direction: row;\n  gap: 0.5rem;\n  align-items: center;\n  cursor: pointer;\n  border-radius: 0.5rem;\n  padding: 0.3rem 0.75rem;\n  margin: 0 0.5rem;\n  color: ${(props) =>\n    props.$selected\n      ? props.$colorPalette[props.$color].accentScale[10]\n      : props.$colorPalette[props.$color].grayScale[11]};\n  background-color: ${(props) =>\n    props.$selected\n      ? props.$colorPalette[props.$color].accentScale[2]\n      : \"transparent\"};\n  &:hover {\n    background-color: ${(props) =>\n      props.$selected\n        ? props.$colorPalette[props.$color].accentScale[3]\n        : props.$colorPalette[props.$color].grayScale[1]};\n  }\n  &:active {\n    background-color: ${(props) =>\n      props.$selected\n        ? props.$colorPalette[props.$color].accentScale[4]\n        : props.$colorPalette[props.$color].grayScale[2]};\n  }\n  &:focus-visible {\n    outline: 1px solid ${(props) => props.$colorPalette[props.$color].accentScale[6]};\n  }\n`;\nconst StyledNavBarIcon = styled.span`\n  margin-left: auto;\n`;\n"],"names":[],"sourceRoot":""}