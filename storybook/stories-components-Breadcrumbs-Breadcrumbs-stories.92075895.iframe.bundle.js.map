{"version":3,"file":"stories-components-Breadcrumbs-Breadcrumbs-stories.92075895.iframe.bundle.js","mappings":";;;;AASA;AACA;;;;;ACyDA;AA8BA;;ACzCA;AAEA;;;;AAIA;;;AAIA;;;;AAIA;AC6LA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA","sources":["webpack://stelios/./src/components/Breadcrumbs/Breadcrumbs.tsx","webpack://stelios/./src/components/Breadcrumbs/BreadcrumbsItem/BreadcrumbsItem.tsx","webpack://stelios/./src/components/Link/Link.tsx","webpack://stelios/./src/components/Text/Text.tsx"],"sourcesContent":["import * as React from \"react\";\nimport styled from \"styled-components\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport { BreadcrumbsProps } from \"./Breadcrumbs.types\";\n\nconst StyledDelimiterSpan = styled.span<{ size: BreadcrumbsProps[\"size\"] }>`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: ${props => sizeHandler(props.size)};\n`;\n\nconst Breadcrumbs: React.FunctionComponent<BreadcrumbsProps> = ({\n  children,\n  delimiter,\n  color = colorTokens.default.primary.main,\n  size = \"medium\",\n  variant = \"contained\",\n  //Test Props\n  \"data-testid\": dataTestId,\n  ...props\n}) => {\n  return (\n    <div style={{ display: \"inline-flex\" }} data-testid={dataTestId} {...props}>\n      {React.Children.map(children, (child, index) => {\n        if (!React.isValidElement(child)) return child;\n        return (\n          <>\n            {React.cloneElement(child as React.ReactElement, {\n              ...(!child.props.variant && { variant: variant }),\n              ...(!child.props.size && { size: size }),\n              ...(!child.props.color && { color: color }),\n            })}\n\n            {index < React.Children.count(children) - 1 && (\n              <StyledDelimiterSpan size={size}>\n                {delimiter ?? \">\"}\n              </StyledDelimiterSpan>\n            )}\n          </>\n        );\n      })}\n    </div>\n  );\n};\nconst sizeHandler = (size: BreadcrumbsProps[\"size\"]) => {\n  switch (size) {\n    case \"small\":\n      return \"0 0.25rem\";\n    case \"medium\":\n      return \"0 0.25rem\";\n    case \"large\":\n      return \"0 0.5rem\";\n  }\n};\n\nexport default Breadcrumbs;\n","import * as React from \"react\";\nimport Link from \"../../Link/Link\";\nimport Text from \"../../Text/Text\";\nimport colorTokens from \"../../../tokens/colors.json\";\nimport styled from \"styled-components\";\nimport {\n  BreadcrumbsItemProps,\n  BreadcrumbsItemStyledProps,\n} from \"./BreadcrumbsItem.types\";\nimport { useTheme } from \"../../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../../helpers/helpers\";\n\nconst BreadcrumbsItem: React.FunctionComponent<BreadcrumbsItemProps> = ({\n  link,\n  title,\n  color = colorTokens.default.primary.main,\n  size = \"medium\",\n  variant = \"contained\",\n  \"data-testid\": dataTestId,\n  ...props\n}: BreadcrumbsItemProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  const getPreciseColor = () => {\n    if (colorPalette)\n      return variant === \"contained\"\n        ? colorPalette[color].accentContrast\n        : colorPalette[color].accentScale[10];\n  };\n\n  const BreadcrumbsItemContent = link ? (\n    <Link\n      size={size}\n      preciseColor={getPreciseColor()}\n      variant=\"hover\"\n      href={link}\n    >\n      {title}\n    </Link>\n  ) : (\n    <Text disableColor size={size} variant=\"span\">\n      {title}\n    </Text>\n  );\n\n  return (\n    <StyledBreadcrumbsItem\n      $variant={variant}\n      $color={color}\n      $colorPalette={colorPalette}\n      $size={size}\n      $isSelectable={!!link}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {BreadcrumbsItemContent}\n    </StyledBreadcrumbsItem>\n  );\n};\nexport default BreadcrumbsItem;\n\nconst StyledBreadcrumbsItem = styled.div<BreadcrumbsItemStyledProps>`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 0.5rem;\n  ${(props) => {\n    const properties = styledHandler(\n      props.$variant,\n      props.$color,\n      props.$colorPalette,\n      props.$isSelectable,\n      props.$size\n    );\n    return `\n      background-color: ${properties.backgroundColor.default};\n      color: ${properties.color.default};\n      border: ${properties.border.default};\n      padding: ${properties.padding};\n      margin: ${properties.margin};\n      ${\n        props.$isSelectable\n          ? `&:hover {\n          background-color: ${properties.backgroundColor.hover};\n          color: ${properties.color.hover};\n          border: ${properties.border.hover};\n          }\n          &:active {\n          background-color: ${properties.backgroundColor.active};\n          color: ${properties.color.active};\n          border: ${properties.border.active};\n          `\n          : \"\"\n      }\n      `;\n  }}\n`;\nconst styledHandler = (\n  variant: BreadcrumbsItemStyledProps[\"$variant\"],\n  color: BreadcrumbsItemStyledProps[\"$color\"],\n  colorPalette: BreadcrumbsItemStyledProps[\"$colorPalette\"],\n  isSelectable: BreadcrumbsItemStyledProps[\"$isSelectable\"],\n  size: BreadcrumbsItemStyledProps[\"$size\"]\n) => {\n  return {\n    ...variantHandler(variant, color, colorPalette, isSelectable),\n    ...sizeHandler(size),\n  };\n};\nconst variantHandler = (\n  variant: BreadcrumbsItemStyledProps[\"$variant\"],\n  color: BreadcrumbsItemStyledProps[\"$color\"],\n  colorPalette: BreadcrumbsItemStyledProps[\"$colorPalette\"],\n  isSelectable: BreadcrumbsItemStyledProps[\"$isSelectable\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      if (!isSelectable) {\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[8],\n          },\n          color: {\n            default: colorPalette[color].accentContrast,\n          },\n          border: {\n            default: `1px solid ${colorPalette[color].grayScale[8]}`,\n          },\n        };\n      }\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[8],\n          hover: colorPalette[color].accentScale[9],\n          active: colorPalette[color].accentScale[9],\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n          hover: colorPalette[color].accentContrast,\n          active: colorPalette[color].accentContrast,\n        },\n        border: {\n          default: `1px solid ${colorPalette[color].accentScale[8]}`,\n          hover: `1px solid ${colorPalette[color].accentScale[9]}`,\n          active: `1px solid ${colorPalette[color].accentScale[9]}`,\n        },\n      };\n    case \"outlined\":\n      if (!isSelectable) {\n        return {\n          backgroundColor: {\n            default: \"transparent\",\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `1px solid ${colorPalette[color].grayScale[8]}`,\n          },\n        };\n      }\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `1px solid ${colorPalette[color].accentScale[6]}`,\n          hover: `1px solid ${colorPalette[color].accentScale[7]}`,\n          active: `1px solid ${colorPalette[color].accentScale[7]}`,\n        },\n      };\n    case \"soft\":\n      if (!isSelectable) {\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[3],\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `1px solid ${colorPalette[color].grayScale[3]}`,\n          },\n        };\n      }\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n          hover: colorPalette[color].accentScale[3],\n          active: colorPalette[color].accentScale[3],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `1px solid ${colorPalette[color].accentScale[2]}`,\n          hover: `1px solid ${colorPalette[color].accentScale[3]}`,\n          active: `1px solid ${colorPalette[color].accentScale[3]}`,\n        },\n      };\n    case \"text\":\n      if (!isSelectable) {\n        return {\n          backgroundColor: {\n            default: \"transparent\",\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `1px solid transparent`,\n          },\n        };\n      }\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[11],\n          active: colorPalette[color].accentScale[11],\n        },\n        border: {\n          default: \"1px solid transparent\",\n          hover: \"1px solid transparent\",\n          active: \"1px solid transparent\",\n        },\n      };\n  }\n};\nconst sizeHandler = (size: BreadcrumbsItemStyledProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return {\n        margin: \"0rem 0.25rem\",\n        padding: \"0.25rem 0.5rem\",\n      };\n    case \"medium\":\n      return {\n        margin: \"0rem 0.5rem\",\n        padding: \"0.25rem 0.5rem\",\n      };\n    case \"large\":\n      return {\n        margin: \"0rem 0.5rem\",\n        padding: \"0.25rem 0.5rem\",\n      };\n  }\n};\n","import React from \"react\";\nimport { LinkProps, LinkStyleProps } from \"./Link.types\";\nimport Text from \"../Text/Text\";\nimport styled from \"styled-components\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\nconst Link = ({\n  href,\n  children,\n  variant = \"default\",\n  size = \"medium\",\n  className,\n  target,\n  style,\n  color = colorTokens.default.primary.main,\n  preciseColor,\n  tabIndex,\n  onClick,\n  \"data-testid\": dataTestId,\n}: LinkProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n  const _color =\n    preciseColor ?? colorPalette![color].accentScale[10];\n\n  const LinkText = () => {\n    return typeof children === \"string\" ? (\n      <Text disableColor size={size} variant=\"span\">\n        {children}\n      </Text>\n    ) : (\n      children\n    );\n  };\n  return (\n    <StyledLink\n      tabIndex={tabIndex}\n      $color={_color}\n      $variant={variant}\n      target={target}\n      href={href}\n      className={className}\n      style={style}\n      onClick={onClick}\n      data-testid={dataTestId}\n    >\n      {LinkText()}\n    </StyledLink>\n  );\n};\nexport default Link;\n\nconst StyledLink = styled.a<LinkStyleProps>`\n  width: fit-content;\n  text-decoration: ${(props) =>\n    props.$variant === \"underline\" ? \"underline\" : \"none\"};\n  color: ${(props) => props.$color};\n  cursor: pointer;\n  display: inline-block;\n  &:hover {\n    text-decoration: ${(props) =>\n      props.$variant === \"default\" ? \"none\" : \"underline\"};\n  }\n  &:focus-visible {\n    outline: 1px solid ${(props) => props.$color};\n    outline-offset: 2px;\n    border-radius: 0.25rem;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextProps, TextStyleProps } from \"./Text.types\";\nimport { Helmet } from \"react-helmet\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\ninterface StyledProps {\n  $disableColor?: boolean;\n  $color?: string;\n}\n\nconst Text = ({\n  variant = \"div\",\n  strong,\n  children,\n  align = \"center\",\n  color = colorTokens.default.primary.main,\n  preciseColor,\n  wrap = false,\n  size = \"medium\",\n  disableColor = false,\n  fontSize,\n  lineHeight,\n  style,\n  className,\n  fontFamily,\n  \"data-testid\": dataTestId,\n  ...props\n}: TextProps) => {\n  const theme = useTheme().theme;\n  let _styledProps: StyledProps;\n  if (disableColor) {\n    _styledProps = { $disableColor: disableColor };\n  } else {\n    const colorPalette = getColorPalette(theme, color);\n    const _color = preciseColor ?? colorPalette![color].accentScale[10];\n    _styledProps = { $disableColor: disableColor, $color: _color };\n  }\n\n  const _Text = () => {\n    switch (variant) {\n      case \"h1\":\n        return (\n          <StyledH1\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH1>\n        );\n      case \"h2\":\n        return (\n          <StyledH2\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH2>\n        );\n      case \"h3\":\n        return (\n          <StyledH3\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH3>\n        );\n      case \"h4\":\n        return (\n          <StyledH4\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH4>\n        );\n      case \"h5\":\n        return (\n          <StyledH5\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH5>\n        );\n      case \"h6\":\n        return (\n          <StyledH6\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH6>\n        );\n      case \"div\":\n        return (\n          <StyledDiv\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledDiv>\n        );\n      case \"paragraph\":\n        return (\n          <StyledP\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledP>\n        );\n      case \"label\":\n        return (\n          <StyledLabel\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledLabel>\n        );\n      case \"span\":\n        return (\n          <StyledSpan\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledSpan>\n        );\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link\n          rel=\"preconnect\"\n          href=\"https://fonts.gstatic.com\"\n          crossOrigin=\"\"\n        />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Varela+Round&display=swap\"\n          rel=\"stylesheet\"\n        />\n      </Helmet>\n      {_Text()}\n    </>\n  );\n};\nexport default Text;\n\nconst commonStyles = `\n  padding: 0;\n  margin: 0;\n`;\nconst StyledH1 = styled.h1<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2.25rem\"\n        : \"2rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"4rem\"\n      : props.$size === \"medium\"\n        ? \"3.5rem\"\n        : \"3rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${commonStyles}\n`;\nconst StyledH2 = styled.h2<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"2.25rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3.5rem\"\n      : props.$size === \"medium\"\n        ? \"3rem\"\n        : \"2.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH3 = styled.h3<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3rem\"\n      : props.$size === \"medium\"\n        ? \"2.5rem\"\n        : \"2rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH4 = styled.h4<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH5 = styled.h5<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.5rem\"\n      : props.$size === \"medium\"\n        ? \"1.25rem\"\n        : \"1rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH6 = styled.h6<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledDiv = styled.div<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledLabel = styled.label<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledSpan = styled.span<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledP = styled.p<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\n"],"names":[],"sourceRoot":""}