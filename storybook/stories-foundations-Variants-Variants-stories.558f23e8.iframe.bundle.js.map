{"version":3,"file":"stories-foundations-Variants-Variants-stories.558f23e8.iframe.bundle.js","mappings":";;;;;AAmDA;;AAGA;;;AC+BA;;;;;;;AASA;AA4BA;;;;;;;;AA2JA;AAYA;;;;AC3MA;AA2CA;AAEA;;;;;AAWA;;;;;ACvEA;AAuCA;AAIA;AACA;;;;;AAKA","sources":["webpack://stelios/./src/components/Accordion/Accordion.tsx","webpack://stelios/./src/components/Accordion/AccordionItem/AccordionItem.tsx","webpack://stelios/./src/components/Button/Button.tsx","webpack://stelios/./src/components/IconButton/IconButton.tsx"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { AccordionProps, AccordionStyleProps } from \"./Accordion.types\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport colors from \"../../tokens/colors.json\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport { AccordionItemProps, AccordionItemPvtProps } from \"./AccordionItem/AccordionItem.types\";\n\nconst Accordion = ({\n  children,\n  variant = \"contained\",\n  width,\n  color = colors.default.primary.main,\n  isFullWidth = false,\n  \"data-testid\": dataTestId,\n  style,\n  className,\n  ...props\n}: AccordionProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  return (\n    <StyledAccordion\n      $variant={variant}\n      $width={width}\n      $color={color}\n      $colorPalette={colorPalette}\n      $isFullWidth={isFullWidth}\n      data-testid={dataTestId}\n      style={style}\n      className={className}\n      {...props}\n    >\n      {React.Children.map(children, (child, index) => {\n        if (!React.isValidElement(child)) return child;\n        return React.cloneElement(child, {\n          pvtKey: index+1,\n          ...(!child.props.variant && variant && { variant: variant }),\n          ...(!child.props.color && color && { color: color }),\n        } as AccordionItemProps | AccordionItemPvtProps);\n      })}\n    </StyledAccordion>\n  );\n};\nexport default Accordion;\n\nconst StyledAccordion = styled.div<AccordionStyleProps>`\n  display: flex;\n  flex-direction: column;\n  border-radius: 0.25rem;\n  width: ${({ $width, $isFullWidth }) =>\n    $width ?? ($isFullWidth ? \"100%\" : \"400px\")};\n  max-width: 100%;\n`;\n","import React from \"react\";\nimport {\n  AccordionItemContentStyleProps,\n  AccordionItemProps,\n  AccordionItemPvtProps,\n  AccordionItemStyleProps,\n} from \"./AccordionItem.types\";\nimport styled from \"styled-components\";\nimport Text from \"../../Text/Text\";\nimport { IconChevronDown, IconChevronUp } from \"@tabler/icons-react\";\nimport { useTheme } from \"../../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../../helpers/helpers\";\nimport colorTokens from \"../../../tokens/colors.json\";\n\nconst AccordionItem: React.FC<AccordionItemProps> = ({\n  pvtKey = 1,\n  title,\n  children,\n  expanded,\n  variant = \"contained\",\n  color = colorTokens.default.primary.main,\n  \"data-testid\": dataTestId,\n  \"data-testid-title\": dataTestIdTitle,\n  style,\n  className,\n  ...props\n}: AccordionItemProps & AccordionItemPvtProps) => {\n  const accordionItemRef = React.useRef<HTMLDivElement>(null);\n  const [isExpanded, setIsExpanded] = React.useState(expanded);\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  const _onTitleClick = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  const AccordionItemTitle = () => {\n    if (!title) return null;\n    const titleContent =\n      typeof title === \"string\" ? (\n        <Text disableColor variant=\"paragraph\">{title}</Text>\n      ) : (\n        title\n      );\n    return (\n      <StyledAccordionItemTitle\n        role=\"heading\"\n        aria-level={1}\n        aria-controls={`accordion-content-${pvtKey.toString()}`}\n        $color={color}\n        $variant={variant}\n        $colorPalette={colorPalette}\n        $expanded={isExpanded}\n        onClick={_onTitleClick}\n        data-testid={dataTestIdTitle}\n      >\n        {titleContent}\n        {isExpanded ?  <IconChevronUp/> : <IconChevronDown />}\n      </StyledAccordionItemTitle>\n    );\n  };\n\n  return (\n    <StyledAccordionItem id={`accordion-${pvtKey.toString()}`} data-testid={dataTestId} aria-expanded={isExpanded} style={style} className={className} {...props}>\n      <AccordionItemTitle/>\n      {isExpanded && <StyledAccordionItemContent\n        id={`accordion-content-${pvtKey.toString()}`}\n        ref={accordionItemRef}\n        $variant={variant}\n        $color={color}\n        $colorPalette={colorPalette}\n        $expanded={isExpanded}\n      >\n        {\n          typeof children === \"string\" ? (<Text disableColor variant=\"paragraph\">{children}</Text>) : children\n        }\n      </StyledAccordionItemContent>}\n    </StyledAccordionItem>\n  );\n};\nexport default AccordionItem;\n\nconst StyledAccordionItem = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledAccordionItemTitle = styled.button<AccordionItemStyleProps>`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem 1rem;\n\n  ${props => {\n    const properties = propsTitleHandler(props.$variant, props.$color, props.$colorPalette, props.$expanded);\n    return `\n      background-color: ${properties.backgroundColor.default};\n      color: ${properties.color.default};\n      border: ${properties.border.default};\n      cursor: pointer;\n      user-select: none;\n\n      &:hover {\n        background-color: ${properties.backgroundColor.hover};\n        color: ${properties.color.hover};\n        border: ${properties.border.hover};\n        ${properties.filter ? `filter: ${properties.filter.hover}`:\"\"};\n      }\n      &:active {\n        background-color: ${properties.backgroundColor.active};\n        color: ${properties.color.active};\n        border: ${properties.border.active};\n        ${properties.filter ? `filter: ${properties.filter.active}`:\"\"};\n      }\n      & svg{\n        width: 20px;\n        height: 20px;\n        color: ${properties.svg.color.default};\n      }\n    `;\n  }}\n`;\nconst propsTitleHandler = (\n  variant: AccordionItemStyleProps[\"$variant\"],\n  color: string,\n  colorPalette: AccordionItemStyleProps[\"$colorPalette\"],\n  $expanded: AccordionItemStyleProps[\"$expanded\"]\n) => {\n  return {...getVariantTitleProps(variant, color, colorPalette)};\n};\nconst getVariantTitleProps = (\n  variant: AccordionItemStyleProps[\"$variant\"],\n  color: AccordionItemStyleProps[\"$color\"],\n  colorPalette: AccordionItemStyleProps[\"$colorPalette\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[8],\n          hover: colorPalette[color].accentScale[9],\n          active: colorPalette[color].accentScale[9],\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n          hover: colorPalette[color].accentContrast,\n          active: colorPalette[color].accentContrast,\n        },\n        filter: {\n          hover: \"brightness(0.96) saturate(1.1)\",\n          active: \"brightness(0.92) saturate(1.1)\"\n        },\n        border: {\n          default: `1px solid ${colorPalette[color].accentScale[7]}`,\n          hover: `1px solid ${colorPalette[color].accentScale[8]}`,\n          active: `1px solid ${colorPalette[color].accentScale[8]}`\n        },\n        svg: {\n          color: {\n            default: colorPalette[color].accentContrast,\n          }\n        }\n      };\n    case \"outlined\":\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `1px solid ${colorPalette[color].accentScale[6]}`,\n          hover: `1px solid ${colorPalette[color].accentScale[6]}`,\n          active: `1px solid ${colorPalette[color].accentScale[7]}`\n        },\n        svg: {\n          color: {\n            default: colorPalette[color].accentScale[10],\n          }\n        }\n      }\n    case \"soft\":\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n          hover: colorPalette[color].accentScale[3],\n          active: colorPalette[color].accentScale[3],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `1px solid ${colorPalette[color].accentScale[2]}`,\n          hover: `1px solid ${colorPalette[color].accentScale[3]}`,\n          active: `1px solid ${colorPalette[color].accentScale[3]}`\n        },\n        filter: {\n          hover: \"brightness(0.96) saturate(1.1)\",\n          active: \"brightness(0.92) saturate(1.1)\",\n        },\n        svg: {\n          color: {\n            default: colorPalette[color].accentScale[10],\n          }\n        }\n      }\n    case \"outlined-soft\":\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n          hover: colorPalette[color].accentScale[3],\n          active: colorPalette[color].accentScale[3],\n        \n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `1px solid ${colorPalette[color].accentScale[5]}`,\n          hover: `1px solid ${colorPalette[color].accentScale[6]}`,\n          active: `1px solid ${colorPalette[color].accentScale[6]}`\n        },\n        filter: {\n          hover: \"brightness(0.96) saturate(1.1)\",\n          active: \"brightness(0.92) saturate(1.1)\",\n        },\n        svg: {\n          color: {\n            default: colorPalette[color].accentScale[10],\n          }\n        }\n      }\n    case \"transparent\": {\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `1px solid transparent`,\n          hover: `1px solid transparent`,\n          active: `1px solid transparent`\n        },\n        svg: {\n          color: {\n            default: colorPalette[color].accentScale[10],\n          }\n        }\n    }}\n      \n  }\n};\n\nconst StyledAccordionItemContent = styled.div<AccordionItemContentStyleProps>`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  padding: 0.5rem 1rem 1rem 1rem;\n  overflow: hidden;\n  transition: height 0.3s ease-in-out;\n\n  ${props => {\n    const properties = propsContentHandler(props.$variant, props.$color, props.$colorPalette);\n    return `\n      color: ${properties.color.default};\n      background-color: ${properties.backgroundColor.default};\n      border-left: ${properties.borderLeft.default};\n      border-right: ${properties.borderRight.default};\n      &:last-child {\n        border-bottom: ${properties.borderLeft.default};\n      }\n    `;\n  }}\n`;\nconst propsContentHandler = (\n  variant: AccordionItemContentStyleProps[\"$variant\"],\n  color: AccordionItemContentStyleProps[\"$color\"],\n  colorPalette: AccordionItemContentStyleProps[\"$colorPalette\"],\n) => {\n  return {...getContentVariantProps(variant, color, colorPalette)};\n}\nconst getContentVariantProps = (\n  variant: AccordionItemContentStyleProps[\"$variant\"],\n  color: AccordionItemContentStyleProps[\"$color\"],\n  colorPalette: AccordionItemContentStyleProps[\"$colorPalette\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[8],\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n        },\n        borderLeft: {\n          default: `2px solid ${colorPalette[color].accentScale[8]}`,\n        },\n        borderRight: {\n          default: `2px solid ${colorPalette[color].accentScale[8]}`,\n        }\n      };\n    case \"outlined\":\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n        },\n        borderLeft: {\n          default: `2px solid ${colorPalette[color].accentScale[6]}`,\n        },\n        borderRight: {\n          default: `2px solid ${colorPalette[color].accentScale[6]}`,\n        }\n      }\n    case \"soft\":\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n        },\n        borderLeft: {\n          default: `2px solid ${colorPalette[color].accentScale[2]}`,\n        },\n        borderRight: {\n          default: `2px solid ${colorPalette[color].accentScale[2]}`,\n        }\n      }\n    case \"outlined-soft\":\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n        },\n        borderLeft: {\n          default: `2px solid ${colorPalette[color].accentScale[5]}`,\n        },\n        borderRight: {\n          default: `2px solid ${colorPalette[color].accentScale[5]}`,\n        }\n      }\n    case \"transparent\":\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n        },\n        borderLeft: {\n          default: `2px solid transparent`,\n        },\n        borderRight: {\n          default: `2px solid transparent`,\n        }\n      }\n  }\n}","import React, {\n  useImperativeHandle,\n  useRef,\n  forwardRef,\n} from \"react\";\nimport styled from \"styled-components\";\nimport {\n  ButtonProps,\n  ButtonStyleProps,\n  ButtonIconStyleProps,\n} from \"./Button.types\";\nimport Text from \"../Text/Text\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette, hasPropertyChain } from \"../../helpers/helpers\";\nimport colors from \"../../tokens/colors.json\";\nimport layout from \"../../tokens/layout.json\";\n\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      leadingIcon,\n      trailingIcon,\n      size = \"medium\",\n      variant = \"contained\",\n      color = colors.default.primary.main,\n      rounded = false,\n      disabled = false,\n      children,\n      isFullWidth = false,\n      style,\n      onClick,\n      \"data-testid\": dataTestId,\n      \"data-leading-icon\": dataLeadingIcon,\n      \"data-trailing-icon\": dataTrailingIcon,\n      ...rest\n    }: ButtonProps,\n    ref\n  ) => {\n    const innerRef = useRef<HTMLButtonElement>(null);\n    useImperativeHandle(ref, () => innerRef.current!, [innerRef]);\n    const theme = useTheme().theme;\n    const colorPalette = getColorPalette(theme, color);\n\n    return (\n      <StyledButton\n        ref={innerRef}\n        $size={size}\n        $variant={variant}\n        $color={color}\n        $colorPalette={colorPalette}\n        $disabled={disabled}\n        $rounded={rounded}\n        $isFullWidth={isFullWidth}\n        aria-disabled={disabled}\n        style={style}\n        onClick={onClick}\n        data-testid={dataTestId}\n        {...rest}\n      >\n        {leadingIcon && (\n          <StyledButtonIcon $size={size} data-testid={dataLeadingIcon}>\n            {leadingIcon}\n          </StyledButtonIcon>\n        )}\n        {typeof children === \"string\" ? (\n          <Text disableColor variant=\"span\" size={size}>\n            {children}\n          </Text>\n        ) : (\n          children\n        )}\n        {trailingIcon && (\n          <StyledButtonIcon $size={size} data-testid={dataTrailingIcon}>\n            {trailingIcon}\n          </StyledButtonIcon>\n        )}\n      </StyledButton>\n    );\n  }\n);\nexport default Button;\n\nconst StyledButton = styled.button<ButtonStyleProps>`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  ${(props: ButtonStyleProps) => {\n    const properties = propsHandler(\n      props.$variant,\n      props.$color,\n      props.$colorPalette,\n      props.$size,\n      props.$disabled\n    );\n    return `\n      background-color: ${properties.backgroundColor.default};\n      color: ${properties.color.default};\n      padding: ${properties.padding};\n      gap: ${properties.gap};\n      width: ${props.$isFullWidth ? \"100%\" : \"auto\"};\n      cursor: ${props.$disabled ? \"not-allowed\" : \"pointer\"};\n      border-radius: ${props.$rounded ? \"20rem\" : `${layout[\"border-radius\"].default.rem}rem`};\n      border: ${properties.border!.default};\n      ${hasPropertyChain(properties, [\"boxShadow\", \"default\"]) ? `box-shadow: ${properties.boxShadow!.default};` : \"\"}\n      ${\n        !props.$disabled\n          ? `\n          &:hover {\n          background-color: ${properties.backgroundColor.hover};\n          color: ${properties.color.hover};\n          border: ${properties.border!.hover};\n          ${hasPropertyChain(properties, [\"boxShadow\", \"hover\"]) ? `box-shadow: ${properties.boxShadow!.hover};` : \"\"}\n        }\n        &:active {\n          background-color: ${properties.backgroundColor.active};\n          color: ${properties.color.active};\n          border: ${properties.border.active};\n          ${hasPropertyChain(properties, [\"filter\", \"active\"]) ? `filter: ${properties.filter!.active};` : \"\"};\n          ${hasPropertyChain(properties, [\"boxShadow\", \"active\"]) ? `box-shadow: ${properties.boxShadow!.active};` : \"\"}\n        }  \n        &:focus-visible {\n          outline-offset: 2px;\n          outline: 2px solid ${props.$colorPalette[props.$color].accentScale[8]};\n        }`\n          : \"\"\n      }\n\n    `;\n  }}\n`;\nconst StyledButtonIcon = styled.span<ButtonIconStyleProps>`\n  ${(props: ButtonIconStyleProps) => {\n    const size = getIconSizeProps(props.$size);\n    return `\n      width: ${size.width};\n      height: ${size.height};\n    `;\n  }}\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst propsHandler = (\n  variant: ButtonStyleProps[\"$variant\"],\n  color: ButtonStyleProps[\"$color\"],\n  colorPalette: ButtonStyleProps[\"$colorPalette\"],\n  size: ButtonStyleProps[\"$size\"],\n  disabled: ButtonStyleProps[\"$disabled\"]\n) => {\n  return {\n    ...getVariantProps(variant, color, colorPalette, disabled),\n    ...getSizeProps(size),\n  };\n};\nconst getVariantProps = (\n  variant: ButtonStyleProps[\"$variant\"],\n  color: ButtonStyleProps[\"$color\"],\n  colorPalette: ButtonStyleProps[\"$colorPalette\"],\n  disabled: ButtonStyleProps[\"$disabled\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[8],\n          },\n          color: {\n            default: colorPalette[color].accentContrast,\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[8]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[8],\n          hover: colorPalette[color].accentScale[9],\n          active: colorPalette[color].accentScale[9],\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n          hover: colorPalette[color].accentContrast,\n          active: colorPalette[color].accentContrast,\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[8]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[9]}`,\n          active: `2px solid ${colorPalette[color].accentScale[9]}`,\n        },\n        filter: {\n          active: \"brightness(0.92) saturate(1.1)\",\n        },\n      };\n    case \"outlined\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: \"transparent\",\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[5]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[5]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[6]}`,\n          active: `2px solid ${colorPalette[color].accentScale[7]}`,\n        },\n      };\n    case \"soft\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[2],\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[2]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n          hover: colorPalette[color].accentScale[3],\n          active: colorPalette[color].accentScale[3],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[2]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[3]}`,\n          active: `2px solid ${colorPalette[color].accentScale[3]}`,\n        },\n        filter: {\n          active: \"brightness(0.92) saturate(1.1)\",\n        },\n      };\n    case \"outlined-soft\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[2],\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[5]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n          hover: colorPalette[color].accentScale[3],\n          active: colorPalette[color].accentScale[3],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[5]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[6]}`,\n          active: `2px solid ${colorPalette[color].accentScale[7]}`,\n        },\n      };\n    case \"neumorph\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: \"transparent\",\n          },\n          color: {\n            default: colorPalette[color].grayScale[5],\n          },\n          border: {\n            default: `2px solid transparent`,\n          },\n          boxShadow: {\n            default: `-6px -6px 14px rgba(255, 255, 255, .7),\n              -6px -6px 10px rgba(255, 255, 255, .5),\n              6px 6px 8px rgba(255, 255, 255, .075),\n              6px 6px 10px rgba(0, 0, 0, .15)`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: \"2px solid transparent\",\n          hover: \"2px solid transparent\",\n          active: \"2px solid transparent\",\n        },\n        boxShadow: {\n          default:\n            colorPalette[color].appearance === \"light\"\n              ? `-6px -6px 14px rgba(255, 255, 255, .7),  -6px -6px 10px rgba(255, 255, 255, .5), 6px 6px 8px rgba(255, 255, 255, .075), 6px 6px 10px rgba(0, 0, 0, .15)`\n              : `-6px -6px 14px rgba(255, 255, 255, 0.1), -6px -6px 10px rgba(255, 255, 255, 0.1), 6px 6px 8px rgba(255, 255, 255, 0.05), 6px 6px 10px rgba(0, 0, 0, 0.1)`,\n          hover: colorPalette[color].appearance === \"light\" ? \n              `-2px -2px 6px rgba(255, 255, 255, .6),  -2px -2px 4px rgba(255, 255, 255, .4), 2px 2px 2px rgba(255, 255, 255, .05), 2px 2px 4px rgba(0, 0, 0, .1)`\n              : `-2px -2px 14px rgba(255, 255, 255, 0.1),  -2px -2px 4px rgba(255, 255, 255, .1), 2px 2px 2px rgba(255, 255, 255, .01), 2px 2px 4px rgba(0, 0, 0, .1)`,\n          active: colorPalette[color].appearance === \"light\" ? \n              `inset -2px -2px 6px rgba(255, 255, 255, .7), inset -2px -2px 4px rgba(255, 255, 255, .5), inset 2px 2px 2px rgba(255, 255, 255, .075), inset 2px 2px 4px rgba(0, 0, 0, .15)`\n              : `inset -2px -2px 14px rgba(255, 255, 255, 0.1), inset -2px -2px 4px rgba(255, 255, 255, .1), inset 2px 2px 2px rgba(255, 255, 255, .01), inset 2px 2px 4px rgba(0, 0, 0, .1)`,\n        },\n      };\n  }\n};\nconst getSizeProps = (size: ButtonStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return { padding: \"0.25rem 0.5rem\", gap: \"0.5rem\" };\n    case \"medium\":\n      return { padding: \"0.5rem 1rem\", gap: \"0.75rem\" };\n    case \"large\":\n      return { padding: \"0.5rem 1rem\", gap: \"0.75rem\" };\n  }\n};\n\nconst getIconSizeProps = (size: ButtonStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return { width: \"1.25rem\", height: \"1.25rem\" };\n    case \"medium\":\n      return { width: \"1.5rem\", height: \"1.5rem\" };\n    case \"large\":\n      return { width: \"1.75rem\", height: \"1.75rem\" };\n  }\n};\n","import React, { forwardRef } from \"react\";\nimport { IconButtonProps, IconButtonStyleProps } from \"./IconButton.types\";\nimport styled from \"styled-components\";\nimport Text from \"../Text/Text\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette, hasPropertyChain } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\nconst IconButton = forwardRef(\n  (\n    {\n      alt,\n      icon,\n      size = \"medium\",\n      variant = \"contained\",\n      color = colorTokens.default.primary.main,\n      disabled = false,\n      className,\n      style,\n      onClick,\n      \"data-testid\": dataTestId,\n      ...rest\n    }: IconButtonProps,\n    ref: React.ForwardedRef<HTMLButtonElement>\n  ) => {\n    const theme = useTheme().theme;\n    const colorPalette = getColorPalette(theme, color);\n\n    return (\n      <StyledIconBtn\n        ref={ref}\n        $variant={variant}\n        $size={size}\n        $color={color}\n        $disabled={disabled}\n        $colorPalette={colorPalette}\n        aria-disabled={disabled}\n        style={style}\n        className={className}\n        onClick={onClick}\n        data-testid={dataTestId}\n        {...rest}\n      >\n        {typeof icon === \"string\" ? (\n          <Text variant=\"span\" size={size}>\n            {icon}\n          </Text>\n        ) : (\n          <IconButtonIcon icon={icon} size={size} />\n        )}\n      </StyledIconBtn>\n    );\n  }\n);\n\nexport default IconButton;\nconst IconButtonIcon = ({\n  icon,\n  size,\n}: {\n  icon: React.ReactNode;\n  size: \"small\" | \"medium\" | \"large\";\n}) => {\n  return <StyledIconButtonIcon $size={size}>{icon}</StyledIconButtonIcon>;\n};\n\nconst StyledIconBtn = styled.button<IconButtonStyleProps>`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  ${(props) => {\n    const properties = propsHandler(\n      props.$variant,\n      props.$color,\n      props.$colorPalette,\n      props.$size,\n      props.$disabled\n    );\n    return `\n      background-color: ${properties.backgroundColor.default};\n      color: ${properties.color.default};\n      padding: ${properties.padding};\n      border: ${properties.border.default};\n      cursor: ${props.$disabled ? \"not-allowed\" : \"pointer\"};\n      ${hasPropertyChain(properties, [\"boxShadow\", \"default\"]) ? `box-shadow: ${properties.boxShadow!.default};` : \"\"}\n\n      &:hover {\n        background-color: ${properties.backgroundColor.hover};\n        color: ${properties.color.hover};\n        border: ${properties.border.hover};\n        ${hasPropertyChain(properties, [\"boxShadow\", \"hover\"]) ? `box-shadow: ${properties.boxShadow!.hover};` : \"\"}\n      }\n      &:active {\n        background-color: ${properties.backgroundColor.active};\n        color: ${properties.color.active};\n        border: ${properties.border.active};\n        ${hasPropertyChain(properties, [\"boxShadow\", \"active\"]) ? `box-shadow: ${properties.boxShadow!.active};` : \"\"}\n        ${\n          hasPropertyChain(properties, [\"filter\", \"active\"])\n            ? `filter: ${properties.filter!.active};`\n            : \"\"\n        }\n      };\n      ${`&:focus-visible {\n          outline-offset: 2px;\n          outline: 2px solid ${props.$colorPalette[props.$color].accentScale[8]};\n        }`}\n    `;\n  }}\n`;\nconst StyledIconButtonIcon = styled.div<{\n  $size: \"small\" | \"medium\" | \"large\";\n}>`\n  width: ${(props) => getSizeProps(props.$size).width};\n  height: ${(props) => getSizeProps(props.$size).height};\n  & svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst propsHandler = (\n  variant: IconButtonStyleProps[\"$variant\"],\n  color: IconButtonStyleProps[\"$color\"],\n  colorPalette: IconButtonStyleProps[\"$colorPalette\"],\n  size: IconButtonStyleProps[\"$size\"],\n  disabled: IconButtonStyleProps[\"$disabled\"]\n) => {\n  return {\n    ...getVariantProps(variant, color, colorPalette, disabled),\n    ...getSizeProps(size),\n  };\n};\nconst getVariantProps = (\n  variant: IconButtonStyleProps[\"$variant\"],\n  color: IconButtonStyleProps[\"$color\"],\n  colorPalette: IconButtonStyleProps[\"$colorPalette\"],\n  disabled: IconButtonStyleProps[\"$disabled\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[8],\n          },\n          color: {\n            default: colorPalette[color].accentContrast,\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[8]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[8],\n          hover: colorPalette[color].accentScale[9],\n          active: colorPalette[color].accentScale[9],\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n          hover: colorPalette[color].accentContrast,\n          active: colorPalette[color].accentContrast,\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[8]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[9]}`,\n          active: `2px solid ${colorPalette[color].accentScale[9]}`,\n        },\n      };\n    case \"outlined\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: \"transparent\",\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[5]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[5]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[6]}`,\n          active: `2px solid ${colorPalette[color].accentScale[7]}`,\n        },\n      };\n    case \"soft\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[2],\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[2]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n          hover: colorPalette[color].accentScale[3],\n          active: colorPalette[color].accentScale[3],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[2]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[3]}`,\n          active: `2px solid ${colorPalette[color].accentScale[3]}`,\n        },\n        filter: {\n          active: \"brightness(0.92) saturate(1.1)\",\n        },\n      };\n    case \"outlined-soft\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[2],\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[5]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n          hover: colorPalette[color].accentScale[3],\n          active: colorPalette[color].accentScale[3],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[5]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[6]}`,\n          active: `2px solid ${colorPalette[color].accentScale[7]}`,\n        },\n      };\n    case \"neumorph\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: \"transparent\",\n          },\n          color: {\n            default: colorPalette[color].grayScale[5],\n          },\n          border: {\n            default: `2px solid transparent`,\n          },\n          boxShadow: {\n            default: `-6px -6px 14px rgba(255, 255, 255, .7),\n              -6px -6px 10px rgba(255, 255, 255, .5),\n              6px 6px 8px rgba(255, 255, 255, .075),\n              6px 6px 10px rgba(0, 0, 0, .15)`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid transparent`,\n          hover: `2px solid transparent`,\n          active: `2px solid transparent`,\n        },\n        boxShadow: {\n          default:\n            colorPalette[color].appearance === \"light\"\n              ? `-6px -6px 14px rgba(255, 255, 255, .7), -6px -6px 10px rgba(255, 255, 255, .5), 6px 6px 8px rgba(255, 255, 255, .075), 6px 6px 10px rgba(0, 0, 0, .15)`\n              : `-6px -6px 14px rgba(255, 255, 255, 0.1), -6px -6px 10px rgba(255, 255, 255, 0.1), 6px 6px 8px rgba(255, 255, 255, 0.05), 6px 6px 10px rgba(0, 0, 0, 0.1)`,\n          hover:\n            colorPalette[color].appearance === \"light\"\n              ? `-2px -2px 6px rgba(255, 255, 255, .6), -2px -2px 4px rgba(255, 255, 255, .4), 2px 2px 2px rgba(255, 255, 255, .05), 2px 2px 4px rgba(0, 0, 0, .1)`\n              : `-2px -2px 14px rgba(255, 255, 255, 0.1),  -2px -2px 4px rgba(255, 255, 255, .1), 2px 2px 2px rgba(255, 255, 255, .01), 2px 2px 4px rgba(0, 0, 0, .1)`,\n          active:\n            colorPalette[color].appearance === \"light\"\n              ? `inset -2px -2px 6px rgba(255, 255, 255, .7), inset -2px -2px 4px rgba(255, 255, 255, .5), inset 2px 2px 2px rgba(255, 255, 255, .075), inset 2px 2px 4px rgba(0, 0, 0, .15)`\n              : `inset -2px -2px 14px rgba(255, 255, 255, 0.1), inset -2px -2px 4px rgba(255, 255, 255, .1), inset 2px 2px 2px rgba(255, 255, 255, .01), inset 2px 2px 4px rgba(0, 0, 0, .1)`,\n        },\n      };\n    case \"neumorph-contained\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[8],\n          },\n          color: {\n            default: colorPalette[color].accentContrast,\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].background}`,\n          },\n          boxShadow: {\n            default: `-6px -6px 14px rgba(255, 255, 255, .7),\n              -6px -6px 10px rgba(255, 255, 255, .5),\n              6px 6px 8px rgba(255, 255, 255, .075),\n              6px 6px 10px rgba(0, 0, 0, .15)`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[8],\n          hover: colorPalette[color].accentScale[9],\n          active: colorPalette[color].accentScale[9],\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n          hover: colorPalette[color].accentContrast,\n          active: colorPalette[color].accentContrast,\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].background}`,\n          hover: `2px solid ${colorPalette[color].background}`,\n          active: `2px solid ${colorPalette[color].background}`,\n        },\n        boxShadow: {\n          default:\n            colorPalette[color].appearance === \"light\"\n              ? `-6px -6px 14px rgba(255, 255, 255, .7), -6px -6px 10px rgba(255, 255, 255, .5), 6px 6px 8px rgba(255, 255, 255, .075), 6px 6px 10px rgba(0, 0, 0, .15)`\n              : `-6px -6px 14px rgba(255, 255, 255, 0.1), -6px -6px 10px rgba(255, 255, 255, 0.1), 6px 6px 8px rgba(255, 255, 255, 0.05), 6px 6px 10px rgba(0, 0, 0, 0.1)`,\n          hover:\n            colorPalette[color].appearance === \"light\"\n              ? `-2px -2px 6px rgba(255, 255, 255, .6), -2px -2px 4px rgba(255, 255, 255, .4), 2px 2px 2px rgba(255, 255, 255, .05), 2px 2px 4px rgba(0, 0, 0, .1)`\n              : `-2px -2px 14px rgba(255, 255, 255, 0.1),  -2px -2px 4px rgba(255, 255, 255, .1), 2px 2px 2px rgba(255, 255, 255, .01), 2px 2px 4px rgba(0, 0, 0, .1)`,\n          active:\n            colorPalette[color].appearance === \"light\"\n              ? `inset -2px -2px 6px rgba(255, 255, 255, .7), inset -2px -2px 4px rgba(255, 255, 255, .5), inset 2px 2px 2px rgba(255, 255, 255, .075), inset 2px 2px 4px rgba(0, 0, 0, .15)`\n              : `inset -2px -2px 14px rgba(255, 255, 255, 0.1), inset -2px -2px 4px rgba(255, 255, 255, .1), inset 2px 2px 2px rgba(255, 255, 255, .01), inset 2px 2px 4px rgba(0, 0, 0, .1)`,\n        },\n      };\n  }\n};\nconst getSizeProps = (size: IconButtonStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return {\n        padding: \"0.5rem 0.5rem\",\n        width: \"1.25rem\",\n        height: \"1.25rem\",\n      };\n    case \"medium\":\n      return {\n        padding: \"0.75rem 0.75rem\",\n        width: \"1.5rem\",\n        height: \"1.5rem\",\n      };\n    case \"large\":\n      return {\n        padding: \"1rem 1rem\",\n        width: \"2rem\",\n        height: \"2rem\",\n      };\n  }\n};\n"],"names":[],"sourceRoot":""}