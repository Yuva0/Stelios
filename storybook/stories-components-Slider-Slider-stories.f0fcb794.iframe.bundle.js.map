{"version":3,"file":"stories-components-Slider-Slider-stories.f0fcb794.iframe.bundle.js","mappings":";;;;;;AA2IA;AACA;;;AAIA;AA2BA;;;AAIA;AAuBA;;;AAIA;AAyBA;;;;;;;;;;;;AAaA;AC6BA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA","sources":["webpack://stelios/./src/components/Slider/Slider.tsx","webpack://stelios/./src/components/Text/Text.tsx"],"sourcesContent":["import * as React from \"react\";\nimport {\n  SliderLabelProps,\n  SliderProps,\n  SliderTrackStyleProps,\n} from \"./Slider.types\";\nimport styled from \"styled-components\";\nimport Text from \"../Text/Text\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\n\nconst Slider: React.FunctionComponent<SliderProps> = ({\n  value,\n  defaultValue,\n  min = 0,\n  minDisplay = \"0\",\n  max = 100,\n  maxDisplay = \"100\",\n  step = 1,\n  width = \"400px\",\n  color = colorTokens.default.primary.main,\n  className,\n  style,\n  variant = \"contained\",\n  size = \"medium\",\n  disabled,\n  disableLabels = false,\n  // Events\n  onChange,\n  \"data-testid\": dataTestId,\n}) => {\n  const sliderRef = React.useRef<HTMLDivElement | null>(null);\n  const [sliderValue, setSliderValue] = React.useState<number>(\n    value ?? defaultValue ?? 0\n  );\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  React.useEffect(() => {\n    setSliderValue(value ?? defaultValue ?? 0);\n  }, [value, defaultValue]);\n\n  /* ------------------------------\n    Calculate new value on MouseMove\n  ------------------------------- */\n  const calculateNewValue = (pageX: number) => {\n    if (!sliderRef || !sliderRef.current) return;\n\n    const containerX =\n      sliderRef.current.getBoundingClientRect().x + window.scrollX;\n    const containerWidth = sliderRef.current.offsetWidth;\n\n    const offset = calculateHandleOffset(containerX, pageX, containerWidth);\n    const scaleValue = getScaleValue(offset, min, max, 2);\n    setSliderValue(scaleValue);\n    onChange && onChange(scaleValue);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    e.preventDefault();\n    if (disabled) return;\n    calculateNewValue(e.pageX);\n\n    const handleMouseMove = (e: MouseEvent) => {\n      calculateNewValue(e.pageX);\n    };\n\n    const handleMouseUp = () => {\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      document.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n\n    document.addEventListener(\"mousemove\", handleMouseMove);\n    document.addEventListener(\"mouseup\", handleMouseUp);\n  };\n\n  return (\n    <div style={{ width: width }} aria-disabled={disabled} data-testid={dataTestId}>\n      <StyledSliderLabel $color={color} $colorPalette={colorPalette}>\n        {!disableLabels && (\n          <Text disableColor size={size}>\n            {minDisplay}\n          </Text>\n        )}\n        {!disableLabels && (\n          <Text disableColor size={size}>\n            {maxDisplay}\n          </Text>\n        )}\n      </StyledSliderLabel>\n      <StyledSliderTrack\n        role=\"slider\"\n        ref={sliderRef}\n        className={className}\n        style={style}\n        $colorPalette={colorPalette}\n        $color={color}\n        $variant={variant}\n        $size={size}\n        $disabled={disabled}\n        onMouseDown={handleMouseDown}\n      >\n        <StyledSliderTrackFinal\n          style={{ width: `${sliderValue}%` }}\n          $colorPalette={colorPalette}\n          $color={color}\n          $variant={variant}\n          $size={size}\n        >\n          {!disabled && (\n            <StyledSliderHandle\n              $colorPalette={colorPalette}\n              $color={color}\n              $variant={variant}\n              $size={size}\n            />\n          )}\n        </StyledSliderTrackFinal>\n        <StyledSliderInput\n          type=\"slider\"\n          min={min}\n          max={max}\n          step={step}\n          value={sliderValue}\n          readOnly\n        />\n      </StyledSliderTrack>\n    </div>\n  );\n};\nexport default Slider;\n\nconst StyledSliderLabel = styled.div<SliderLabelProps>`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 4px;\n  color: ${(props) => props.$colorPalette[props.$color].accentScale[10]};\n`;\nconst StyledSliderTrack = styled.div<SliderTrackStyleProps>`\n  position: relative;\n  cursor: pointer;\n  ${(props) => {\n    const properties = styleHandler(\n      props.$colorPalette,\n      props.$color,\n      props.$variant,\n      props.$size\n    );\n    return `\n      background-color: ${properties.track.backgroundColor.default};\n      height: ${properties.track.height};\n      border-radius: ${properties.track.borderRadius};\n      outline: ${properties.track.outline.default};\n      \n      ${\n        !props.$disabled\n          ? `&:hover {\n        background-color: ${properties.track.backgroundColor.hover};\n        outline: ${properties.track.outline.hover};\n      }\n      &:active {\n        background-color: ${properties.track.backgroundColor.active};\n        outline: ${properties.track.outline.active};\n      }`\n          : \"\"\n      }\n    `;\n  }}\n`;\nconst StyledSliderTrackFinal = styled.div<SliderTrackStyleProps>`\n  position: relative;\n  z-index: 1;\n  ${(props) => {\n    const properties = styleHandler(\n      props.$colorPalette,\n      props.$color,\n      props.$variant,\n      props.$size\n    );\n    return `\n      height: ${properties.trackFinal.height};\n      border-radius: ${properties.trackFinal.borderRadius};\n      background-color: ${properties.trackFinal.backgroundColor.default};\n      ${\n        !props.$disabled\n          ? `&:hover {\n        background-color: ${properties.trackFinal.backgroundColor.hover};\n      }\n      &:active {\n        background-color: ${properties.trackFinal.backgroundColor.active};\n      }`\n          : \"\"\n      }\n    `;\n  }}\n`;\nconst StyledSliderHandle = styled.div<SliderTrackStyleProps>`\n  position: absolute;\n  border-radius: 50%;\n  ${(props) => {\n    const properties = styleHandler(\n      props.$colorPalette,\n      props.$color,\n      props.$variant,\n      props.$size\n    );\n    return `\n      background-color: ${properties.trackFinal.backgroundColor.default};\n      width: ${properties.handle.width};\n      height: ${properties.handle.height};\n      top: ${properties.handle.top};\n      right: ${properties.handle.right};\n      ${\n        !props.$disabled\n          ? `&:hover {\n        background-color: ${properties.trackFinal.backgroundColor.hover};\n      }\n      &:active {\n        background-color: ${properties.trackFinal.backgroundColor.active};\n      }`\n          : \"\"\n      }\n    `;\n  }}\n`;\nconst StyledSliderInput = styled.input`\n  position: absolute;\n  width: 100%;\n  left: 0;\n  top: 0;\n  border: 0;\n  padding: 0;\n  margin: 0;\n  height: 100%;\n  opacity: 0;\n  cursor: pointer;\n  z-index: 1;\n`;\nconst styleHandler = (\n  colorPalette: any,\n  color: string,\n  variant: SliderTrackStyleProps[\"$variant\"],\n  size: SliderTrackStyleProps[\"$size\"]\n) => {\n  return {\n    track: {\n      ...getVariantStyles(colorPalette, color, variant).track,\n      ...getSizeStyles(size).track,\n    },\n    trackFinal: {\n      ...getVariantStyles(colorPalette, color, variant).trackFinal,\n      ...getSizeStyles(size).trackFinal,\n    },\n    handle: {\n      ...getSizeStyles(size).handle,\n    },\n  };\n};\nconst getVariantStyles = (\n  colorPalette: any,\n  color: string,\n  variant: SliderTrackStyleProps[\"$variant\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      return {\n        track: {\n          backgroundColor: {\n            default: colorPalette[color].accentScale[4],\n            hover: colorPalette[color].accentScale[5],\n            active: colorPalette[color].accentScale[5],\n          },\n          outline: {\n            default: \"none\",\n            hover: \"none\",\n            active: \"none\",\n          },\n        },\n        trackFinal: {\n          backgroundColor: {\n            default: colorPalette[color].accentScale[8],\n            hover: colorPalette[color].accentScale[9],\n            active: colorPalette[color].accentScale[9],\n          },\n        },\n        handle: {},\n      };\n    case \"outlined\":\n      return {\n        track: {\n          backgroundColor: {\n            default: \"transparent\",\n            hover: \"transparent\",\n            active: \"transparent\",\n          },\n          outline: {\n            default: `1px solid ${colorPalette[color].accentScale[8]}`,\n            hover: `1px solid ${colorPalette[color].accentScale[9]}`,\n            active: `1px solid ${colorPalette[color].accentScale[9]}`,\n          },\n        },\n        trackFinal: {\n          backgroundColor: {\n            default: colorPalette[color].accentScale[8],\n            hover: colorPalette[color].accentScale[9],\n            active: colorPalette[color].accentScale[9],\n          },\n        },\n      };\n  }\n};\nconst getSizeStyles = (size: SliderTrackStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return {\n        track: {\n          height: \"6px\",\n          borderRadius: \"5px\",\n        },\n        trackFinal: {\n          height: \"100%\",\n          borderRadius: \"3px\",\n        },\n        handle: {\n          width: \"12px\",\n          height: \"12px\",\n          right: \"-6px\",\n          top: \"-3px\",\n        },\n      };\n    case \"medium\":\n      return {\n        track: {\n          height: \"10px\",\n          borderRadius: \"7px\",\n        },\n        trackFinal: {\n          height: \"100%\",\n          borderRadius: \"5px\",\n        },\n        handle: {\n          width: \"20px\",\n          height: \"20px\",\n          right: \"-10px\",\n          top: \"-5px\",\n          borderRadius: \"50%\",\n        },\n      };\n    case \"large\":\n      return {\n        track: {\n          height: \"14px\",\n          borderRadius: \"9px\",\n        },\n        trackFinal: {\n          height: \"100%\",\n          borderRadius: \"7px\",\n        },\n        handle: {\n          width: \"24px\",\n          height: \"24px\",\n          right: \"-12px\",\n          top: \"-6px\",\n          borderRadius: \"50%\",\n        },\n      };\n  }\n};\n\n/* -------------------------------\n  Calculate offset of the handle\n------------------------------- */\nconst calculateHandleOffset = (\n  containerStartingVal: number,\n  mouseVal: number,\n  containerLength: number\n) => {\n  const relativeVal = mouseVal - containerStartingVal;\n  if (relativeVal < 0) {\n    return 0;\n  } else if (relativeVal > containerLength) {\n    return 100;\n  } else {\n    return (relativeVal * 100) / containerLength;\n  }\n};\nconst getScaleValue = (\n  value: number,\n  min: number,\n  max: number,\n  rounded: number\n) => {\n  return +(min + (value / 100) * (max - min)).toFixed(rounded);\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextProps, TextStyleProps } from \"./Text.types\";\nimport { Helmet } from \"react-helmet\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\ninterface StyledProps {\n  $disableColor?: boolean;\n  $color?: string;\n}\n\nconst Text = ({\n  variant = \"div\",\n  strong,\n  children,\n  align = \"center\",\n  color = colorTokens.default.primary.main,\n  preciseColor,\n  wrap = false,\n  size = \"medium\",\n  disableColor = false,\n  fontSize,\n  lineHeight,\n  style,\n  className,\n  fontFamily,\n  \"data-testid\": dataTestId,\n  ...props\n}: TextProps) => {\n  const theme = useTheme().theme;\n  let _styledProps: StyledProps;\n  if (disableColor) {\n    _styledProps = { $disableColor: disableColor };\n  } else {\n    const colorPalette = getColorPalette(theme, color);\n    const _color = preciseColor ?? colorPalette![color].accentScale[10];\n    _styledProps = { $disableColor: disableColor, $color: _color };\n  }\n\n  const _Text = () => {\n    switch (variant) {\n      case \"h1\":\n        return (\n          <StyledH1\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH1>\n        );\n      case \"h2\":\n        return (\n          <StyledH2\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH2>\n        );\n      case \"h3\":\n        return (\n          <StyledH3\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH3>\n        );\n      case \"h4\":\n        return (\n          <StyledH4\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH4>\n        );\n      case \"h5\":\n        return (\n          <StyledH5\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH5>\n        );\n      case \"h6\":\n        return (\n          <StyledH6\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH6>\n        );\n      case \"div\":\n        return (\n          <StyledDiv\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledDiv>\n        );\n      case \"paragraph\":\n        return (\n          <StyledP\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledP>\n        );\n      case \"label\":\n        return (\n          <StyledLabel\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledLabel>\n        );\n      case \"span\":\n        return (\n          <StyledSpan\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledSpan>\n        );\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link\n          rel=\"preconnect\"\n          href=\"https://fonts.gstatic.com\"\n          crossOrigin=\"\"\n        />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Alegreya:wght@400;700&family=Varela+Round&display=swap\"\n          rel=\"stylesheet\"\n        />\n      </Helmet>\n      {_Text()}\n    </>\n  );\n};\nexport default Text;\n\nconst commonStyles = `\n  padding: 0;\n  margin: 0;\n`;\nconst StyledH1 = styled.h1<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2.25rem\"\n        : \"2rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"4rem\"\n      : props.$size === \"medium\"\n        ? \"3.5rem\"\n        : \"3rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${commonStyles}\n`;\nconst StyledH2 = styled.h2<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"2.25rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3.5rem\"\n      : props.$size === \"medium\"\n        ? \"3rem\"\n        : \"2.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH3 = styled.h3<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3rem\"\n      : props.$size === \"medium\"\n        ? \"2.5rem\"\n        : \"2rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH4 = styled.h4<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH5 = styled.h5<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.5rem\"\n      : props.$size === \"medium\"\n        ? \"1.25rem\"\n        : \"1rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH6 = styled.h6<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledDiv = styled.div<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledLabel = styled.label<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledSpan = styled.span<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledP = styled.p<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\n"],"names":[],"sourceRoot":""}