{"version":3,"file":"stories-components-Drawer-Drawer-mdx.1c87b1a3.iframe.bundle.js","mappings":";AAuJA;;;AAGA;;AAGA;AACA;;AAEA;AACA;;;AAGA;;;;AAKA;;;;;;;AAQA;AACA;;;;;AAMA;AAEA","sources":["webpack://stelios/./src/components/Drawer/Drawer.tsx"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { DrawerProps, DrawerStyleProps } from \"./Drawer.types\";\nimport Text from \"../Text/Text\";\nimport IconButton from \"../IconButton/IconButton\";\nimport { IconX } from \"@tabler/icons-react\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { useDebounce } from \"../../helpers/CustomHooks\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n// import ClickAwayListener from \"../ClickAwayListener/ClickAwayListener\";\n\ntype DrawerBackdropProps = {\n  $backdropStrength: DrawerProps[\"backdropStrength\"];\n};\n\nconst Drawer = ({\n  children,\n  open = false,\n  position = \"left\",\n  size = \"medium\",\n  className,\n  style,\n  hideOnOutsideClick = true,\n  zIndex = 1000,\n  backdropStrength = \"normal\",\n  title,\n  hasCloseIcon = true,\n  color = colorTokens.default.primary.main,\n  // Events\n  onClose,\n  \"data-testid\": dataTestId,\n  \"data-testid-backdrop\": dataTestIdBackdrop,\n  ...props\n}: DrawerProps) => {\n  const [isOpen, setIsOpen] = React.useState(open);\n  const debouncedOpen = useDebounce(open, 300);\n\n  React.useEffect(() => {\n    setIsOpen(open);\n\n    const handleEscapeKey = (e: KeyboardEvent) => {\n      if (e.key === \"Escape\") {\n        setIsOpen(false);\n        onClose && onClose(e);\n      }\n    };\n\n    if (open) document.addEventListener(\"keydown\", handleEscapeKey);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleEscapeKey);\n    };\n  }, [open, onClose]);\n\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  const _onOutsideClick = (e: React.MouseEvent) => {\n    if (hideOnOutsideClick) {\n      setIsOpen(false);\n      onClose && onClose(e);\n    }\n  };\n\n  const Title =\n    title && typeof title === \"string\" ? (\n      <Text color={color} style={{ flexGrow: 1 }} variant=\"h5\">\n        {title}\n      </Text>\n    ) : (\n      title\n    );\n  const CloseIcon = (\n    <span style={{ float: \"right\" }}>\n      <IconButton\n        alt=\"Close\"\n        size=\"small\"\n        variant=\"outlined\"\n        color={color}\n        icon={<IconX />}\n        onClick={_onOutsideClick}\n      />\n    </span>\n  );\n\n  const headerDrawer = (title || hasCloseIcon) && (\n    <StyledHeader\n      $color={color}\n      $size={size}\n      $colorPalette={colorPalette}\n      $backdropStrength={backdropStrength}\n    >\n      <div style={{ flexGrow: 1 }}>{Title}</div>\n      {CloseIcon}\n    </StyledHeader>\n  );\n\n  if (!open && !debouncedOpen) return null;\n  return (\n    <>\n      <StyledDrawer\n        $open={isOpen}\n        $colorPalette={colorPalette}\n        $color={color}\n        $position={position}\n        $size={size}\n        $backdropStrength={backdropStrength}\n        className={className}\n        style={style}\n        $zIndex={zIndex}\n        data-testid={dataTestId}\n        {...props}\n      >\n        {headerDrawer}\n        <StyledDrawerContent>{children}</StyledDrawerContent>\n      </StyledDrawer>\n      {isOpen && (\n        <StyledBackdrop\n          data-testid={dataTestIdBackdrop}\n          $backdropStrength={backdropStrength}\n          onClick={_onOutsideClick}\n        />\n      )}\n    </>\n  );\n};\nexport default Drawer;\n\nconst getSize = (size: DrawerStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return 320;\n    case \"medium\":\n      return 480;\n    case \"large\":\n      return 640;\n  }\n};\nconst getBackdropStrength = (strength: DrawerProps[\"backdropStrength\"]) => {\n  switch (strength) {\n    case \"weak\":\n      return \"rgba(0, 0, 0, 0.1)\";\n    case \"normal\":\n      return \"rgba(0, 0, 0, 0.3)\";\n    case \"strong\":\n      return \"rgba(0, 0, 0, 0.5)\";\n  }\n};\n\nconst StyledDrawer = styled.div<DrawerStyleProps>`\n  width: ${(props) => `${getSize(props.$size)}px`};\n  position: fixed;\n  top: 0;\n  ${(props) => props.$position}: ${(props) =>\n    props.$open ? 0 : `${-1 * getSize(props.$size)}px`};\n  height: 100%;\n  background-color: ${(props) => props.$colorPalette[props.$color].background};\n  color: ${(props) => props.$colorPalette[props.$color].grayScale[11]};\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  transition: ${(props) => `${props.$position} 0.3s ease-in-out;`}  \n  z-index: ${(props) => props.$zIndex};\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledDrawerContent = styled.div`\n  padding: 1rem;\n  flex-grow: 1;\n  overflow-y: auto;\n`;\nconst StyledBackdrop = styled.div<DrawerBackdropProps>`\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  z-index: 999;\n  background-color: ${(props) => getBackdropStrength(props.$backdropStrength)};\n`;\nconst StyledHeader = styled.div<DrawerStyleProps>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n  border-bottom: ${(props) =>\n    `1px solid ${props.$colorPalette[props.$color].grayScale[5]}`};\n`;\n"],"names":[],"sourceRoot":""}