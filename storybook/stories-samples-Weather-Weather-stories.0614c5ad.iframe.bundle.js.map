{"version":3,"file":"stories-samples-Weather-Weather-stories.0614c5ad.iframe.bundle.js","mappings":";;;;;;;;;AAgFA;;;;;AAMA;;;;;AAMA;;;;;;;;AAUA;;;;;AAgCA;;;;;;AClEA;AAcA","sources":["webpack://stelios/./src/stories/samples/Weather/Weather.stories.tsx","webpack://stelios/./src/components/Card/Card.tsx"],"sourcesContent":["import type { Meta } from \"@storybook/react\";\nimport * as React from \"react\";\nimport Card from \"../../../components/Card/Card\";\nimport {\n  ThemeProvider,\n  useTheme,\n} from \"../../../components/ThemeProvider/ThemeProvider\";\nimport styled from \"styled-components\";\nimport Text from \"../../../components/Text/Text\";\nimport Input from \"../../../components/Input/Input\";\nimport WeatherSVG from \"../../../svg/WeatherCloudy.tsx\";\n\ninterface WeatherProps {\n  color?: string;\n}\n\nconst WeatherMeta: Meta<typeof WeatherComp> = {\n  title: \"Samples/Weather\",\n  parameters: {\n    layout: \"centered\",\n  },\n};\nexport default WeatherMeta;\n\nconst WeatherComp: React.FC<WeatherProps> = ({ color }) => {\n  const theme = useTheme().theme;\n  const colorPalette = theme?.colorPalette;\n  return (\n    <StyledContainerCard\n      width=\"auto\"\n      color=\"primary\"\n      variant=\"outlined\"\n      style={{ backgroundColor: colorPalette?.primary.accentScale[0] || \"\" }}\n      header={<WeatherHeader />}\n    >test</StyledContainerCard>\n  );\n};\n\nconst WeatherHeader = () => {\n  const theme = useTheme().theme;\n  const colorPalette = theme?.colorPalette;\n  return (\n    <StyledHeaderContainer style={{backgroundColor: colorPalette?.primary.accentScale[2]}}>\n      <StyledHeaderTop>\n        <Text disableColor>Bangalore, India</Text>\n        <Input\n          size=\"small\"\n          variant=\"soft\"\n          width=\"150px\"\n          color=\"primary\"\n          placeholder=\"Search\"\n          inputStyle={{ backgroundColor: colorPalette?.primary.accentScale[4] }}\n        />\n      </StyledHeaderTop>\n      <StyledHeaderMiddle>\n        <div>\n          <Text size=\"large\" variant=\"paragraph\" color=\"primary\">\n            23Â°C\n          </Text>\n          <Text variant=\"paragraph\" color=\"primary\">\n            Partly Cloudy\n          </Text>\n        </div>\n        <WeatherIcon>\n          <WeatherSVG />\n        </WeatherIcon>\n      </StyledHeaderMiddle>\n    </StyledHeaderContainer>\n  );\n};\nconst StyledHeaderContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 200px;\n  border-radius: 0.75rem 0.75rem 0 0;\n  padding: 1rem;\n  box-sizing: border-box;\n  gap: 1rem;\n`;\nconst StyledHeaderTop = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n`;\nconst StyledHeaderMiddle = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 0 0.5rem;\n`;\nconst WeatherIcon = styled.div`\n  width: 80px;\n  height: 80px;\n\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst MobileUI = ({ children }) => {\n  return (\n    <div\n      style={{\n        border: \"4px solid black\",\n        borderRadius: \"0.75rem\",\n        height: \"600px\",\n        width: \"350px\",\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport const Weather: typeof WeatherMeta = {\n  render: () => {\n    return (\n      <MobileUI>\n        <ThemeProvider accents={{ primary: \"purple\" }}>\n          <WeatherComp />\n        </ThemeProvider>\n      </MobileUI>\n    );\n  },\n};\n\nconst StyledContainerCard = styled(Card)`\n  width: auto;\n  height: 100%;\n  padding: 0;\n  border: 0;\n`;\n","import * as React from \"react\";\nimport {\n  CardProps,\n  CardHeaderProps,\n  CardFooterProps,\n  ChildrenProps,\n  CardStyledProps,\n} from \"./Card.types\";\nimport Text from \"../Text/Text\";\nimport styled from \"styled-components\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\n\nconst Card: React.FunctionComponent<CardProps> = ({\n  variant = \"contained\",\n  color = colorTokens.default.primary.main,\n  header,\n  children,\n  footer,\n  width = \"400px\",\n  className,\n  style,\n  \"data-testid\": dataTestId,\n  ...props\n}) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  return (\n    <StyledCard\n      $variant={variant}\n      $colorPalette={colorPalette}\n      $color={color}\n      $width={width}\n      className={className}\n      style={style}\n      data-testid={dataTestId}\n      {...props}\n    >\n      <CardHeader>{header}</CardHeader>\n      <Children>{children}</Children>\n      <CardFooter>{footer}</CardFooter>\n\n\n\n    </StyledCard>\n  );\n};\nconst CardHeader: React.FunctionComponent<CardHeaderProps> = ({ children }) => {\n  return <Children children={children}/>;\n};\nconst CardFooter: React.FunctionComponent<CardFooterProps> = ({ children }) => {\n  return <Children children={children}/>;\n};\nconst Children: React.FunctionComponent<ChildrenProps> = ({ children }) => {\n  if(!React.isValidElement(children)) return null;\n\n  return children;\n};\nexport default Card;\n\nconst StyledCard = styled.div<CardStyledProps>`\n  border-radius: 8px;\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  ${(props) => {\n    const properties = propsHandler(\n      props.$variant,\n      props.$colorPalette,\n      props.$color\n    );\n    return `\n      width: ${props.$width};\n      background-color: ${properties.backgroundColor.default};\n      border: ${properties.border.default};\n      color: ${properties.color.default};\n      ${properties.boxShadow ? `box-shadow: ${properties.boxShadow.default};` : \"\"}\n    `;\n  }}\n`;\nconst propsHandler = (\n  variant: CardStyledProps[\"$variant\"],\n  colorPalette: CardStyledProps[\"$colorPalette\"],\n  color: CardStyledProps[\"$color\"]\n) => {\n  return { ...getVariantProps(variant, colorPalette, color) };\n};\nconst getVariantProps = (\n  variant: CardStyledProps[\"$variant\"],\n  colorPalette: CardStyledProps[\"$colorPalette\"],\n  color: CardStyledProps[\"$color\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[8],\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[8]}`,\n        },\n      };\n    case \"outlined\":\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[5]}`,\n        },\n      };\n    case \"soft\":\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[2]}`,\n        },\n      }\n    case \"outlined-soft\":\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[5]}`,\n        },\n      }\n    case \"neumorph\":\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid transparent`,\n        },\n        boxShadow: {\n          default: `-6px -6px 14px rgba(255, 255, 255, .7),\n              -6px -6px 10px rgba(255, 255, 255, .5),\n              6px 6px 8px rgba(255, 255, 255, .075),\n              6px 6px 10px rgba(0, 0, 0, .15)`,\n        }\n      }\n  }\n};\n"],"names":[],"sourceRoot":""}