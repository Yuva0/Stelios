{"version":3,"file":"stories-components-Alert-Alert-mdx.6b318afa.iframe.bundle.js","mappings":";;;;;;;;;;AA2FA;AAUA;;;;AAiFA;;;;;;AAOA;;;;;;;AAQA;;;;;;;;AASA;ACqDA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA","sources":["webpack://stelios/./src/components/Alert/Alert.tsx","webpack://stelios/./src/components/Text/Text.tsx"],"sourcesContent":["import * as React from \"react\";\nimport Text from \"../Text/Text\";\nimport styled from \"styled-components\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport { AlertProps, AlertStyleProps } from \"./Alert.types\";\nimport { getColorPalette } from \"../../helpers/helpers\";\n\nconst Alert: React.FunctionComponent<AlertProps> = ({\n  title,\n  titleIcon,\n  description,\n  leadingIcon,\n  color = colorTokens.default.primary.main,\n  variant = \"contained\",\n  width = \"400px\",\n  style,\n  className,\n  \"data-testid\": dataTestId,\n  \"data-leading-icon\": dataLeadingIcon,\n  ...props\n}: AlertProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme,color);\n\n  const Content = React.useCallback(() => {\n    if (!title && !description) return null;\n\n    const Title = title ? (\n      <StyledTitleContainer>\n        {titleIcon && <StyledTitleIcon>{titleIcon}</StyledTitleIcon>}\n        {typeof title === \"string\" ? (\n          <Text disableColor variant=\"span\" style={{ marginTop: \"0.2rem\" }}>\n            {title}\n          </Text>\n        ) : (\n          title\n        )}\n      </StyledTitleContainer>\n    ) : null;\n\n    const Description =\n      description && typeof description === \"string\" ? (\n        <Text disableColor variant=\"paragraph\" size=\"small\">\n          {description}\n        </Text>\n      ) : (\n        description\n      );\n\n    return (\n      <StyledContentContainer>\n        {Title}\n        {Description}\n      </StyledContentContainer>\n    );\n  }, [title, description, titleIcon]);\n\n  const LeadingIcon = React.useCallback(() => {\n    if (!leadingIcon) return null;\n\n    return <StyledIcon data-testid={dataLeadingIcon}>{leadingIcon}</StyledIcon>;\n  }, [leadingIcon, dataLeadingIcon]);\n\n  return (\n    <StyledAlertContainer\n      style={style}\n      className={className}\n      $width={width}\n      $color={color}\n      $variant={variant}\n      $colorPalette={colorPalette}\n      data-testid={dataTestId}\n      {...props}\n    >\n      <LeadingIcon />\n      <Content />\n    </StyledAlertContainer>\n  );\n};\nexport default Alert;\n\nconst StyledAlertContainer = styled.div<AlertStyleProps>`\n  display: flex;\n  flex-direction: row;\n  box-sizing: border-box;\n  gap: 1rem;\n  justify-content: flex-start;\n  align-items: center;\n  padding: 0.75rem 1rem 1rem 1rem;\n  border-radius: 0.8rem;\n  ${props => {\n    const properties = propsAlertContainerHandler(props.$variant, props.$color, props.$colorPalette);\n    return `\n      background-color: ${properties.background.default};\n      border: ${properties.border.default};\n      border-left: ${properties.borderLeft.default};\n      color: ${properties.color.default};\n      width: ${props.$width};\n    `;\n  }}\n`;\nconst propsAlertContainerHandler = (\n  variant: AlertStyleProps[\"$variant\"],\n  color: AlertStyleProps[\"$color\"],\n  colorPalette: AlertStyleProps[\"$colorPalette\"]\n) => {\n  return { ...getVariantProps(variant, color, colorPalette) };\n};\nconst getVariantProps = (\n  variant: AlertStyleProps[\"$variant\"],\n  color: AlertStyleProps[\"$color\"],\n  colorPalette: AlertStyleProps[\"$colorPalette\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      return {\n        background: {\n          default: colorPalette[color].accentScale[8],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[10]}`,\n        },\n        borderLeft: {\n          default: `0.5rem solid ${colorPalette[color].accentScale[10]}`,\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n        }\n      };\n    case \"outlined\":\n      return {\n        background: {\n          default: \"transparent\",\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[8]}`,\n        },\n        borderLeft: {\n          default: `0.5rem solid ${colorPalette[color].accentScale[8]}`,\n        },\n        color: {\n          default: colorPalette[color].accentScale[11],\n        }\n      };\n    case \"soft\":\n      return {\n        background: {\n          default: colorPalette[color].accentScale[2],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[2]}`,\n        },\n        borderLeft: {\n          default: `0.5rem solid ${colorPalette[color].accentScale[6]}`,\n        },\n        color: {\n          default: colorPalette[color].accentScale[11],\n        }\n      };\n    case \"outlined-soft\":\n      return {\n        background: {\n          default: colorPalette[color].accentScale[2],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[8]}`,\n        },\n        borderLeft: {\n          default: `0.5rem solid ${colorPalette[color].accentScale[8]}`,\n        },\n        color: {\n          default: colorPalette[color].accentScale[11],\n        }\n      };\n  }\n}\n\nconst StyledContentContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n`;\nconst StyledTitleContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 0.5rem;\n  flex: 1 1 auto;\n`;\nconst StyledTitleIcon = styled.div`\n  width: 18px;\n  height: 18px;\n  & svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\nconst StyledIcon = styled.div`\n  flex: 1 0 auto;\n  width: 24px;\n  height: 24px;\n  & svg {\n    width: 100%;\n    height: 100%;\n  }\n`;","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextProps, TextStyleProps } from \"./Text.types\";\nimport { Helmet } from \"react-helmet\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\ninterface StyledProps {\n  $disableColor?: boolean;\n  $color?: string;\n}\n\nconst Text = ({\n  variant = \"div\",\n  strong,\n  children,\n  align = \"center\",\n  color = colorTokens.default.primary.main,\n  preciseColor,\n  wrap = false,\n  size = \"medium\",\n  disableColor = false,\n  fontSize,\n  lineHeight,\n  style,\n  className,\n  fontFamily,\n  \"data-testid\": dataTestId,\n  ...props\n}: TextProps) => {\n  const theme = useTheme().theme;\n  let _styledProps: StyledProps;\n  if (disableColor) {\n    _styledProps = { $disableColor: disableColor };\n  } else {\n    const colorPalette = getColorPalette(theme, color);\n    const _color = preciseColor ?? colorPalette![color].accentScale[10];\n    _styledProps = { $disableColor: disableColor, $color: _color };\n  }\n\n  const _Text = () => {\n    switch (variant) {\n      case \"h1\":\n        return (\n          <StyledH1\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH1>\n        );\n      case \"h2\":\n        return (\n          <StyledH2\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH2>\n        );\n      case \"h3\":\n        return (\n          <StyledH3\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH3>\n        );\n      case \"h4\":\n        return (\n          <StyledH4\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH4>\n        );\n      case \"h5\":\n        return (\n          <StyledH5\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH5>\n        );\n      case \"h6\":\n        return (\n          <StyledH6\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH6>\n        );\n      case \"div\":\n        return (\n          <StyledDiv\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledDiv>\n        );\n      case \"paragraph\":\n        return (\n          <StyledP\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledP>\n        );\n      case \"label\":\n        return (\n          <StyledLabel\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledLabel>\n        );\n      case \"span\":\n        return (\n          <StyledSpan\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledSpan>\n        );\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link\n          rel=\"preconnect\"\n          href=\"https://fonts.gstatic.com\"\n          crossOrigin=\"\"\n        />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Varela+Round&display=swap\"\n          rel=\"stylesheet\"\n        />\n      </Helmet>\n      {_Text()}\n    </>\n  );\n};\nexport default Text;\n\nconst commonStyles = `\n  padding: 0;\n  margin: 0;\n`;\nconst StyledH1 = styled.h1<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2.25rem\"\n        : \"2rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"4rem\"\n      : props.$size === \"medium\"\n        ? \"3.5rem\"\n        : \"3rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${commonStyles}\n`;\nconst StyledH2 = styled.h2<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"2.25rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3.5rem\"\n      : props.$size === \"medium\"\n        ? \"3rem\"\n        : \"2.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH3 = styled.h3<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3rem\"\n      : props.$size === \"medium\"\n        ? \"2.5rem\"\n        : \"2rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH4 = styled.h4<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH5 = styled.h5<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.5rem\"\n      : props.$size === \"medium\"\n        ? \"1.25rem\"\n        : \"1rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH6 = styled.h6<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledDiv = styled.div<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledLabel = styled.label<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledSpan = styled.span<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledP = styled.p<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\n"],"names":[],"sourceRoot":""}