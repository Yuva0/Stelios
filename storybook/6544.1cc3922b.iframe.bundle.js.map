{"version":3,"file":"6544.1cc3922b.iframe.bundle.js","mappings":";;AAgLA;;;AAIA;;;AAGA;;;AAIA;AACA;;;AAGA;;;;;;;AAQA;AAcA;;;;;;;;AASA;AA6EA;ACxCA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA","sources":["webpack://stelios/./src/components/Input/Input.tsx","webpack://stelios/./src/components/Text/Text.tsx"],"sourcesContent":["import React, { forwardRef, useImperativeHandle } from \"react\";\nimport {\n  InputProps,\n  InputStyleIconProps,\n  InputStyleContentProps,\n  InputStyleProps,\n} from \"./Input.types\";\nimport Text from \"../Text/Text\";\nimport styled from \"styled-components\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport { getColorPalette } from \"../../helpers/helpers\";\n\nconst Input = forwardRef<HTMLDivElement, InputProps>(\n  (\n    {\n      placeholder,\n      color = colorTokens.default.primary.main,\n      label,\n      type = \"text\",\n      size = \"medium\",\n      width = \"15rem\",\n      fullWidth,\n      value,\n      leadingIcon,\n      trailingIcon,\n      labelPosition = \"top\",\n      cursor = \"text\",\n      disableSearch,\n      style,\n      className,\n      inputStyle,\n      disabled = false,\n      variant = \"contained\",\n      containerRef,\n\n      // Events\n      onChange,\n      onClick,\n      onKeyDown,\n\n      // Test Props\n      \"data-testid\": dataTestId,\n      \"data-testid-input\": dataTestIdInput,\n      \"data-testid-leading-icon\": dataTestIdLeadingIcon,\n      \"data-testid-trailing-icon\": dataTestIdTrailingIcon,\n      ...props\n    }: InputProps,\n    ref\n  ) => {\n    const inputRef = React.useRef<HTMLInputElement>(null);\n    useImperativeHandle(ref, () => inputRef.current!, [inputRef]);\n    const _containerRef = React.useRef<HTMLDivElement>(null);\n    useImperativeHandle(containerRef, () => _containerRef.current!, [\n      _containerRef,\n    ]);\n    const [inputValue, setInputValue] = React.useState<string | string[]>(\n      value ?? \"\"\n    );\n    React.useEffect(() => {\n      setInputValue(value ?? \"\");\n    }, [value]);\n\n    const theme = useTheme().theme;\n    const colorPalette = getColorPalette(theme, color);\n\n    const Label = label ? (\n      typeof label === \"string\" ? (\n        <StyledLabel>\n          <Text variant=\"label\" size={size}>\n            {label}\n          </Text>\n        </StyledLabel>\n      ) : (\n        label\n      )\n    ) : null;\n\n    const _onClick = (e: React.MouseEvent<HTMLDivElement>) => {\n      inputRef && inputRef.current && inputRef.current.focus();\n      onClick && onClick(e);\n    };\n    const _onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setInputValue(e.target.value);\n      onChange && onChange(e);\n    };\n    const _onKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n      onKeyDown && onKeyDown(e);\n    };\n    const _onFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n      inputRef && inputRef.current && inputRef.current.focus();\n    };\n\n    return (\n      <StyledInput\n        ref={_containerRef}\n        $width={width}\n        style={style}\n        className={className}\n        data-testid={dataTestId}\n        {...props}\n      >\n        {labelPosition && labelPosition === \"top\" ? Label : null}\n        <StyledInputContent\n          tabIndex={0}\n          onClick={_onClick}\n          onFocus={_onFocus}\n          $colorPalette={colorPalette}\n          $color={color}\n          $size={size}\n          $width={width}\n          $hasLeadingIcon={!!leadingIcon}\n          $hasTrailingIcon={!!trailingIcon}\n          $cursor={cursor}\n          $disabled={disabled}\n          $variant={variant}\n          style={inputStyle}\n        >\n          {leadingIcon && (\n            <StyledInputIcon\n              $variant={variant}\n              $colorPalette={colorPalette}\n              $color={color}\n              $size={size}\n              $hasLeadingIcon={!!leadingIcon}\n              $hasTrailingIcon={!!trailingIcon}\n              $width={width}\n              data-testid={dataTestIdLeadingIcon}\n            >\n              {leadingIcon}\n            </StyledInputIcon>\n          )}\n          {!disableSearch ? (\n            <input\n              type={type}\n              value={inputValue}\n              ref={inputRef}\n              placeholder={placeholder}\n              onChange={_onChange}\n              onKeyDown={_onKeyDown}\n              style={inputStyle}\n              data-testid={dataTestIdInput}\n            />\n          ) : (\n            <span\n              className=\"ste-input-content\"\n              style={inputStyle}\n              data-testid={dataTestIdInput}\n            >\n              {value}\n            </span>\n          )}\n          {trailingIcon && (\n            <StyledInputIcon\n              $variant={variant}\n              $colorPalette={colorPalette}\n              $color={color}\n              $size={size}\n              $hasLeadingIcon={!!leadingIcon}\n              $hasTrailingIcon={!!trailingIcon}\n              $width={width}\n              data-testid={dataTestIdTrailingIcon}\n            >\n              {trailingIcon}\n            </StyledInputIcon>\n          )}\n        </StyledInputContent>\n        {labelPosition && labelPosition === \"bottom\" ? Label : null}\n      </StyledInput>\n    );\n  }\n);\nexport default React.memo(Input);\n\nconst StyledLabel = styled.span`\n  margin-left: 4px;\n`;\nconst StyledInput = styled.div<InputStyleProps>`\n  display: flex;\n  flex-direction: column;\n  width: ${(props) => props.$width};\n  gap: 4px;\n  user-select: none;\n`;\nconst StyledInputIcon = styled.div<InputStyleIconProps>`\n  cursor: pointer;\n  flex: 1 0 auto;\n  width: ${(props) => sizeHandler(props.$size).iconSize};\n  height: ${(props) => sizeHandler(props.$size).iconSize};\n  padding: 0.25rem;\n  &:hover {\n    background-color: ${(props) =>\n      props.$colorPalette[props.$color].grayScale[2]};\n    border-radius: 50%;\n  }\n  & svg {\n    width: 100%;\n    height: 100%;\n  }\n  ${(props) => {\n    const properties = styledIconHandler(\n      props.$variant,\n      props.$colorPalette,\n      props.$color,\n      props.$size\n    );\n    return `\n      color: ${properties.color.default};\n      &:hover {\n        background-color: ${properties.iconHover};\n      }\n    `;\n  }}\n`;\nconst StyledInputContent = styled.div<InputStyleContentProps>`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n  border-radius: 8px;\n\n  ${(props) => {\n    const properties = styledHandler(\n      props.$variant,\n      props.$colorPalette,\n      props.$color,\n      props.$size,\n      props.$hasLeadingIcon,\n      props.$hasTrailingIcon\n    );\n    return `\n      cursor: ${props.$cursor};\n      background-color: ${properties.backgroundColor.default};\n      border: ${properties.border.default};\n      padding: ${properties.padding};\n\n      &:hover {\n        background-color: ${properties.backgroundColor.hover};\n        color: ${properties.color.hover};\n        border: ${properties.border.hover};\n        & input{\n          color: ${properties.color.hover};\n          background-color: ${properties.backgroundColor.hover};\n        }\n\n        & span.ste-input-content {\n          color: ${properties.color.hover};\n          background-color: ${properties.backgroundColor.hover};\n        }\n      }\n      &:active {\n        background-color: ${properties.backgroundColor.active};\n        color: ${properties.color.active};\n        border: ${properties.border.active};\n        & input{\n          color: ${properties.color.active};\n          background-color: ${properties.backgroundColor.active};\n        }\n\n        & span.ste-input-content {\n          color: ${properties.color.active};\n          background-color: ${properties.backgroundColor.active};\n        }\n      }\n\n      & input{\n        padding: 0;\n        margin: 0;\n        border: 0;\n        width: 100%;\n        cursor: ${props.$cursor};\n        line-height: ${properties.lineHeight};\n        font-size: ${properties.fontSize};\n        font-family: 'Varela Round', sans-serif;\n        background-color: ${properties.backgroundColor.default};\n        color: ${properties.color.default};\n\n        &:focus-visible {\n          outline: none;\n        }\n        &::placeholder {\n          color: ${properties.placeholder.default};\n          font-style: italic;\n        }\n      }\n\n      & span.ste-input-content {\n        height: ${properties.lineHeight};\n        font-size: ${properties.fontSize};\n        line-height: ${properties.lineHeight};\n        width: 100%;\n        font-size: ${properties.fontSize};\n        font-family: 'Varela Round', sans-serif;\n        background-color: ${properties.backgroundColor.default};\n        color: ${properties.color.default};\n      }\n    `;\n  }}\n`;\n\nconst styledHandler = (\n  variant: InputStyleContentProps[\"$variant\"],\n  colorPalette: InputStyleContentProps[\"$colorPalette\"],\n  color: InputStyleContentProps[\"$color\"],\n  size: InputStyleContentProps[\"$size\"],\n  hasLeadingIcon?: boolean,\n  hasTrailingIcon?: boolean\n) => {\n  return {\n    ...variantHandler(variant, colorPalette, color),\n    ...sizeHandler(size),\n    ...paddingHandler(size, hasLeadingIcon, hasTrailingIcon),\n  };\n};\nconst styledIconHandler = (\n  variant: InputStyleIconProps[\"$variant\"],\n  colorPalette: InputStyleContentProps[\"$colorPalette\"],\n  color: InputStyleContentProps[\"$color\"],\n  size: InputStyleContentProps[\"$size\"]\n) => {\n  return {\n    ...variantHandler(variant, colorPalette, color),\n    ...sizeHandler(size),\n  };\n};\nconst variantHandler = (\n  variant: InputStyleContentProps[\"$variant\"],\n  colorPalette: InputStyleContentProps[\"$colorPalette\"],\n  color: InputStyleContentProps[\"$color\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[8],\n          hover: colorPalette[color].accentScale[9],\n          active: colorPalette[color].accentScale[9],\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n          hover: colorPalette[color].accentContrast,\n          active: colorPalette[color].accentContrast,\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[8]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[8]}`,\n          active: `2px solid ${colorPalette[color].accentScale[8]}`,\n        },\n        placeholder: {\n          default: colorPalette[color].grayScale[3],\n        },\n        iconHover: colorPalette[color].accentScale[8],\n      };\n    case \"outlined\":\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[11],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[8]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[9]}`,\n          active: `2px solid ${colorPalette[color].accentScale[9]}`,\n        },\n        placeholder: {\n          default: colorPalette[color].accentScale[6],\n        },\n        iconHover: colorPalette[color].grayScale[2],\n      };\n    case \"soft\":\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[3],\n          hover: colorPalette[color].accentScale[4],\n          active: colorPalette[color].accentScale[4],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[11],\n          active: colorPalette[color].accentScale[11],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[7]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[8]}`,\n          active: `2px solid ${colorPalette[color].accentScale[8]}`,\n        },\n        placeholder: {\n          default: colorPalette[color].grayScale[10],\n        },\n        iconHover: colorPalette[color].accentScale[5],\n      };\n  }\n};\nconst sizeHandler = (size: InputStyleContentProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return {\n        fontSize: \"0.875rem\",\n        lineHeight: \"2rem\",\n        iconSize: \"1rem\",\n      };\n    case \"medium\":\n      return {\n        fontSize: \"1rem\",\n        lineHeight: \"2.5rem\",\n        iconSize: \"1.25rem\",\n      };\n    case \"large\":\n      return {\n        fontSize: \"1rem\",\n        lineHeight: \"3rem\",\n        iconSize: \"1.5rem\",\n      };\n  }\n};\nconst paddingHandler = (\n  size?: InputProps[\"size\"],\n  hasLeadingIcon?: boolean,\n  hasTrailingIcon?: boolean\n) => {\n  switch (size) {\n    case \"small\":\n      if (hasLeadingIcon && hasTrailingIcon) return { padding: \"0 8px\" };\n      if (hasLeadingIcon) return { padding: \"0 12px 0 8px\" };\n      if (hasTrailingIcon) return { padding: \"0 8px 0 12px\" };\n      return { padding: \"0 12px\" };\n    case \"medium\":\n      if (hasLeadingIcon && hasTrailingIcon) return { padding: \"0 8px\" };\n      if (hasLeadingIcon) return { padding: \"0 12px 0 8px\" };\n      if (hasTrailingIcon) return { padding: \"0 8px 0 12px\" };\n      return { padding: \"0 16px\" };\n\n    case \"large\":\n      if (hasLeadingIcon && hasTrailingIcon) return { padding: \"0 12px\" };\n      if (hasLeadingIcon) return { padding: \"0 16px 0 12px\" };\n      if (hasTrailingIcon) return { padding: \"0 12px 0 16px\" };\n      return { padding: \"0 16px\" };\n  }\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextProps, TextStyleProps } from \"./Text.types\";\nimport { Helmet } from \"react-helmet\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\ninterface StyledProps {\n  $disableColor?: boolean;\n  $color?: string;\n}\n\nconst Text = ({\n  variant = \"div\",\n  strong,\n  children,\n  align = \"center\",\n  color = colorTokens.default.primary.main,\n  preciseColor,\n  wrap = false,\n  size = \"medium\",\n  disableColor = false,\n  fontSize,\n  lineHeight,\n  style,\n  className,\n  fontFamily,\n  \"data-testid\": dataTestId,\n  ...props\n}: TextProps) => {\n  const theme = useTheme().theme;\n  let _styledProps: StyledProps;\n  if (disableColor) {\n    _styledProps = { $disableColor: disableColor };\n  } else {\n    const colorPalette = getColorPalette(theme, color);\n    const _color = preciseColor ?? colorPalette![color].accentScale[10];\n    _styledProps = { $disableColor: disableColor, $color: _color };\n  }\n\n  const _Text = () => {\n    switch (variant) {\n      case \"h1\":\n        return (\n          <StyledH1\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH1>\n        );\n      case \"h2\":\n        return (\n          <StyledH2\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH2>\n        );\n      case \"h3\":\n        return (\n          <StyledH3\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH3>\n        );\n      case \"h4\":\n        return (\n          <StyledH4\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH4>\n        );\n      case \"h5\":\n        return (\n          <StyledH5\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH5>\n        );\n      case \"h6\":\n        return (\n          <StyledH6\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH6>\n        );\n      case \"div\":\n        return (\n          <StyledDiv\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledDiv>\n        );\n      case \"paragraph\":\n        return (\n          <StyledP\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledP>\n        );\n      case \"label\":\n        return (\n          <StyledLabel\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledLabel>\n        );\n      case \"span\":\n        return (\n          <StyledSpan\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledSpan>\n        );\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link\n          rel=\"preconnect\"\n          href=\"https://fonts.gstatic.com\"\n          crossOrigin=\"\"\n        />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Varela+Round&display=swap\"\n          rel=\"stylesheet\"\n        />\n      </Helmet>\n      {_Text()}\n    </>\n  );\n};\nexport default Text;\n\nconst commonStyles = `\n  padding: 0;\n  margin: 0;\n`;\nconst StyledH1 = styled.h1<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2.25rem\"\n        : \"2rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"4rem\"\n      : props.$size === \"medium\"\n        ? \"3.5rem\"\n        : \"3rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${commonStyles}\n`;\nconst StyledH2 = styled.h2<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"2.25rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3.5rem\"\n      : props.$size === \"medium\"\n        ? \"3rem\"\n        : \"2.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH3 = styled.h3<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3rem\"\n      : props.$size === \"medium\"\n        ? \"2.5rem\"\n        : \"2rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH4 = styled.h4<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH5 = styled.h5<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.5rem\"\n      : props.$size === \"medium\"\n        ? \"1.25rem\"\n        : \"1rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH6 = styled.h6<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledDiv = styled.div<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledLabel = styled.label<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledSpan = styled.span<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledP = styled.p<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? props.$size === \"large\")\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\n"],"names":[],"sourceRoot":""}