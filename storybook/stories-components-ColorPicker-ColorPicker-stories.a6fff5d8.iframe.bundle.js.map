{"version":3,"file":"stories-components-ColorPicker-ColorPicker-stories.a6fff5d8.iframe.bundle.js","mappings":";AAaA;AACA","sources":["webpack://stelios/./src/components/ColorPicker/ColorPicker.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { ChromePicker, ColorResult } from \"react-color\";\nimport { ColorPickerProps, ColorPickerStyleProps } from \"./ColorPicker.types\";\nimport Input from \"../Input/Input\";\nimport styled from \"styled-components\";\nimport { usePopper } from \"react-popper\";\nimport ClickAwayListener from \"../ClickAwayListener/ClickAwayListener\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette, isValidColor } from \"../../helpers/helpers\";\nimport Text from \"../Text/Text\";\n\nconst StyledChromePickerCtr = styled.div<ColorPickerStyleProps>`\n  display: ${(props) => (props.$open ? \"block\" : \"none\")};\n`;\n\nconst ColorPicker = ({\n  label,\n  color = colorTokens.default.primary.main,\n  open = false,\n  size,\n  width,\n  variant = \"outlined\",\n  onChange,\n  errorMessage,\n  \"data-testid\": dataTestId,\n  \"data-testid-input\": dataTestIdInput,\n  \"data-testid-popup\": dataTestIdPopup,\n  \"data-testid-leading-icon\": dataTestIdLeadingIcon,\n  ...props\n}: ColorPickerProps) => {\n  const [isOpen, setIsOpen] = useState(open);\n  const anchorElement = useRef<HTMLDivElement | null>(null);\n  const popperElement = useRef<HTMLDivElement | null>(null);\n\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n  const [innerColor, setInnerColor] = useState<string>(\n    colorPalette![color].main\n  );\n  const [_errorMessage, setErrorMessage] = useState<\n    React.ReactNode | undefined\n  >(errorMessage);\n\n  React.useEffect(() => {\n    const colorPalette = getColorPalette(theme, color);\n    setInnerColor(colorPalette![color].main);\n  }, [color, theme]);\n\n  useEffect(() => {\n    setIsOpen(open);\n  }, [open]);\n\n  const { styles, attributes } = usePopper(\n    anchorElement.current,\n    popperElement.current,\n    {\n      placement: \"bottom-start\",\n      modifiers: [\n        {\n          name: \"offset\",\n          options: {\n            offset: [0, 2.5],\n          },\n        },\n      ],\n    }\n  );\n\n  const _onChange = (color: ColorResult) => {\n    setErrorMessage(undefined);\n    setInnerColor(color.hex);\n    onChange && onChange(color.hex);\n  };\n\n  const _onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!isValidColor(e.target.value)) {\n      setErrorMessage(\"Invalid color\");\n      return;\n    }\n    setErrorMessage(undefined);\n    setInnerColor(e.target.value);\n    onChange && onChange(e.target.value);\n  };\n\n  const _onInputClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleClickAway = useCallback(() => {\n    setIsOpen(false);\n  }, []);\n\n  return (\n    <ClickAwayListener onClickAway={handleClickAway}>\n      <Input\n        variant={variant}\n        width={width}\n        size={size}\n        label={label}\n        containerRef={anchorElement}\n        value={innerColor}\n        onChange={_onInputChange}\n        onClick={_onInputClick}\n        color={color}\n        leadingIcon={\n          <div\n            data-testid={dataTestIdLeadingIcon}\n            onClick={() => setIsOpen(!isOpen)}\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n              backgroundColor: innerColor,\n              borderRadius: \"4px\",\n            }}\n          />\n        }\n        data-testid={dataTestId}\n        data-testid-input={dataTestIdInput}\n        {...props}\n      />\n      <StyledChromePickerCtr\n        ref={popperElement}\n        $open={isOpen}\n        style={{ ...styles.popper }}\n        data-testid={dataTestIdPopup}\n        {...attributes.popper}\n      >\n        <ChromePicker disableAlpha color={innerColor} onChange={_onChange} />\n      </StyledChromePickerCtr>\n      <div style={{ height: \"20px\" }}>\n        <Text color={color} size=\"small\">\n          {_errorMessage}\n        </Text>\n      </div>\n    </ClickAwayListener>\n  );\n};\n\nexport default ColorPicker;\n"],"names":[],"sourceRoot":""}