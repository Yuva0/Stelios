{"version":3,"file":"stories-components-Radio-Radio-stories.842fc513.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;AA2FA;AACA;;AAEA;;;AAIA;AACA;;;AAGA;;;;;;;;;;;AAYA;;AAGA;;;AC3GA;AAEA;;;;;;ACkBA;;;AAGA;AACA;AC2OA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA","sources":["webpack://stelios/./src/components/Radio/Radio.tsx","webpack://stelios/./src/components/RadioGroup/RadioGroup.tsx","webpack://stelios/./src/components/FormControlLabel/FormControlLabel.tsx","webpack://stelios/./src/components/Text/Text.tsx"],"sourcesContent":["import React, { forwardRef, useEffect, useState } from \"react\";\nimport { RadioProps, RadioStyleProps } from \"./Radio.types\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport styled from \"styled-components\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\nconst Radio = forwardRef(\n  (\n    {\n      index = 0,\n      value = \"\",\n      selected = false,\n      disabled = false,\n      name,\n      id,\n      className,\n      style,\n      size = \"medium\",\n      color = colorTokens.default.primary.main,\n      focused,\n\n      //Events\n      onChange,\n      getSelectedIndex,\n      \"data-testid\": dataTestId,\n      ...props\n    }: RadioProps,\n    ref\n  ) => {\n    const innerRef = React.useRef<HTMLInputElement>(null);\n    const _ref = (ref ?? innerRef) as React.RefObject<HTMLInputElement>;\n    const [isSelected, setIsSelected] = useState(selected);\n\n    useEffect(() => {\n      setIsSelected(selected);\n    }, [selected, focused]);\n\n    const theme = useTheme().theme;\n    const colorPalette = getColorPalette(theme,color);\n\n    // Events\n    const _onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      getSelectedIndex && getSelectedIndex(index);\n      onChange && onChange(event);\n    };\n\n    return (\n      <StyledRadio\n        role=\"radio\"\n        $selected={isSelected}\n        $disabled={disabled}\n        $size={size}\n        $color={color}\n        $colorPalette={colorPalette}\n        aria-checked={isSelected}\n        className={`${className}`}\n        style={style}\n        data-testid={dataTestId}\n        {...props}\n      >\n        <input\n          ref={_ref}\n          type=\"radio\"\n          checked={isSelected}\n          name={name}\n          onChange={_onChange}\n        />\n        <span></span>\n      </StyledRadio>\n    );\n  }\n);\nexport default React.memo(Radio);\n\n\nconst StyledRadio = styled.span<RadioStyleProps>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: fit-content;\n  cursor: pointer;\n  padding: 0.5rem;\n  border-radius: 50%;\n  & input[type=\"radio\"] {\n    position: absolute;\n    opacity: 0;\n    cursor: pointer;\n  }\n  & input[type=\"radio\"] + span {\n    position: relative;\n    width: ${(props) => getSize(props.$size)}rem;\n    height: ${(props) => getSize(props.$size)}rem;\n    border-radius: 50%;\n    border: ${(props) =>\n      `1.5px solid ${props.$colorPalette[props.$color].accentScale[8]}`};\n  }\n  & input[type=\"radio\"]:checked + span {\n    width: ${(props) => getSize(props.$size)}rem;\n    height: ${(props) => getSize(props.$size)}rem;\n    border-radius: 50%;\n    position: relative;\n    border: ${(props) =>\n      `1.5px solid ${props.$colorPalette[props.$color].accentScale[8]}`};\n  }\n  & input[type=\"radio\"]:checked + span:after {\n    content: \"\";\n    position: absolute;\n    width: 75%;\n    height: 75%;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    border-radius: 50%;\n    background-color: ${(props) =>\n      props.$colorPalette[props.$color].accentScale[8]};\n  }\n`;\nconst getSize = (size: RadioStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return 0.875;\n    case \"medium\":\n      return 1;\n    case \"large\":\n      return 1.5;\n  }\n};","import React, { useState } from \"react\";\nimport { RadioGroupProps, RadioGroupStyleProps } from \"./RadioGroup.types\";\nimport Text from \"../Text/Text\";\nimport { getIncrementalGeneratedId } from \"../../helpers/helpers\";\nimport styled from \"styled-components\";\nimport colorTokens from \"../../tokens/colors.json\";\n\nconst StyledRadioGroup = styled.div<RadioGroupStyleProps>`\n  display: flex;\n  gap: 0.5rem;\n  flex-direction: ${(props) =>\n    props.$orientation === \"vertical\" ? \"column\" : \"row\"};\n`;\n\nconst RadioGroup = ({\n  name,\n  value,\n  size = \"medium\",\n  color = colorTokens.default.primary.main,\n  disabled,\n  children,\n  label,\n  orientation = \"vertical\",\n  // Events\n  onChange,\n  className,\n  style,\n  \"data-testid\": dataTestId,\n  ...props\n}: RadioGroupProps) => {\n  const [finalName, setFinalName] = React.useState(name);\n  const [selectedIndex, setSelectedIndex] = useState<number | null>(null);\n  const [focusedIndex, setFocusedIndex] = useState<number>(selectedIndex ?? 0);\n\n  React.useEffect(() => {\n    if (!name) {\n      setFinalName(\"radio-\" + getIncrementalGeneratedId());\n    }\n  }, [name]);\n\n  const [filteredChildren, setFilteredChildren] = useState<\n    React.ReactNode | React.ReactNode[]\n  >(null);\n\n  const _getSelectedIndex = (index: number) => {\n    setSelectedIndex(index);\n    setFocusedIndex(index);\n  };\n\n  const Label = label ? (\n    typeof label === \"string\" ? (\n      <Text variant=\"label\" size={size} color={color}>\n        {label}\n      </Text>\n    ) : (\n      label\n    )\n  ) : null;\n\n  React.useEffect(() => {\n    setFilteredChildren(() => {\n      if (!children) return null;\n      return React.Children.map(children, (child, index) => {\n        if (!child) return null;\n        if (React.isValidElement(child) && child.type) {\n          const childElement = child as React.ReactElement;\n          const childType = childElement.type;\n          if (\n            (childType as React.ComponentType<any>).name === \"Radio\" ||\n            (childType as React.ComponentType<any>).name === \"FormControlLabel\"\n          ) {\n            return React.cloneElement(childElement, {\n              name: finalName,\n              index,\n              selected: selectedIndex === index,\n              ...(!childElement.props.size && size && { size }),\n              ...(!childElement.props.color && color && { color }),\n              ...(!childElement.props.disabled && disabled && { disabled }),\n              focused: focusedIndex === index,\n              getSelectedIndex: _getSelectedIndex,\n            });\n          }\n        }\n      });\n    });\n  }, [\n    finalName,\n    value,\n    size,\n    color,\n    disabled,\n    children,\n    selectedIndex,\n    focusedIndex,\n  ]);\n\n  return (\n    <StyledRadioGroup\n      $orientation={orientation}\n      role=\"radiogroup\"\n      className={className}\n      style={style}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {Label}\n      {filteredChildren}\n    </StyledRadioGroup>\n  );\n};\n\nexport default RadioGroup;\n","import React from \"react\";\n\nimport {\n  FormControlLabelProps,\n  FormControlLabelStyleProps,\n} from \"./FormControlLabel.types\";\nimport Text from \"../Text/Text\";\nimport styled from \"styled-components\";\n\nconst getFlexDirection = (\n  labelPlacement?: \"start\" | \"end\" | \"top\" | \"bottom\"\n) => {\n  switch (labelPlacement) {\n    case \"start\":\n      return \"row-reverse\";\n    case \"end\":\n      return \"row\";\n    case \"top\":\n      return \"column-reverse\";\n    case \"bottom\":\n      return \"column\";\n  }\n};\n\nconst StyledFormControl = styled.label<FormControlLabelStyleProps>`\n  display: inline-flex;\n  width: fit-content;\n  align-items: center;\n  justify-content: center;\n  vertical-align: middle;\n  gap: ${(props) => props.$gap}px;\n  cursor: pointer;\n  user-select: none;\n  flex-direction: ${(props) => getFlexDirection(props.$labelPlacement)};\n`;\n\nconst FormControlLabel: React.FC<FormControlLabelProps> = ({\n  control,\n  label,\n  labelPlacement = \"end\",\n  size = \"medium\",\n  gap = 4,\n  disabled = false,\n  color,\n  \"data-testid\": dataTestId,\n  ...props\n}) => {\n  const _disabled = control.props.disabled || disabled;\n\n  return (\n    <StyledFormControl\n      $gap={gap}\n      $labelPlacement={labelPlacement}\n      $disabled={_disabled}\n      $size={size}\n      data-testid={dataTestId}\n    >\n      {React.cloneElement(control, {\n        ...(!control.props.size && size && { size }),\n        ...(!control.props.size && color && { color }),\n        ...props,\n      })}\n      <span>\n        {typeof label === \"string\" ? (\n          <Text color={color} variant=\"paragraph\" size={size}>\n            {label}\n          </Text>\n        ) : (\n          label\n        )}\n      </span>\n    </StyledFormControl>\n  );\n};\n\nexport default FormControlLabel;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextProps, TextStyleProps } from \"./Text.types\";\nimport { Helmet } from \"react-helmet\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\ninterface StyledProps {\n  $disableColor?: boolean;\n  $color?: string;\n}\n\nconst Text = ({\n  variant = \"div\",\n  strong,\n  children,\n  align = \"center\",\n  color = colorTokens.default.primary.main,\n  preciseColor,\n  wrap = false,\n  size = \"medium\",\n  disableColor = false,\n  fontSize,\n  lineHeight,\n  style,\n  className,\n  fontFamily,\n  \"data-testid\": dataTestId,\n  ...props\n}: TextProps) => {\n  const theme = useTheme().theme;\n  let _styledProps: StyledProps;\n  if (disableColor) {\n    _styledProps = { $disableColor: disableColor };\n  } else {\n    const colorPalette = getColorPalette(theme, color);\n    const _color = preciseColor ?? colorPalette![color].accentScale[10];\n    _styledProps = { $disableColor: disableColor, $color: _color };\n  }\n\n  const _Text = () => {\n    switch (variant) {\n      case \"h1\":\n        return (\n          <StyledH1\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH1>\n        );\n      case \"h2\":\n        return (\n          <StyledH2\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH2>\n        );\n      case \"h3\":\n        return (\n          <StyledH3\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH3>\n        );\n      case \"h4\":\n        return (\n          <StyledH4\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH4>\n        );\n      case \"h5\":\n        return (\n          <StyledH5\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH5>\n        );\n      case \"h6\":\n        return (\n          <StyledH6\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH6>\n        );\n      case \"div\":\n        return (\n          <StyledDiv\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledDiv>\n        );\n      case \"paragraph\":\n        return (\n          <StyledP\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledP>\n        );\n      case \"label\":\n        return (\n          <StyledLabel\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledLabel>\n        );\n      case \"span\":\n        return (\n          <StyledSpan\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledSpan>\n        );\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link\n          rel=\"preconnect\"\n          href=\"https://fonts.gstatic.com\"\n          crossOrigin=\"\"\n        />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Alegreya:wght@400;700&family=Varela+Round&display=swap\"\n          rel=\"stylesheet\"\n        />\n      </Helmet>\n      {_Text()}\n    </>\n  );\n};\nexport default Text;\n\nconst commonStyles = `\n  padding: 0;\n  margin: 0;\n`;\nconst StyledH1 = styled.h1<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2.25rem\"\n        : \"2rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"4rem\"\n      : props.$size === \"medium\"\n        ? \"3.5rem\"\n        : \"3rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${commonStyles}\n`;\nconst StyledH2 = styled.h2<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"2.25rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3.5rem\"\n      : props.$size === \"medium\"\n        ? \"3rem\"\n        : \"2.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH3 = styled.h3<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3rem\"\n      : props.$size === \"medium\"\n        ? \"2.5rem\"\n        : \"2rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH4 = styled.h4<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH5 = styled.h5<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.5rem\"\n      : props.$size === \"medium\"\n        ? \"1.25rem\"\n        : \"1rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH6 = styled.h6<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledDiv = styled.div<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledLabel = styled.label<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledSpan = styled.span<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledP = styled.p<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\n"],"names":[],"sourceRoot":""}