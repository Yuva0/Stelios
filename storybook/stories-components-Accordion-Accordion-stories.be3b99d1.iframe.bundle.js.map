{"version":3,"file":"stories-components-Accordion-Accordion-stories.be3b99d1.iframe.bundle.js","mappings":";;;;;AA4CA;;AAGA;;;AC8BA;;;;;;;AASA;AA4BA;;;;;;;;AAoIA;AAYA;ACUA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA","sources":["webpack://stelios/./src/components/Accordion/Accordion.tsx","webpack://stelios/./src/components/Accordion/AccordionItem/AccordionItem.tsx","webpack://stelios/./src/components/Text/Text.tsx"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { AccordionProps, AccordionStyleProps } from \"./Accordion.types\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport colors from \"../../tokens/colors.json\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport { AccordionItemProps } from \"./AccordionItem/AccordionItem.types\";\n\nconst Accordion = ({\n  children,\n  variant = \"contained\",\n  width,\n  color = colors.default.primary.main,\n  isFullWidth = false,\n  \"data-testid\": dataTestId,\n}: AccordionProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  return (\n    <StyledAccordion\n      $variant={variant}\n      $width={width}\n      $color={color}\n      $colorPalette={colorPalette}\n      $isFullWidth={isFullWidth}\n      data-testid={dataTestId}\n    >\n      {React.Children.map(children, (child) => {\n        if (!React.isValidElement(child)) return child;\n        return React.cloneElement(child, {\n          ...(!child.props.variant && variant && { variant: variant }),\n          ...(!child.props.color && color && { color: color }),\n        } as AccordionItemProps);\n      })}\n    </StyledAccordion>\n  );\n};\nexport default Accordion;\n\nconst StyledAccordion = styled.div<AccordionStyleProps>`\n  display: flex;\n  flex-direction: column;\n  border-radius: 0.25rem;\n  width: ${({ $width, $isFullWidth }) =>\n    $width ?? ($isFullWidth ? \"100%\" : \"400px\")};\n  max-width: 100%;\n`;\n","import React from \"react\";\nimport {\n  AccordionItemContentStyleProps,\n  AccordionItemProps,\n  AccordionItemStyleProps,\n} from \"./AccordionItem.types\";\nimport styled from \"styled-components\";\nimport Text from \"../../Text/Text\";\nimport { IconChevronDown, IconChevronUp } from \"@tabler/icons-react\";\nimport { useTheme } from \"../../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../../helpers/helpers\";\nimport colorTokens from \"../../../tokens/colors.json\";\n\nconst AccordionItem = ({\n  title,\n  children,\n  expanded,\n  variant = \"contained\",\n  color = colorTokens.default.primary.main,\n  \"data-testid\": dataTestId,\n  \"data-testid-title\": dataTestIdTitle,\n  ...props\n}: AccordionItemProps) => {\n  const accordionItemRef = React.useRef<HTMLDivElement>(null);\n  const [isExpanded, setIsExpanded] = React.useState(expanded);\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  const _onTitleClick = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  const AccordionItemTitle = () => {\n    if (!title) return null;\n    const titleContent =\n      typeof title === \"string\" ? (\n        <Text disableColor variant=\"paragraph\">{title}</Text>\n      ) : (\n        title\n      );\n    return (\n      <StyledAccordionItemTitle\n        $color={color}\n        $variant={variant}\n        $colorPalette={colorPalette}\n        $expanded={isExpanded}\n        onClick={_onTitleClick}\n        data-testid={dataTestIdTitle}\n      >\n        {titleContent}\n        {isExpanded ?  <IconChevronUp/> : <IconChevronDown />}\n      </StyledAccordionItemTitle>\n    );\n  };\n\n  return (\n    <StyledAccordionItem data-testid={dataTestId} aria-expanded={isExpanded} {...props}>\n      <AccordionItemTitle/>\n      {isExpanded && <StyledAccordionItemContent\n        ref={accordionItemRef}\n        $variant={variant}\n        $color={color}\n        $colorPalette={colorPalette}\n        $expanded={isExpanded}\n      >\n        {\n          typeof children === \"string\" ? (<Text disableColor variant=\"paragraph\">{children}</Text>) : children\n        }\n      </StyledAccordionItemContent>}\n    </StyledAccordionItem>\n  );\n};\nexport default AccordionItem;\n\nconst StyledAccordionItem = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledAccordionItemTitle = styled.div<AccordionItemStyleProps>`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem 1rem;\n\n  ${props => {\n    const properties = propsTitleHandler(props.$variant, props.$color, props.$colorPalette, props.$expanded);\n    return `\n      background-color: ${properties.backgroundColor.default};\n      color: ${properties.color.default};\n      border: ${properties.border.default};\n      cursor: pointer;\n      user-select: none;\n\n      &:hover {\n        background-color: ${properties.backgroundColor.hover};\n        color: ${properties.color.hover};\n        border: ${properties.border.hover};\n        ${properties.filter ? `filter: ${properties.filter.hover}`:\"\"};\n      }\n      &:active {\n        background-color: ${properties.backgroundColor.active};\n        color: ${properties.color.active};\n        border: ${properties.border.active};\n        ${properties.filter ? `filter: ${properties.filter.active}`:\"\"};\n      }\n      & svg{\n        width: 20px;\n        height: 20px;\n        color: ${properties.svg.color.default};\n      }\n    `;\n  }}\n`;\nconst propsTitleHandler = (\n  variant: AccordionItemStyleProps[\"$variant\"],\n  color: string,\n  colorPalette: AccordionItemStyleProps[\"$colorPalette\"],\n  $expanded: AccordionItemStyleProps[\"$expanded\"]\n) => {\n  return {...getVariantTitleProps(variant, color, colorPalette)};\n};\nconst getVariantTitleProps = (\n  variant: AccordionItemStyleProps[\"$variant\"],\n  color: AccordionItemStyleProps[\"$color\"],\n  colorPalette: AccordionItemStyleProps[\"$colorPalette\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[8],\n          hover: colorPalette[color].accentScale[9],\n          active: colorPalette[color].accentScale[9],\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n          hover: colorPalette[color].accentContrast,\n          active: colorPalette[color].accentContrast,\n        },\n        filter: {\n          hover: \"brightness(0.96) saturate(1.1)\",\n          active: \"brightness(0.92) saturate(1.1)\"\n        },\n        border: {\n          default: `1px solid ${colorPalette[color].accentScale[7]}`,\n          hover: `1px solid ${colorPalette[color].accentScale[8]}`,\n          active: `1px solid ${colorPalette[color].accentScale[8]}`\n        },\n        svg: {\n          color: {\n            default: colorPalette[color].accentContrast,\n          }\n        }\n      };\n    case \"outlined\":\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `1px solid ${colorPalette[color].accentScale[6]}`,\n          hover: `1px solid ${colorPalette[color].accentScale[6]}`,\n          active: `1px solid ${colorPalette[color].accentScale[7]}`\n        },\n        svg: {\n          color: {\n            default: colorPalette[color].accentScale[10],\n          }\n        }\n      }\n    case \"soft\":\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n          hover: colorPalette[color].accentScale[3],\n          active: colorPalette[color].accentScale[3],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `1px solid ${colorPalette[color].accentScale[2]}`,\n          hover: `1px solid ${colorPalette[color].accentScale[3]}`,\n          active: `1px solid ${colorPalette[color].accentScale[3]}`\n        },\n        filter: {\n          hover: \"brightness(0.96) saturate(1.1)\",\n          active: \"brightness(0.92) saturate(1.1)\",\n        },\n        svg: {\n          color: {\n            default: colorPalette[color].accentScale[10],\n          }\n        }\n      }\n    case \"outlined-soft\":\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n          hover: colorPalette[color].accentScale[3],\n          active: colorPalette[color].accentScale[3],\n        \n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `1px solid ${colorPalette[color].accentScale[5]}`,\n          hover: `1px solid ${colorPalette[color].accentScale[6]}`,\n          active: `1px solid ${colorPalette[color].accentScale[6]}`\n        },\n        filter: {\n          hover: \"brightness(0.96) saturate(1.1)\",\n          active: \"brightness(0.92) saturate(1.1)\",\n        },\n        svg: {\n          color: {\n            default: colorPalette[color].accentScale[10],\n          }\n        }\n      }\n      \n  }\n};\n\nconst StyledAccordionItemContent = styled.div<AccordionItemContentStyleProps>`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  padding: 0.5rem 1rem 1rem 1rem;\n  overflow: hidden;\n  transition: height 0.3s ease-in-out;\n\n  ${props => {\n    const properties = propsContentHandler(props.$variant, props.$color, props.$colorPalette);\n    return `\n      color: ${properties.color.default};\n      background-color: ${properties.backgroundColor.default};\n      border-left: ${properties.borderLeft.default};\n      border-right: ${properties.borderRight.default};\n      &:last-child {\n        border-bottom: ${properties.borderLeft.default};\n      }\n    `;\n  }}\n`;\nconst propsContentHandler = (\n  variant: AccordionItemContentStyleProps[\"$variant\"],\n  color: AccordionItemContentStyleProps[\"$color\"],\n  colorPalette: AccordionItemContentStyleProps[\"$colorPalette\"],\n) => {\n  return {...getContentVariantProps(variant, color, colorPalette)};\n}\nconst getContentVariantProps = (\n  variant: AccordionItemContentStyleProps[\"$variant\"],\n  color: AccordionItemContentStyleProps[\"$color\"],\n  colorPalette: AccordionItemContentStyleProps[\"$colorPalette\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[8],\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n        },\n        borderLeft: {\n          default: `2px solid ${colorPalette[color].accentScale[8]}`,\n        },\n        borderRight: {\n          default: `2px solid ${colorPalette[color].accentScale[8]}`,\n        }\n      };\n    case \"outlined\":\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n        },\n        borderLeft: {\n          default: `2px solid ${colorPalette[color].accentScale[6]}`,\n        },\n        borderRight: {\n          default: `2px solid ${colorPalette[color].accentScale[6]}`,\n        }\n      }\n    case \"soft\":\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n        },\n        borderLeft: {\n          default: `2px solid ${colorPalette[color].accentScale[2]}`,\n        },\n        borderRight: {\n          default: `2px solid ${colorPalette[color].accentScale[2]}`,\n        }\n      }\n    case \"outlined-soft\":\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n        },\n        borderLeft: {\n          default: `2px solid ${colorPalette[color].accentScale[5]}`,\n        },\n        borderRight: {\n          default: `2px solid ${colorPalette[color].accentScale[5]}`,\n        }\n      }\n  }\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextProps, TextStyleProps } from \"./Text.types\";\nimport { Helmet } from \"react-helmet\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\ninterface StyledProps {\n  $disableColor?: boolean;\n  $color?: string;\n}\n\nconst Text = ({\n  variant = \"div\",\n  strong,\n  children,\n  align = \"center\",\n  color = colorTokens.default.primary.main,\n  preciseColor,\n  wrap = false,\n  size = \"medium\",\n  disableColor = false,\n  fontSize,\n  lineHeight,\n  style,\n  className,\n  fontFamily,\n  ...rest\n}: TextProps) => {\n  const theme = useTheme().theme;\n  let _styledProps: StyledProps;\n  if (disableColor) {\n    _styledProps = { $disableColor: disableColor };\n  } else {\n    const colorPalette = getColorPalette(theme, color);\n    const _color = preciseColor ?? (color && colorPalette\n      ? colorPalette[color].accentScale[10]\n      : color);\n    _styledProps = { $disableColor: disableColor, $color: _color };\n  }\n\n  const _Text = () => {\n    switch (variant) {\n      case \"h1\":\n        return (\n          <StyledH1\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH1>\n        );\n      case \"h2\":\n        return (\n          <StyledH2\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH2>\n        );\n      case \"h3\":\n        return (\n          <StyledH3\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH3>\n        );\n      case \"h4\":\n        return (\n          <StyledH4\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH4>\n        );\n      case \"h5\":\n        return (\n          <StyledH5\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH5>\n        );\n      case \"h6\":\n        return (\n          <StyledH6\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH6>\n        );\n      case \"div\":\n        return (\n          <StyledDiv\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledDiv>\n        );\n      case \"paragraph\":\n        return (\n          <StyledP\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledP>\n        );\n      case \"label\":\n        return (\n          <StyledLabel\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledLabel>\n        );\n      case \"span\":\n        return (\n          <StyledSpan\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledSpan>\n        );\n      default:\n        return (\n          <StyledDiv\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            style={style}\n            className={className}\n            {...rest}\n            {..._styledProps}\n          >\n            {children}\n          </StyledDiv>\n        );\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link\n          rel=\"preconnect\"\n          href=\"https://fonts.gstatic.com\"\n          crossOrigin=\"\"\n        />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Varela+Round&display=swap\"\n          rel=\"stylesheet\"\n        />\n      </Helmet>\n      {_Text()}\n    </>\n  );\n};\nexport default Text;\n\nconst commonStyles = `\n  padding: 0;\n  margin: 0;\n`;\nconst StyledH1 = styled.h1<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2.25rem\"\n        : \"2rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$lineHeight === \"large\"\n      ? \"4rem\"\n      : props.$size === \"medium\"\n        ? \"3.5rem\"\n        : \"3rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${commonStyles}\n`;\nconst StyledH2 = styled.h2<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"2.25rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$size === \"large\"\n      ? \"3.5rem\"\n      : props.$size === \"medium\"\n        ? \"3rem\"\n        : \"2.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH3 = styled.h3<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$size === \"large\"\n      ? \"3rem\"\n      : props.$size === \"medium\"\n        ? \"2.5rem\"\n        : \"2rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH4 = styled.h4<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$size === \"large\"\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH5 = styled.h5<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"1.5rem\"\n      : props.$size === \"medium\"\n        ? \"1.25rem\"\n        : \"1rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$size === \"large\"\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH6 = styled.h6<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$size === \"large\"\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `\"Lato\", sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledDiv = styled.div<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$size === \"large\"\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledLabel = styled.label<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$size === \"large\"\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledSpan = styled.span<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$size === \"large\"\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledP = styled.p<TextStyleProps>`\n  font-size: ${(props) =>\n    props.$fontSize ?? props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"};\n  line-height: ${(props) =>\n    props.$lineHeight ?? props.$size === \"large\"\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\n"],"names":[],"sourceRoot":""}