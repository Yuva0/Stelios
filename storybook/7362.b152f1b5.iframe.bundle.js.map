{"version":3,"file":"7362.b152f1b5.iframe.bundle.js","mappings":";;;;;AAqDA;AAkBA;;;;;;;;;ACoBA;AAWA;;;;AAiFA;;;;;;AAOA;;;;;;;AAQA;;;;;;;;AASA;;;;AC9JA;AACA;AACA;;;;;ACiBA;AA8BA;;;;ACXA;AA2CA;AAEA;;;;;AAWA;;;;AC5EA;AACA;;;;AAKA;AAEA;;AAEA;;AAGA;;;;;;;;;;;;AAaA;AAKA;AAIA;AAEA;AC3FA;AACA;ACmDA;;AAEA;;;;AAKA;;;AAIA;;;;AAIA;AAEA;;AAEA;;;;AAKA;;;AAIA;;;;AAIA;;;;;;;ACPA;AACA;AACA;AACA;;;;;;ACfA;;;;AAKA;AACA;;;ACtEA;;;;;;AC6DA;AAIA;;;;;;AC4DA;AACA;;;AAIA;AA2BA;;;AAIA;AAuBA;;;AAIA;AAyBA;;;;;;;;;;;;AAaA;;;;AClHA;;;AAGA;;AAEA;AAEA;AAEA;;;;AAKA;;;;AAKA;;;;AAKA;;;;AAKA;AACA;;AAEA;;;;;ACpIA;;;;;;;;;AASA;AAEA;AAEA;;;;AAKA;AAEA;AAEA;;;;AAKA;AAEA;AAEA;;;;;;AAOA;;;AAGA;;;AAGA;;;AAIA","sources":["webpack://stelios/./src/components/Avatar/Avatar.tsx","webpack://stelios/./src/components/Banner/Banner.tsx","webpack://stelios/./src/components/Breadcrumbs/Breadcrumbs.tsx","webpack://stelios/./src/components/Breadcrumbs/BreadcrumbsItem/BreadcrumbsItem.tsx","webpack://stelios/./src/components/Button/Button.tsx","webpack://stelios/./src/components/CodeDisplay/CodeDisplay.tsx","webpack://stelios/./src/components/ColorPicker/ColorPicker.tsx","webpack://stelios/./src/components/Link/Link.tsx","webpack://stelios/./src/components/SideBar/SideBar.tsx","webpack://stelios/./src/components/SideBar/SideBarGroup/SideBarGroup.tsx","webpack://stelios/./src/components/SideBar/SideBarGroupItem/SideBarGroupItem.tsx","webpack://stelios/./src/components/SideBar/SideBarItem/SideBarItem.tsx","webpack://stelios/./src/components/Slider/Slider.tsx","webpack://stelios/./src/components/ToggleButton/ToggleButton.tsx","webpack://stelios/./src/components/ToggleButton/ToggleButtonGroup/ToggleButtonGroup.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { AvatarProps, AvatarStyledProps } from \"./Avatar.types\";\nimport styled from \"styled-components\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport Text from \"../Text/Text\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\n\nconst Avatar: React.FunctionComponent<AvatarProps> = ({\n  src,\n  alt,\n  initials,\n  variant = \"contained\",\n  size = \"medium\",\n  shape = \"rounded\",\n  type = \"image\",\n  color = colorTokens.default.primary.main,\n\n  // Test props\n  \"data-testid\": dataTestId,\n  ...props\n}) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n  const AvatarContent = () => {\n    switch (type) {\n      case \"image\":\n        return <img src={src} alt={alt} />;\n      case \"initials\":\n        const _size = size === \"xlarge\" || size === \"medium\" ? \"large\" : \"medium\";\n        return <Text size={_size} disableColor variant=\"span\">{initials}</Text>;\n    }\n  };\n\n  return (\n    <StyledImgContainer\n      $shape={shape}\n      $size={size}\n      $variant={variant}\n      $colorPalette={colorPalette}\n      $color={color}\n      data-testid={dataTestId}\n      {...props}\n    >\n      <AvatarContent />\n    </StyledImgContainer>\n  );\n};\n\nconst StyledImgContainer = styled.div<AvatarStyledProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  ${(props) => {\n    const properties = styleHandler(props.$size, props.$shape, props.$variant, props.$colorPalette, props.$color);\n    return `\n      border-radius: ${properties.borderRadius};\n      width: ${properties.width};\n      height: ${properties.height};\n      background-color: ${properties.backgroundColor};\n      box-shadow: ${properties.boxShadow};\n      color: ${properties.color};\n      outline: ${properties.outline};\n      & img {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n        border-radius: ${properties.borderRadius};\n      }\n    `;\n  }}\n`;\nconst styleHandler = (\n  size: AvatarStyledProps[\"$size\"],\n  shape: AvatarStyledProps[\"$shape\"],\n  variant: AvatarStyledProps[\"$variant\"],\n  colorPalette: any,\n  color: AvatarStyledProps[\"$color\"]\n) => {\n  return {\n    ...sizeHandler(size),\n    ...shapeHandler(shape),\n    ...variantHandler(variant, colorPalette, color),\n  };\n};\nconst shapeHandler = (shape: AvatarStyledProps[\"$shape\"]) => {\n  switch (shape) {\n    case \"rounded\":\n      return {\n        borderRadius: \"50%\",\n      };\n    case \"square\":\n      return {\n        borderRadius: \"8px\",\n      };\n  }\n};\nconst sizeHandler = (size: AvatarStyledProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return {\n        width: \"3rem\",\n        height: \"3rem\",\n      };\n    case \"medium\":\n      return {\n        width: \"5rem\",\n        height: \"5rem\",\n      };\n    case \"large\":\n      return {\n        width: \"7rem\",\n        height: \"7rem\",\n      };\n    case \"xlarge\":\n      return {\n        width: \"10rem\",\n        height: \"10rem\",\n      };\n  }\n};\nconst variantHandler = (\n  variant: AvatarStyledProps[\"$variant\"],\n  colorPalette: AvatarStyledProps[\"$colorPalette\"],\n  color: AvatarStyledProps[\"$color\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      return {\n        backgroundColor: colorPalette[color].accentScale[8],\n        color: colorPalette[color].accentContrast,\n        outline: \"none\" ,\n        boxShadow: \"none\",\n      };\n    case \"outlined\":\n      return {\n        backgroundColor: \"transparent\",\n        color: colorPalette[color].accentScale[10],\n        outline: `1px solid ${colorPalette[color].accentScale[8]}`,\n        boxShadow: \"none\",\n      };\n    case \"neumorph\":\n      return {\n        backgroundColor: \"transparent\",\n        color: colorPalette[color].accentScale[10],\n        boxShadow: `-6px -6px 14px rgba(255, 255, 255, .7),\n          -6px -6px 10px rgba(255, 255, 255, .5),\n          6px 6px 8px rgba(255, 255, 255, .075),\n          6px 6px 10px rgba(0, 0, 0, .15)`,\n        outline: \"none\",\n      }\n  }\n};\n\nexport default Avatar;\n","import * as React from \"react\";\nimport Text from \"../Text/Text\";\nimport styled from \"styled-components\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport { BannerProps, BannerStyleProps } from \"./Banner.types\";\nimport { getColorPalette } from \"../../helpers/helpers\";\n\nconst Banner: React.FunctionComponent<BannerProps> = ({\n  title,\n  titleIcon,\n  description,\n  leadingIcon,\n  color = colorTokens.default.primary.main,\n  variant = \"contained\",\n  width = \"400px\",\n  style,\n  className,\n  \"data-testid\": dataTestId,\n  \"data-leading-icon\": dataLeadingIcon,\n  ...props\n}: BannerProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme,color);\n\n  const Content = React.useCallback(() => {\n    if (!title && !description) return null;\n\n    const Title = title ? (\n      <StyledTitleContainer>\n        {titleIcon && <StyledTitleIcon>{titleIcon}</StyledTitleIcon>}\n        {typeof title === \"string\" ? (\n          <Text disableColor variant=\"span\" style={{ marginTop: \"0.2rem\" }}>\n            {title}\n          </Text>\n        ) : (\n          title\n        )}\n      </StyledTitleContainer>\n    ) : null;\n\n    const Description =\n      description && typeof description === \"string\" ? (\n        <Text disableColor variant=\"paragraph\" size=\"small\">\n          {description}\n        </Text>\n      ) : (\n        description\n      );\n\n    return (\n      <StyledContentContainer>\n        {Title}\n        {Description}\n      </StyledContentContainer>\n    );\n  }, [title, description, titleIcon]);\n\n  const LeadingIcon = React.useCallback(() => {\n    if (!leadingIcon) return null;\n\n    return <StyledIcon data-testid={dataLeadingIcon}>{leadingIcon}</StyledIcon>;\n  }, [leadingIcon, dataLeadingIcon]);\n\n  return (\n    <StyledBannerContainer\n      style={style}\n      className={className}\n      $width={width}\n      $color={color}\n      $variant={variant}\n      $colorPalette={colorPalette}\n      data-testid={dataTestId}\n      {...props}\n    >\n      <LeadingIcon />\n      <Content />\n    </StyledBannerContainer>\n  );\n};\nexport default Banner;\n\nconst StyledBannerContainer = styled.div<BannerStyleProps>`\n  display: flex;\n  flex-direction: row;\n  box-sizing: border-box;\n  gap: 1rem;\n  justify-content: flex-start;\n  align-items: center;\n  padding: 0.75rem 1rem 1rem 1rem;\n  border-radius: 0.8rem;\n  ${props => {\n    const properties = propsBannerContainerHandler(props.$variant, props.$color, props.$colorPalette);\n    return `\n      background-color: ${properties.background.default};\n      border: ${properties.border.default};\n      border-left: ${properties.borderLeft.default};\n      color: ${properties.color.default};\n      width: ${props.$width};\n      max-width: 100%;\n    `;\n  }}\n`;\nconst propsBannerContainerHandler = (\n  variant: BannerStyleProps[\"$variant\"],\n  color: BannerStyleProps[\"$color\"],\n  colorPalette: BannerStyleProps[\"$colorPalette\"]\n) => {\n  return { ...getVariantProps(variant, color, colorPalette) };\n};\nconst getVariantProps = (\n  variant: BannerStyleProps[\"$variant\"],\n  color: BannerStyleProps[\"$color\"],\n  colorPalette: BannerStyleProps[\"$colorPalette\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      return {\n        background: {\n          default: colorPalette[color].accentScale[8],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[10]}`,\n        },\n        borderLeft: {\n          default: `0.5rem solid ${colorPalette[color].accentScale[10]}`,\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n        }\n      };\n    case \"outlined\":\n      return {\n        background: {\n          default: \"transparent\",\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[8]}`,\n        },\n        borderLeft: {\n          default: `0.5rem solid ${colorPalette[color].accentScale[8]}`,\n        },\n        color: {\n          default: colorPalette[color].accentScale[11],\n        }\n      };\n    case \"soft\":\n      return {\n        background: {\n          default: colorPalette[color].accentScale[2],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[2]}`,\n        },\n        borderLeft: {\n          default: `0.5rem solid ${colorPalette[color].accentScale[6]}`,\n        },\n        color: {\n          default: colorPalette[color].accentScale[11],\n        }\n      };\n    case \"outlined-soft\":\n      return {\n        background: {\n          default: colorPalette[color].accentScale[2],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[8]}`,\n        },\n        borderLeft: {\n          default: `0.5rem solid ${colorPalette[color].accentScale[8]}`,\n        },\n        color: {\n          default: colorPalette[color].accentScale[11],\n        }\n      };\n  }\n}\n\nconst StyledContentContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n`;\nconst StyledTitleContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 0.5rem;\n  flex: 1 1 auto;\n`;\nconst StyledTitleIcon = styled.div`\n  width: 18px;\n  height: 18px;\n  & svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\nconst StyledIcon = styled.div`\n  flex: 0 0 auto;\n  width: 24px;\n  height: 24px;\n  & svg {\n    width: 100%;\n    height: 100%;\n  }\n`;","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport { BreadcrumbsProps } from \"./Breadcrumbs.types\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\n\nconst Breadcrumbs: React.FunctionComponent<BreadcrumbsProps> = ({\n  children,\n  delimiter,\n  color = colorTokens.default.primary.main,\n  size = \"medium\",\n  variant = \"contained\",\n  //Test Props\n  \"data-testid\": dataTestId,\n  ...props\n}) => {\n\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n  \n  return (\n    <div style={{ display: \"inline-flex\", flexWrap: \"wrap\", rowGap: \"0.25rem\" }} data-testid={dataTestId} {...props}>\n      {React.Children.map(children, (child, index) => {\n        if (!React.isValidElement(child)) return child;\n        return (\n          <>\n            {React.cloneElement(child as React.ReactElement, {\n              ...(!child.props.variant && variant && { variant: variant }),\n              ...(!child.props.size && size && { size: size }),\n              ...(!child.props.color && color && { color: color }),\n            })}\n\n            {index < React.Children.count(children) - 1 && (\n              <StyledDelimiterSpan $size={size} $colorPalette={colorPalette} $color={color}>\n                {delimiter ?? \">\"}\n              </StyledDelimiterSpan>\n            )}\n          </>\n        );\n      })}\n    </div>\n  );\n};\n\nconst StyledDelimiterSpan = styled.span<{ $size: BreadcrumbsProps[\"size\"], $colorPalette: any, $color: string }>`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: ${props => sizeHandler(props.$size)};\n  color: ${props => props.$colorPalette[props.$color].accentScale[10]};\n`;\nconst sizeHandler = (size: BreadcrumbsProps[\"size\"]) => {\n  switch (size) {\n    case \"small\":\n      return \"0 0.25rem\";\n    case \"medium\":\n      return \"0 0.25rem\";\n    case \"large\":\n      return \"0 0.5rem\";\n  }\n};\nexport default Breadcrumbs;\n","import * as React from \"react\";\nimport Link from \"../../Link/Link\";\nimport Text from \"../../Text/Text\";\nimport colorTokens from \"../../../tokens/colors.json\";\nimport styled from \"styled-components\";\nimport {\n  BreadcrumbsItemProps,\n  BreadcrumbsItemStyledProps,\n} from \"./BreadcrumbsItem.types\";\nimport { useTheme } from \"../../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../../helpers/helpers\";\n\nconst BreadcrumbsItem: React.FunctionComponent<BreadcrumbsItemProps> = ({\n  link,\n  title,\n  color = colorTokens.default.primary.main,\n  size = \"medium\",\n  variant = \"contained\",\n  \"data-testid\": dataTestId,\n  ...props\n}: BreadcrumbsItemProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  const getPreciseColor = () => {\n    if (colorPalette)\n      return variant === \"contained\"\n        ? colorPalette[color].accentContrast\n        : colorPalette[color].accentScale[10];\n  };\n\n  const BreadcrumbsItemContent = link ? (\n    <Link\n      size={size}\n      preciseColor={getPreciseColor()}\n      variant=\"hover\"\n      href={link}\n    >\n      {title}\n    </Link>\n  ) : (\n    <Text disableColor size={size} variant=\"span\">\n      {title}\n    </Text>\n  );\n\n  return (\n    <StyledBreadcrumbsItem\n      $variant={variant}\n      $color={color}\n      $colorPalette={colorPalette}\n      $size={size}\n      $isSelectable={!!link}\n      data-testid={dataTestId}\n      aria-current={link ? \"page\" : undefined}\n      {...props}\n    >\n      {BreadcrumbsItemContent}\n    </StyledBreadcrumbsItem>\n  );\n};\nexport default BreadcrumbsItem;\n\nconst StyledBreadcrumbsItem = styled.div<BreadcrumbsItemStyledProps>`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 0.5rem;\n  ${(props) => {\n    const properties = styledHandler(\n      props.$variant,\n      props.$color,\n      props.$colorPalette,\n      props.$isSelectable,\n      props.$size\n    );\n    return `\n      background-color: ${properties.backgroundColor.default};\n      color: ${properties.color.default};\n      border: ${properties.border.default};\n      padding: ${properties.padding};\n      margin: ${properties.margin};\n      ${\n        props.$isSelectable\n          ? `&:hover {\n          background-color: ${properties.backgroundColor.hover};\n          color: ${properties.color.hover};\n          border: ${properties.border.hover};\n          }\n          &:active {\n          background-color: ${properties.backgroundColor.active};\n          color: ${properties.color.active};\n          border: ${properties.border.active};\n          `\n          : \"\"\n      }\n      `;\n  }}\n`;\nconst styledHandler = (\n  variant: BreadcrumbsItemStyledProps[\"$variant\"],\n  color: BreadcrumbsItemStyledProps[\"$color\"],\n  colorPalette: BreadcrumbsItemStyledProps[\"$colorPalette\"],\n  isSelectable: BreadcrumbsItemStyledProps[\"$isSelectable\"],\n  size: BreadcrumbsItemStyledProps[\"$size\"]\n) => {\n  return {\n    ...variantHandler(variant, color, colorPalette, isSelectable),\n    ...sizeHandler(size),\n  };\n};\nconst variantHandler = (\n  variant: BreadcrumbsItemStyledProps[\"$variant\"],\n  color: BreadcrumbsItemStyledProps[\"$color\"],\n  colorPalette: BreadcrumbsItemStyledProps[\"$colorPalette\"],\n  isSelectable: BreadcrumbsItemStyledProps[\"$isSelectable\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      if (!isSelectable) {\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[8],\n          },\n          color: {\n            default: colorPalette[color].accentContrast,\n          },\n          border: {\n            default: `1px solid ${colorPalette[color].grayScale[8]}`,\n          },\n        };\n      }\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[8],\n          hover: colorPalette[color].accentScale[9],\n          active: colorPalette[color].accentScale[9],\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n          hover: colorPalette[color].accentContrast,\n          active: colorPalette[color].accentContrast,\n        },\n        border: {\n          default: `1px solid ${colorPalette[color].accentScale[8]}`,\n          hover: `1px solid ${colorPalette[color].accentScale[9]}`,\n          active: `1px solid ${colorPalette[color].accentScale[9]}`,\n        },\n      };\n    case \"outlined\":\n      if (!isSelectable) {\n        return {\n          backgroundColor: {\n            default: \"transparent\",\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `1px solid ${colorPalette[color].grayScale[8]}`,\n          },\n        };\n      }\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `1px solid ${colorPalette[color].accentScale[6]}`,\n          hover: `1px solid ${colorPalette[color].accentScale[7]}`,\n          active: `1px solid ${colorPalette[color].accentScale[7]}`,\n        },\n      };\n    case \"soft\":\n      if (!isSelectable) {\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[3],\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `1px solid ${colorPalette[color].grayScale[3]}`,\n          },\n        };\n      }\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n          hover: colorPalette[color].accentScale[3],\n          active: colorPalette[color].accentScale[3],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `1px solid ${colorPalette[color].accentScale[2]}`,\n          hover: `1px solid ${colorPalette[color].accentScale[3]}`,\n          active: `1px solid ${colorPalette[color].accentScale[3]}`,\n        },\n      };\n    case \"text\":\n      if (!isSelectable) {\n        return {\n          backgroundColor: {\n            default: \"transparent\",\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `1px solid transparent`,\n          },\n        };\n      }\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[11],\n          active: colorPalette[color].accentScale[11],\n        },\n        border: {\n          default: \"1px solid transparent\",\n          hover: \"1px solid transparent\",\n          active: \"1px solid transparent\",\n        },\n      };\n  }\n};\nconst sizeHandler = (size: BreadcrumbsItemStyledProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return {\n        margin: \"0rem 0.25rem\",\n        padding: \"0.25rem 0.5rem\",\n      };\n    case \"medium\":\n      return {\n        margin: \"0rem 0.5rem\",\n        padding: \"0.25rem 0.5rem\",\n      };\n    case \"large\":\n      return {\n        margin: \"0rem 0.5rem\",\n        padding: \"0.25rem 0.5rem\",\n      };\n  }\n};\n","import React, {\n  useImperativeHandle,\n  useRef,\n  forwardRef,\n} from \"react\";\nimport styled from \"styled-components\";\nimport {\n  ButtonProps,\n  ButtonStyleProps,\n  ButtonIconStyleProps,\n} from \"./Button.types\";\nimport Text from \"../Text/Text\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette, hasPropertyChain } from \"../../helpers/helpers\";\nimport colors from \"../../tokens/colors.json\";\nimport layout from \"../../tokens/layout.json\";\n\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      leadingIcon,\n      trailingIcon,\n      size = \"medium\",\n      variant = \"contained\",\n      color = colors.default.primary.main,\n      rounded = false,\n      disabled = false,\n      children,\n      isFullWidth = false,\n      style,\n      onClick,\n      \"data-testid\": dataTestId,\n      \"data-leading-icon\": dataLeadingIcon,\n      \"data-trailing-icon\": dataTrailingIcon,\n      ...rest\n    }: ButtonProps,\n    ref\n  ) => {\n    const innerRef = useRef<HTMLButtonElement>(null);\n    useImperativeHandle(ref, () => innerRef.current!, [innerRef]);\n    const theme = useTheme().theme;\n    const colorPalette = getColorPalette(theme, color);\n\n    return (\n      <StyledButton\n        ref={innerRef}\n        $size={size}\n        $variant={variant}\n        $color={color}\n        $colorPalette={colorPalette}\n        $disabled={disabled}\n        $rounded={rounded}\n        $isFullWidth={isFullWidth}\n        aria-disabled={disabled}\n        style={style}\n        onClick={onClick}\n        data-testid={dataTestId}\n        tabIndex={disabled ? -1 : 0}\n        {...rest}\n      >\n        {leadingIcon && (\n          <StyledButtonIcon $size={size} data-testid={dataLeadingIcon}>\n            {leadingIcon}\n          </StyledButtonIcon>\n        )}\n        {typeof children === \"string\" ? (\n          <Text disableColor variant=\"span\" size={size}>\n            {children}\n          </Text>\n        ) : (\n          children\n        )}\n        {trailingIcon && (\n          <StyledButtonIcon $size={size} data-testid={dataTrailingIcon}>\n            {trailingIcon}\n          </StyledButtonIcon>\n        )}\n      </StyledButton>\n    );\n  }\n);\nexport default Button;\n\nconst StyledButton = styled.button<ButtonStyleProps>`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  ${(props: ButtonStyleProps) => {\n    const properties = propsHandler(\n      props.$variant,\n      props.$color,\n      props.$colorPalette,\n      props.$size,\n      props.$disabled\n    );\n    return `\n      background-color: ${properties.backgroundColor.default};\n      color: ${properties.color.default};\n      padding: ${properties.padding};\n      gap: ${properties.gap};\n      width: ${props.$isFullWidth ? \"100%\" : \"auto\"};\n      cursor: ${props.$disabled ? \"not-allowed\" : \"pointer\"};\n      border-radius: ${props.$rounded ? \"20rem\" : `${layout[\"border-radius\"].default.rem}rem`};\n      border: ${properties.border!.default};\n      ${hasPropertyChain(properties, [\"boxShadow\", \"default\"]) ? `box-shadow: ${properties.boxShadow!.default};` : \"\"}\n      ${\n        !props.$disabled\n          ? `\n          &:hover {\n          background-color: ${properties.backgroundColor.hover};\n          color: ${properties.color.hover};\n          border: ${properties.border!.hover};\n          ${hasPropertyChain(properties, [\"boxShadow\", \"hover\"]) ? `box-shadow: ${properties.boxShadow!.hover};` : \"\"}\n        }\n        &:active {\n          background-color: ${properties.backgroundColor.active};\n          color: ${properties.color.active};\n          border: ${properties.border.active};\n          ${hasPropertyChain(properties, [\"filter\", \"active\"]) ? `filter: ${properties.filter!.active};` : \"\"};\n          ${hasPropertyChain(properties, [\"boxShadow\", \"active\"]) ? `box-shadow: ${properties.boxShadow!.active};` : \"\"}\n        }  \n        &:focus-visible {\n          outline-offset: 2px;\n          outline: 2px solid ${props.$colorPalette[props.$color].accentScale[8]};\n        }`\n          : \"\"\n      }\n\n    `;\n  }}\n`;\nconst StyledButtonIcon = styled.span<ButtonIconStyleProps>`\n  ${(props: ButtonIconStyleProps) => {\n    const size = getIconSizeProps(props.$size);\n    return `\n      width: ${size.width};\n      height: ${size.height};\n    `;\n  }}\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst propsHandler = (\n  variant: ButtonStyleProps[\"$variant\"],\n  color: ButtonStyleProps[\"$color\"],\n  colorPalette: ButtonStyleProps[\"$colorPalette\"],\n  size: ButtonStyleProps[\"$size\"],\n  disabled: ButtonStyleProps[\"$disabled\"]\n) => {\n  return {\n    ...getVariantProps(variant, color, colorPalette, disabled),\n    ...getSizeProps(size),\n  };\n};\nconst getVariantProps = (\n  variant: ButtonStyleProps[\"$variant\"],\n  color: ButtonStyleProps[\"$color\"],\n  colorPalette: ButtonStyleProps[\"$colorPalette\"],\n  disabled: ButtonStyleProps[\"$disabled\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[8],\n          },\n          color: {\n            default: colorPalette[color].accentContrast,\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[8]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[8],\n          hover: colorPalette[color].accentScale[9],\n          active: colorPalette[color].accentScale[9],\n        },\n        color: {\n          default: colorPalette[color].accentContrast,\n          hover: colorPalette[color].accentContrast,\n          active: colorPalette[color].accentContrast,\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[8]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[9]}`,\n          active: `2px solid ${colorPalette[color].accentScale[9]}`,\n        },\n        filter: {\n          active: \"brightness(0.92) saturate(1.1)\",\n        },\n      };\n    case \"outlined\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: \"transparent\",\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[5]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[5]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[6]}`,\n          active: `2px solid ${colorPalette[color].accentScale[7]}`,\n        },\n      };\n    case \"soft\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[2],\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[2]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n          hover: colorPalette[color].accentScale[3],\n          active: colorPalette[color].accentScale[3],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[2]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[3]}`,\n          active: `2px solid ${colorPalette[color].accentScale[3]}`,\n        },\n        filter: {\n          active: \"brightness(0.92) saturate(1.1)\",\n        },\n      };\n    case \"outlined-soft\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: colorPalette[color].grayScale[2],\n          },\n          color: {\n            default: colorPalette[color].grayScale[10],\n          },\n          border: {\n            default: `2px solid ${colorPalette[color].grayScale[5]}`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: colorPalette[color].accentScale[2],\n          hover: colorPalette[color].accentScale[3],\n          active: colorPalette[color].accentScale[3],\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: `2px solid ${colorPalette[color].accentScale[5]}`,\n          hover: `2px solid ${colorPalette[color].accentScale[6]}`,\n          active: `2px solid ${colorPalette[color].accentScale[7]}`,\n        },\n      };\n    case \"neumorph\":\n      if (disabled)\n        return {\n          backgroundColor: {\n            default: \"transparent\",\n          },\n          color: {\n            default: colorPalette[color].grayScale[5],\n          },\n          border: {\n            default: `2px solid transparent`,\n          },\n          boxShadow: {\n            default: `-6px -6px 14px rgba(255, 255, 255, .7),\n              -6px -6px 10px rgba(255, 255, 255, .5),\n              6px 6px 8px rgba(255, 255, 255, .075),\n              6px 6px 10px rgba(0, 0, 0, .15)`,\n          },\n        };\n      return {\n        backgroundColor: {\n          default: \"transparent\",\n          hover: \"transparent\",\n          active: \"transparent\",\n        },\n        color: {\n          default: colorPalette[color].accentScale[10],\n          hover: colorPalette[color].accentScale[10],\n          active: colorPalette[color].accentScale[10],\n        },\n        border: {\n          default: \"2px solid transparent\",\n          hover: \"2px solid transparent\",\n          active: \"2px solid transparent\",\n        },\n        boxShadow: {\n          default:\n            colorPalette[color].appearance === \"light\"\n              ? `-6px -6px 14px rgba(255, 255, 255, .7),  -6px -6px 10px rgba(255, 255, 255, .5), 6px 6px 8px rgba(255, 255, 255, .075), 6px 6px 10px rgba(0, 0, 0, .15)`\n              : `-6px -6px 14px rgba(0, 0, 0, 0.1),-6px -6px 10px rgba(0, 0, 0, .01),3px 3px 4px rgba(0, 0, 0, 0.4),3px 3px 12px rgba(0, 0, 0, 0.1)`,\n          hover: colorPalette[color].appearance === \"light\" ? \n              `-2px -2px 6px rgba(255, 255, 255, .6),  -2px -2px 4px rgba(255, 255, 255, .4), 2px 2px 2px rgba(255, 255, 255, .05), 2px 2px 4px rgba(0, 0, 0, .1)`\n              : `-2px -2px 14px rgba(0, 0, 0, 0.4), -6px -6px 10px rgba(0, 0, 0, .01), 1px 1px 4px rgba(0, 0, 0, 0.4), 1px 1px 12px rgba(0, 0, 0, 0.1)`,\n          active: colorPalette[color].appearance === \"light\" ? \n              `inset -2px -2px 6px rgba(255, 255, 255, .7), inset -2px -2px 4px rgba(255, 255, 255, .5), inset 2px 2px 2px rgba(255, 255, 255, .075), inset 2px 2px 4px rgba(0, 0, 0, .15)`\n              : `inset -2px -2px 14px rgba(0, 0, 0, 0.1),inset -2px -2px 4px rgba(0, 0, 0, .1),inset 2px 2px 4px rgba(0, 0, 0, .1),inset 2px 2px 8px rgba(0, 0, 0, .1)`,\n        },\n      };\n  }\n};\nconst getSizeProps = (size: ButtonStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return { padding: \"0.25rem 0.5rem\", gap: \"0.5rem\" };\n    case \"medium\":\n      return { padding: \"0.5rem 1rem\", gap: \"0.75rem\" };\n    case \"large\":\n      return { padding: \"0.5rem 1rem\", gap: \"0.75rem\" };\n  }\n};\n\nconst getIconSizeProps = (size: ButtonStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return { width: \"1.25rem\", height: \"1.25rem\" };\n    case \"medium\":\n      return { width: \"1.5rem\", height: \"1.5rem\" };\n    case \"large\":\n      return { width: \"1.75rem\", height: \"1.75rem\" };\n  }\n};\n","import styled from \"styled-components\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { CodeDisplayProps, CodeDisplayStyleProps } from \"./CodeDisplay.types\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport Text from \"../Text/Text\";\nimport { vs, dark } from \"react-syntax-highlighter/dist/cjs/styles/hljs\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\nconst CodeDisplay = ({\n  text,\n  width = \"auto\",\n  title,\n  style,\n  codeStyle,\n  syntaxHighlighterStyle,\n  language,\n  color = colorTokens.default.primary.main,\n  \"data-testid\": dataTestId,\n  className,\n  ...props\n}: CodeDisplayProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n  const appearance = colorPalette![color].appearance\n\n  return (\n    <StyledCodeDisplay\n      style={style}\n      $colorPalette={colorPalette}\n      $color={color}\n      $width={width}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {title && (\n        <StyledTitle $colorPalette={colorPalette} $color={color}>\n          <Text disableColor variant=\"paragraph\" size=\"small\">\n            {title}\n          </Text>\n        </StyledTitle>\n      )}\n      <StyledCodeContainer\n        $colorPalette={colorPalette}\n        $color={color}\n        $hasTitle={!!title}\n        style={codeStyle}\n      >\n        <StyledSyntaxHighlighter\n          language={language}\n          title={title}\n          style={{ ...(appearance === colorTokens.theme.appearance.light ? vs : dark), ...syntaxHighlighterStyle }}\n          $colorPalette={colorPalette}\n          $color={color}\n        >\n          {text}\n        </StyledSyntaxHighlighter>\n      </StyledCodeContainer>\n    </StyledCodeDisplay>\n  );\n};\nexport default CodeDisplay;\n\nconst StyledCodeDisplay = styled.div<CodeDisplayStyleProps>`\n  display: flex;\n  flex-direction: column;\n  border-radius: 0.5rem;\n  width: ${(props) => props.$width};\n`;\nconst StyledTitle = styled.div<CodeDisplayStyleProps>`\n  display: flex;\n  align-items: center;\n  padding: 0.5rem 2rem;\n  background-color: ${(props) =>\n    props.$colorPalette[props.$color].accentScale[6]};\n  color: ${(props) => props.$colorPalette[props.$color].accentContrast};\n  border-radius: 0.5rem 0.5rem 0 0;\n`;\nconst StyledCodeContainer = styled.div<CodeDisplayStyleProps>`\n  display: block;\n  background-color: ${(props) =>\n    props.$colorPalette[props.$color].accentScale[4]};\n  padding: 1rem 2rem;\n  pre {\n    margin: 0;\n    padding: 0 !important;\n    white-space: pre-wrap;\n    word-break: break-word;\n    code {\n      font-size: 14px;\n      font-family: \"Source Code Pro\", monospace;\n    }\n  }\n  ${(props) => {\n    return `\n      border-radius: ${props.$hasTitle ? \"0 0 0.5rem 0.5rem\" : \"0.5rem\"};\n    `;\n  }}\n`;\nconst StyledSyntaxHighlighter = styled(\n  SyntaxHighlighter\n)<CodeDisplayStyleProps>`\n  background-color: ${(props) =>\n    props.$colorPalette[props.$color].accentScale[4]} !important;\n`;\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { ChromePicker, ColorResult } from \"react-color\";\nimport { ColorPickerProps, ColorPickerStyleProps } from \"./ColorPicker.types\";\nimport Input from \"../Input/Input\";\nimport styled from \"styled-components\";\nimport { usePopper } from \"react-popper\";\nimport ClickAwayListener from \"../ClickAwayListener/ClickAwayListener\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette, isValidColor } from \"../../helpers/helpers\";\nimport Text from \"../Text/Text\";\n\nconst StyledChromePickerCtr = styled.div<ColorPickerStyleProps>`\n  display: ${(props) => (props.$open ? \"block\" : \"none\")};\n`;\n\nconst ColorPicker = ({\n  label,\n  color = colorTokens.default.primary.main,\n  open = false,\n  size,\n  width,\n  variant = \"outlined\",\n  onChange,\n  errorMessage,\n  \"data-testid\": dataTestId,\n  \"data-testid-input\": dataTestIdInput,\n  \"data-testid-popup\": dataTestIdPopup,\n  \"data-testid-leading-icon\": dataTestIdLeadingIcon,\n  ...props\n}: ColorPickerProps) => {\n  const [isOpen, setIsOpen] = useState(open);\n  const anchorElement = useRef<HTMLDivElement | null>(null);\n  const popperElement = useRef<HTMLDivElement | null>(null);\n\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n  const [innerColor, setInnerColor] = useState<string>(\n    colorPalette![color].main\n  );\n  const [_errorMessage, setErrorMessage] = useState<\n    React.ReactNode | undefined\n  >(errorMessage);\n\n  React.useEffect(() => {\n    const colorPalette = getColorPalette(theme, color);\n    setInnerColor(colorPalette![color].main);\n  }, [color, theme]);\n\n  useEffect(() => {\n    setIsOpen(open);\n  }, [open]);\n\n  const { styles, attributes } = usePopper(\n    anchorElement.current,\n    popperElement.current,\n    {\n      placement: \"bottom-start\",\n      modifiers: [\n        {\n          name: \"offset\",\n          options: {\n            offset: [0, 2.5],\n          },\n        },\n      ],\n    }\n  );\n\n  const _onChange = (color: ColorResult) => {\n    setErrorMessage(undefined);\n    setInnerColor(color.hex);\n    onChange && onChange(color.hex);\n  };\n\n  const _onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!isValidColor(e.target.value)) {\n      setErrorMessage(\"Invalid color\");\n      return;\n    }\n    setErrorMessage(undefined);\n    setInnerColor(e.target.value);\n    onChange && onChange(e.target.value);\n  };\n\n  const _onInputClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleClickAway = useCallback(() => {\n    setIsOpen(false);\n  }, []);\n\n  return (\n    <ClickAwayListener onClickAway={handleClickAway}>\n      <Input\n        variant={variant}\n        width={width}\n        size={size}\n        label={label}\n        containerRef={anchorElement}\n        value={innerColor}\n        onChange={_onInputChange}\n        onClick={_onInputClick}\n        color={color}\n        leadingIcon={\n          <div\n            data-testid={dataTestIdLeadingIcon}\n            onClick={() => setIsOpen(!isOpen)}\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n              backgroundColor: innerColor,\n              borderRadius: \"4px\",\n            }}\n          />\n        }\n        data-testid={dataTestId}\n        data-testid-input={dataTestIdInput}\n        {...props}\n      />\n      <StyledChromePickerCtr\n        ref={popperElement}\n        $open={isOpen}\n        style={{ ...styles.popper }}\n        data-testid={dataTestIdPopup}\n        {...attributes.popper}\n      >\n        <ChromePicker disableAlpha color={innerColor} onChange={_onChange} />\n      </StyledChromePickerCtr>\n      <div style={{ height: \"20px\" }}>\n        <Text color={color} size=\"small\">\n          {_errorMessage}\n        </Text>\n      </div>\n    </ClickAwayListener>\n  );\n};\n\nexport default ColorPicker;\n","import React, { forwardRef } from \"react\";\nimport { LinkProps, LinkStyleProps } from \"./Link.types\";\nimport Text from \"../Text/Text\";\nimport styled from \"styled-components\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport {Link as ReactRouterLink} from \"react-router-dom\";\n\nconst Link = forwardRef<HTMLAnchorElement, LinkProps>(({\n  href,\n  children,\n  variant = \"default\",\n  size = \"medium\",\n  className,\n  target,\n  style,\n  color = colorTokens.default.primary.main,\n  preciseColor,\n  tabIndex,\n  onClick,\n  onKeyDown,\n  \"data-testid\": dataTestId,\n}, ref) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n  const _color =\n    preciseColor ?? colorPalette![color].accentScale[10];\n\n  const isRelative = href && href.startsWith(\"/\");\n\n  const LinkText = () => {\n    return typeof children === \"string\" ? (\n      <Text preciseColor={_color} size={size} variant=\"span\">\n        {children}\n      </Text>\n    ) : (\n      children\n    );\n  };\n\n  return (isRelative ?\n    <StyledReactRouterLink to={href} ref={ref} tabIndex={tabIndex} target={target} $color={_color} $variant={variant} data-testid={dataTestId} onClick={onClick} onKeyDown={onKeyDown} style={style} className={className}>\n      {LinkText()}\n    </StyledReactRouterLink> :\n    <StyledLink\n      ref={ref}\n      tabIndex={tabIndex}\n      $color={_color}\n      $variant={variant}\n      target={target}\n      href={href}\n      className={className}\n      style={style}\n      onClick={onClick}\n      data-testid={dataTestId}\n      onKeyDown={onKeyDown}\n    >\n      {LinkText()}\n    </StyledLink>\n  );\n});\nexport default Link;\n\nconst StyledLink = styled.a<LinkStyleProps>`\n  color: ${(props) => props.$color};\n  width: fit-content;\n  text-decoration: ${(props) =>\n    props.$variant === \"underline\" ? \"underline\" : \"none\"};\n  cursor: pointer;\n  display: inline-block;\n  &:hover {\n    text-decoration: ${(props) =>\n      props.$variant === \"default\" ? \"none\" : \"underline\"};\n  }\n  &:focus-visible {\n    outline: 1px solid ${(props) => props.$color};\n    outline-offset: 2px;\n    border-radius: 0.25rem;\n  }\n`;\nconst StyledReactRouterLink = styled(ReactRouterLink)<LinkStyleProps>`\n  color: ${(props) => props.$color};\n  width: fit-content;\n  text-decoration: ${(props) =>\n    props.$variant === \"underline\" ? \"underline\" : \"none\"};\n  cursor: pointer;\n  display: inline-block;\n  &:hover {\n    text-decoration: ${(props) =>\n      props.$variant === \"default\" ? \"none\" : \"underline\"};\n  }\n  &:focus-visible {\n    outline: 1px solid ${(props) => props.$color};\n    outline-offset: 2px;\n    border-radius: 0.25rem;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { SideBarProps, SideBarStyleProps } from \"./SideBar.types\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport { SideBarItemProps } from \"./SideBarItem/SideBarItem.types\";\n\nconst SideBar = ({\n  children,\n  className,\n  style,\n  top = \"0\",\n  right = \"0\",\n  color = colorTokens.default.primary.main,\n  \"data-testid\": dataTestId,\n  onChange,\n  ...props\n}: SideBarProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n  const [selectedIndex, setSelectedIndex] = React.useState<number | undefined>();\n\n  const _handleSelectedIndex = (index?: number, value?: string) => {\n    if (index === selectedIndex) return;\n    setSelectedIndex(index);\n    onChange && onChange(value);\n  }\n\n  let index=0;\n  const childrenList = Array.isArray(children) ? children : [children];\n  const ChildrenEle = React.Children.map(childrenList, (child) => {\n    if (!React.isValidElement(child) || !child.type) return child;\n\n    if ((child.type as any).displayName === \"SideBarItem\") {\n      index++;\n      return React.cloneElement(child, {\n        _index: index,\n        ...(color && !child.props.color && { color: color }),\n        selected: selectedIndex ? selectedIndex === index : child.props.selected,\n        _getSelectedIndex: _handleSelectedIndex\n      } as Partial<SideBarItemProps>);\n    }\n\n    if((child.type as any).displayName === \"SideBarGroup\"){\n      return React.cloneElement(child as any, {\n        children: React.Children.map(child.props.children, (child) => {\n          if(child.type.displayName === \"SideBarGroupItem\"){\n            index++;\n            return React.cloneElement(child, {\n              _index: index,\n              _getSelectedIndex: _handleSelectedIndex,\n              ...(color && !child.props.color && {color: color}),\n              selected: selectedIndex ? selectedIndex === index : (child.props as any).selected\n            } as Partial<SideBarItemProps>);\n          } else {\n            return child;\n          }\n        }),\n        ...(color && !child.props.color && {color: color})\n      })\n    }\n\n  })\n\n  return (\n    <StyledSideBar\n      $colorPalette={colorPalette}\n      $color={color}\n      className={className}\n      style={style}\n      $top={top}\n      $right={right}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {ChildrenEle}\n    </StyledSideBar>\n  );\n};\n\nexport default SideBar;\n\nconst StyledSideBar = styled.div<SideBarStyleProps>`\n  display: flex;\n  flex-direction: column;\n  position: fixed;\n  width: 10rem;\n  height: 100vh;\n  overflow: scroll;\n  right: ${(props) => props.$right};\n  top: ${(props) => props.$top};\n  color: ${(props) => props.$colorPalette[props.$color].grayScale[11]};\n`;\n","import React from \"react\";\nimport {\n  SideBarGroupProps,\n  SideBarGroupStyleProps,\n} from \"./SideBarGroup.types\";\nimport styled from \"styled-components\";\nimport Text from \"../../Text/Text\";\nimport Link from \"../../Link/Link\";\nimport { useTheme } from \"../../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../../helpers/helpers\";\nimport colorTokens from \"../../../tokens/colors.json\";\n\nconst SideBarGroup = ({\n  children,\n  className,\n  style,\n  title,\n  leadingIcon,\n  trailingIcon,\n  size,\n  selected,\n  color = colorTokens.default.primary.main,\n  // Events\n  onClick,\n  \"data-testid\": dataTestId,\n  ...props\n}: SideBarGroupProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  return (\n    <StyledSideBarGroup\n      className={className}\n      style={style}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {(title || leadingIcon || trailingIcon) && (\n        <StyledSideBarGroupHeader $colorPalette={colorPalette} $color={color}>\n          {leadingIcon && <span>{leadingIcon}</span>}\n          {title && typeof title === \"string\" ? (\n            onClick ? (\n              <Link\n                size={size}\n                variant=\"hover\"\n                preciseColor={\n                  selected\n                    ? colorPalette![color].accentScale[11]\n                    : colorPalette![color].grayScale[11]\n                }\n                onClick={onClick}\n              >\n                {title}\n              </Link>\n            ) : (\n              <Text color={color} size={size} variant=\"span\">\n                {title}\n              </Text>\n            )\n          ) : (\n            title\n          )}\n          {trailingIcon && <span>{trailingIcon}</span>}\n        </StyledSideBarGroupHeader>\n      )}\n      {children}\n    </StyledSideBarGroup>\n  );\n};\nexport default SideBarGroup;\nSideBarGroup.displayName = \"SideBarGroup\"\n\nconst StyledSideBarGroup = styled.ul`\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  margin: 0;\n  list-style-type: none;\n`;\nconst StyledSideBarGroupHeader = styled.li<SideBarGroupStyleProps>`\n  display: flex;\n  flex-direction: row;\n  padding: 0.5rem 0.5rem 0.25rem 1rem;\n  color: ${(props) => props.$colorPalette[props.$color].grayScale[11]};\n`;\n","import React from \"react\";\nimport {\n  SideBarGroupItemProps,\n  SideBarGroupItemStyleProps,\n} from \"./SideBarGroupItem.types\";\nimport styled from \"styled-components\";\nimport Link from \"../../Link/Link\";\nimport { useTheme } from \"../../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../../helpers/helpers\";\nimport colorTokens from \"../../../tokens/colors.json\";\n\nconst StyledSideBarGroupItem = styled.div<SideBarGroupItemStyleProps>`\n  display: flex;\n  padding: 0.25rem 0.5rem 0.25rem 1.75rem;\n`;\n\nconst SideBarGroupItem = ({\n  _index,\n  value,\n  children,\n  className,\n  style,\n  size,\n  selected,\n  color = colorTokens.default.primary.main,\n  // Events\n  onClick,\n  _getSelectedIndex,\n  \"data-testid\": dataTestId,\n  ...props\n}: SideBarGroupItemProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n  const [_selected, setSelected] = React.useState(selected);\n\n  React.useEffect(() => {\n    setSelected(selected)\n  },[selected]);\n\n  const _onClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    setSelected(true);\n    _getSelectedIndex && _getSelectedIndex(_index, value);\n    onClick && onClick(e);\n  };\n\n  return (\n    <StyledSideBarGroupItem\n      $colorPalette={colorPalette}\n      $color={color}\n      className={className}\n      style={style}\n      onClick={_onClick}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {typeof children === \"string\" ? (\n        <Link\n          tabIndex={onClick ? 0 : undefined}\n          size={size}\n          variant=\"hover\"\n          preciseColor={_selected ? colorPalette![color].accentScale[10] : colorPalette![color].grayScale[11]}\n          className={className}\n          style={style}\n          onClick={_onClick}\n        >\n          {children}\n        </Link>\n      ) : (\n        children\n      )}\n    </StyledSideBarGroupItem>\n  );\n};\nSideBarGroupItem.displayName = \"SideBarGroupItem\";\n\nexport default SideBarGroupItem;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { SideBarItemProps, SideBarItemStyleProps } from \"./SideBarItem.types\";\nimport Link from \"../../Link/Link\";\nimport { useTheme } from \"../../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../../helpers/helpers\";\nimport colorTokens from \"../../../tokens/colors.json\";\n\nconst SideBarItem = ({\n  _index,\n  value,\n  children,\n  className,\n  style,\n  size,\n  selected,\n  color = colorTokens.default.primary.main,\n  //Events\n  onClick,\n  _getSelectedIndex,\n  \"data-testid\": dataTestId,\n  ...props\n}: SideBarItemProps) => {\n  const [_selected, setSelected] = React.useState(selected);\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  React.useEffect(() => {\n    setSelected(selected)\n  },[selected]);\n\n  const _onClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    setSelected(true);\n    _getSelectedIndex && _getSelectedIndex(_index, value);\n    onClick && onClick(e);\n  }\n\n  return (\n    <StyledSideBarItem\n      $colorPalette={colorPalette}\n      $color={color}\n      onClick={_onClick}\n      $selected={_selected}\n      className={className}\n      style={style}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {typeof children === \"string\" ? (\n        <Link\n          tabIndex={onClick ? 0 : undefined}\n          preciseColor={_selected ? colorPalette![color].accentScale[10] : colorPalette![color].grayScale[11]}\n          size={size}\n          variant=\"hover\"\n          className={className}\n          style={style}\n          onClick={_onClick}\n        >\n          {children}\n        </Link>\n      ) : (\n        children\n      )}\n    </StyledSideBarItem>\n  );\n};\nexport default SideBarItem;\nSideBarItem.displayName = \"SideBarItem\";\n\nconst StyledSideBarItem = styled.div<SideBarItemStyleProps>`\n  display: flex;\n  flex-direction: column;\n  padding: 0.5rem 0.5rem 0.25rem 1rem;\n  width: fit-content;\n  positon: relative;\n  color: ${(props) =>\n    props.$selected\n      ? props.$colorPalette[props.$color].accentScale[11]\n      : props.$colorPalette[props.$color].grayScale[11]};\n`;","import * as React from \"react\";\nimport {\n  SliderLabelProps,\n  SliderProps,\n  SliderTrackStyleProps,\n} from \"./Slider.types\";\nimport styled from \"styled-components\";\nimport Text from \"../Text/Text\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\n\nconst Slider: React.FunctionComponent<SliderProps> = ({\n  value,\n  defaultValue,\n  min = 0,\n  minDisplay = \"0\",\n  max = 100,\n  maxDisplay = \"100\",\n  step = 1,\n  width = \"400px\",\n  color = colorTokens.default.primary.main,\n  className,\n  style,\n  variant = \"contained\",\n  size = \"medium\",\n  disabled,\n  disableLabels = false,\n  // Events\n  onChange,\n  \"data-testid\": dataTestId,\n}) => {\n  const sliderRef = React.useRef<HTMLDivElement | null>(null);\n  const [sliderValue, setSliderValue] = React.useState<number>(\n    value ?? defaultValue ?? 0\n  );\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n\n  React.useEffect(() => {\n    setSliderValue(value ?? defaultValue ?? 0);\n  }, [value, defaultValue]);\n\n  /* ------------------------------\n    Calculate new value on MouseMove\n  ------------------------------- */\n  const calculateNewValue = (pageX: number) => {\n    if (!sliderRef || !sliderRef.current) return;\n\n    const containerX =\n      sliderRef.current.getBoundingClientRect().x + window.scrollX;\n    const containerWidth = sliderRef.current.offsetWidth;\n\n    const offset = calculateHandleOffset(containerX, pageX, containerWidth);\n    const scaleValue = getScaleValue(offset, min, max, 2);\n    setSliderValue(scaleValue);\n    onChange && onChange(scaleValue);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    e.preventDefault();\n    if (disabled) return;\n    calculateNewValue(e.pageX);\n\n    const handleMouseMove = (e: MouseEvent) => {\n      calculateNewValue(e.pageX);\n    };\n\n    const handleMouseUp = () => {\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      document.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n\n    document.addEventListener(\"mousemove\", handleMouseMove);\n    document.addEventListener(\"mouseup\", handleMouseUp);\n  };\n\n  return (\n    <div style={{ width: width }} aria-disabled={disabled} data-testid={dataTestId}>\n      <StyledSliderLabel $color={color} $colorPalette={colorPalette}>\n        {!disableLabels && (\n          <Text disableColor size={size}>\n            {minDisplay}\n          </Text>\n        )}\n        {!disableLabels && (\n          <Text disableColor size={size}>\n            {maxDisplay}\n          </Text>\n        )}\n      </StyledSliderLabel>\n      <StyledSliderTrack\n        role=\"slider\"\n        ref={sliderRef}\n        className={className}\n        style={style}\n        $colorPalette={colorPalette}\n        $color={color}\n        $variant={variant}\n        $size={size}\n        $disabled={disabled}\n        onMouseDown={handleMouseDown}\n      >\n        <StyledSliderTrackFinal\n          style={{ width: `${sliderValue}%` }}\n          $colorPalette={colorPalette}\n          $color={color}\n          $variant={variant}\n          $size={size}\n        >\n          {!disabled && (\n            <StyledSliderHandle\n              $colorPalette={colorPalette}\n              $color={color}\n              $variant={variant}\n              $size={size}\n            />\n          )}\n        </StyledSliderTrackFinal>\n        <StyledSliderInput\n          type=\"slider\"\n          min={min}\n          max={max}\n          step={step}\n          value={sliderValue}\n          readOnly\n        />\n      </StyledSliderTrack>\n    </div>\n  );\n};\nexport default Slider;\n\nconst StyledSliderLabel = styled.div<SliderLabelProps>`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 4px;\n  color: ${(props) => props.$colorPalette[props.$color].accentScale[10]};\n`;\nconst StyledSliderTrack = styled.div<SliderTrackStyleProps>`\n  position: relative;\n  cursor: pointer;\n  ${(props) => {\n    const properties = styleHandler(\n      props.$colorPalette,\n      props.$color,\n      props.$variant,\n      props.$size\n    );\n    return `\n      background-color: ${properties.track.backgroundColor.default};\n      height: ${properties.track.height};\n      border-radius: ${properties.track.borderRadius};\n      outline: ${properties.track.outline.default};\n      \n      ${\n        !props.$disabled\n          ? `&:hover {\n        background-color: ${properties.track.backgroundColor.hover};\n        outline: ${properties.track.outline.hover};\n      }\n      &:active {\n        background-color: ${properties.track.backgroundColor.active};\n        outline: ${properties.track.outline.active};\n      }`\n          : \"\"\n      }\n    `;\n  }}\n`;\nconst StyledSliderTrackFinal = styled.div<SliderTrackStyleProps>`\n  position: relative;\n  z-index: 1;\n  ${(props) => {\n    const properties = styleHandler(\n      props.$colorPalette,\n      props.$color,\n      props.$variant,\n      props.$size\n    );\n    return `\n      height: ${properties.trackFinal.height};\n      border-radius: ${properties.trackFinal.borderRadius};\n      background-color: ${properties.trackFinal.backgroundColor.default};\n      ${\n        !props.$disabled\n          ? `&:hover {\n        background-color: ${properties.trackFinal.backgroundColor.hover};\n      }\n      &:active {\n        background-color: ${properties.trackFinal.backgroundColor.active};\n      }`\n          : \"\"\n      }\n    `;\n  }}\n`;\nconst StyledSliderHandle = styled.div<SliderTrackStyleProps>`\n  position: absolute;\n  border-radius: 50%;\n  ${(props) => {\n    const properties = styleHandler(\n      props.$colorPalette,\n      props.$color,\n      props.$variant,\n      props.$size\n    );\n    return `\n      background-color: ${properties.trackFinal.backgroundColor.default};\n      width: ${properties.handle.width};\n      height: ${properties.handle.height};\n      top: ${properties.handle.top};\n      right: ${properties.handle.right};\n      ${\n        !props.$disabled\n          ? `&:hover {\n        background-color: ${properties.trackFinal.backgroundColor.hover};\n      }\n      &:active {\n        background-color: ${properties.trackFinal.backgroundColor.active};\n      }`\n          : \"\"\n      }\n    `;\n  }}\n`;\nconst StyledSliderInput = styled.input`\n  position: absolute;\n  width: 100%;\n  left: 0;\n  top: 0;\n  border: 0;\n  padding: 0;\n  margin: 0;\n  height: 100%;\n  opacity: 0;\n  cursor: pointer;\n  z-index: 1;\n`;\nconst styleHandler = (\n  colorPalette: any,\n  color: string,\n  variant: SliderTrackStyleProps[\"$variant\"],\n  size: SliderTrackStyleProps[\"$size\"]\n) => {\n  return {\n    track: {\n      ...getVariantStyles(colorPalette, color, variant).track,\n      ...getSizeStyles(size).track,\n    },\n    trackFinal: {\n      ...getVariantStyles(colorPalette, color, variant).trackFinal,\n      ...getSizeStyles(size).trackFinal,\n    },\n    handle: {\n      ...getSizeStyles(size).handle,\n    },\n  };\n};\nconst getVariantStyles = (\n  colorPalette: any,\n  color: string,\n  variant: SliderTrackStyleProps[\"$variant\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      return {\n        track: {\n          backgroundColor: {\n            default: colorPalette[color].accentScale[4],\n            hover: colorPalette[color].accentScale[5],\n            active: colorPalette[color].accentScale[5],\n          },\n          outline: {\n            default: \"none\",\n            hover: \"none\",\n            active: \"none\",\n          },\n        },\n        trackFinal: {\n          backgroundColor: {\n            default: colorPalette[color].accentScale[8],\n            hover: colorPalette[color].accentScale[9],\n            active: colorPalette[color].accentScale[9],\n          },\n        },\n        handle: {},\n      };\n    case \"outlined\":\n      return {\n        track: {\n          backgroundColor: {\n            default: \"transparent\",\n            hover: \"transparent\",\n            active: \"transparent\",\n          },\n          outline: {\n            default: `1px solid ${colorPalette[color].accentScale[8]}`,\n            hover: `1px solid ${colorPalette[color].accentScale[9]}`,\n            active: `1px solid ${colorPalette[color].accentScale[9]}`,\n          },\n        },\n        trackFinal: {\n          backgroundColor: {\n            default: colorPalette[color].accentScale[8],\n            hover: colorPalette[color].accentScale[9],\n            active: colorPalette[color].accentScale[9],\n          },\n        },\n      };\n  }\n};\nconst getSizeStyles = (size: SliderTrackStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return {\n        track: {\n          height: \"6px\",\n          borderRadius: \"5px\",\n        },\n        trackFinal: {\n          height: \"100%\",\n          borderRadius: \"3px\",\n        },\n        handle: {\n          width: \"12px\",\n          height: \"12px\",\n          right: \"-6px\",\n          top: \"-3px\",\n        },\n      };\n    case \"medium\":\n      return {\n        track: {\n          height: \"10px\",\n          borderRadius: \"7px\",\n        },\n        trackFinal: {\n          height: \"100%\",\n          borderRadius: \"5px\",\n        },\n        handle: {\n          width: \"20px\",\n          height: \"20px\",\n          right: \"-10px\",\n          top: \"-5px\",\n          borderRadius: \"50%\",\n        },\n      };\n    case \"large\":\n      return {\n        track: {\n          height: \"14px\",\n          borderRadius: \"9px\",\n        },\n        trackFinal: {\n          height: \"100%\",\n          borderRadius: \"7px\",\n        },\n        handle: {\n          width: \"24px\",\n          height: \"24px\",\n          right: \"-12px\",\n          top: \"-6px\",\n          borderRadius: \"50%\",\n        },\n      };\n  }\n};\n\n/* -------------------------------\n  Calculate offset of the handle\n------------------------------- */\nconst calculateHandleOffset = (\n  containerStartingVal: number,\n  mouseVal: number,\n  containerLength: number\n) => {\n  const relativeVal = mouseVal - containerStartingVal;\n  if (relativeVal < 0) {\n    return 0;\n  } else if (relativeVal > containerLength) {\n    return 100;\n  } else {\n    return (relativeVal * 100) / containerLength;\n  }\n};\nconst getScaleValue = (\n  value: number,\n  min: number,\n  max: number,\n  rounded: number\n) => {\n  return +(min + (value / 100) * (max - min)).toFixed(rounded);\n};\n","import React from \"react\";\nimport {\n  ToggleButtonProps,\n  ToggleButtonStyleProps,\n} from \"./ToggleButton.types\";\nimport styled from \"styled-components\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\"\n\nconst ToggleButton = ({\n  index,\n  children,\n  value,\n  defaultSelected,\n  selected,\n  color = colorTokens.default.primary.main,\n  size = \"medium\",\n  className,\n  style,\n  // Events\n  onClick,\n  \"data-testid\": dataTestId,\n}: ToggleButtonProps) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme,color);\n  const isSelected = selected ?? defaultSelected ?? false;\n\n  const _onClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    onClick && onClick(e, value, index);\n  };\n\n  return (\n    <StyledToggleBtn\n      $size={size}\n      $selected={isSelected}\n      $color={color}\n      $colorPalette={colorPalette}\n      className={className}\n      style={style}\n      onClick={_onClick}\n      data-testid={dataTestId}\n    >\n      {children}\n    </StyledToggleBtn>\n  );\n};\nToggleButton.displayName = \"ToggleButton\";\nexport default ToggleButton;\n\nconst getBgColor = (\n  color: ToggleButtonStyleProps[\"$color\"],\n  colorPalette: ToggleButtonStyleProps[\"$colorPalette\"],\n  selected: ToggleButtonStyleProps[\"$selected\"]\n) => {\n  if (selected) {\n    return {\n      default: `${colorPalette[color].accentScale[8]}`,\n    };\n  }\n  return {\n    default: `${colorPalette[color].accentScale[0]}`,\n    hover: `${colorPalette[color].accentScale[1]}`,\n    active: `${colorPalette[color].accentScale[2]}`,\n  };\n};\nconst getColor = (\n  color: ToggleButtonStyleProps[\"$color\"],\n  colorPalette: ToggleButtonStyleProps[\"$colorPalette\"],\n  selected: ToggleButtonStyleProps[\"$selected\"]\n) => {\n  if (selected) {\n    return {\n      default: `${colorPalette[color].accentContrast}`,\n    };\n  }\n  return {\n    default: `${colorPalette[color].accentScale[10]}`,\n  };\n};\nconst getPadding = (size: ToggleButtonStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return \"4px 8px\";\n    case \"medium\":\n      return \"8px 16px\";\n    case \"large\":\n      return \"12px 18px\";\n    default:\n      return \"8px 16px\";\n  }\n};\nconst getIconSize = (size: ToggleButtonStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return \"16px\";\n    case \"medium\":\n      return \"20px\";\n    case \"large\":\n      return \"24px\";\n    default:\n      return \"20px\";\n  }\n};\nconst getGap = (size: ToggleButtonStyleProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return \"0.25rem\";\n    case \"medium\":\n      return \"0.5rem\";\n    case \"large\":\n      return \"0.5rem\";\n    default:\n      return \"0.5rem\";\n  }\n};\nconst getOutlineFocus = (\n  color: ToggleButtonStyleProps[\"$color\"],\n  colorPalette: ToggleButtonStyleProps[\"$colorPalette\"],\n) => {\n  return `2px solid ${colorPalette[color].accentScale[7]}`;\n};\nconst StyledToggleBtn = styled.button<ToggleButtonStyleProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: ${(props) => getPadding(props.$size)};\n  font-size: 1rem;\n  width: 100%;\n  gap: ${(props) => getGap(props.$size)};\n  cursor: pointer;\n  color: ${(props) =>\n    getColor(props.$color, props.$colorPalette, props.$selected).default};\n  background-color: ${(props) =>\n    getBgColor(props.$color, props.$colorPalette, props.$selected).default};\n  color: ${(props) =>\n    getColor(props.$color, props.$colorPalette, props.$selected).default};\n\n  &:focus-visible {\n    outline-offset: -2px;\n    outline: ${(props) =>\n      getOutlineFocus(props.$color, props.$colorPalette)};\n  }\n\n  &:hover {\n    background-color: ${(props) =>\n      getBgColor(props.$color, props.$colorPalette, props.$selected).hover};\n  }\n\n  &:active {\n    background-color: ${(props) =>\n      getBgColor(props.$color, props.$colorPalette, props.$selected).active};\n  }\n\n  & svg {\n    width: ${(props) => getIconSize(props.$size)};\n    height: ${(props) => getIconSize(props.$size)};\n  }\n`;","import React from \"react\";\nimport {\n  ToggleButtonGroupProps,\n  ToggleButtonStyleGroupProps,\n} from \"./ToggleButtonGroup.types\";\nimport styled from \"styled-components\";\nimport { useTheme } from \"../../ThemeProvider/ThemeProvider\";\nimport colorTokens from \"../../../tokens/colors.json\";\nimport { getColorPalette } from \"../../../helpers/helpers\";\n\nconst getBorder = (\n  color: ToggleButtonStyleGroupProps[\"$color\"],\n  colorPalette: ToggleButtonStyleGroupProps[\"$colorPalette\"]\n) => {\n  return {\n    default: `1px solid ${colorPalette[color].accentScale[8]}`,\n    hover: `1px solid ${colorPalette[color].accentScale[9]}`,\n    active: `1px solid ${colorPalette[color].accentScale[9]}`,\n  };\n};\n\nconst StyledToggleBtnGroup = styled.div<ToggleButtonStyleGroupProps>`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  width: ${(props) => props.$width};\n  & > :first-child {\n    border-top-left-radius: 4px;\n    border-bottom-left-radius: 4px;\n  }\n  & > :not(:first-child):not(:last-child) {\n    border-radius: 0;\n  }\n  & > :not(:last-child) {\n    border-left: ${(props) =>\n      getBorder(props.$color, props.$colorPalette).default};\n    border-top: ${(props) =>\n      getBorder(props.$color, props.$colorPalette).default};\n    border-bottom: ${(props) =>\n      getBorder(props.$color, props.$colorPalette).default};\n    border-right: 0;\n\n    &:hover {\n      border-left: ${(props) =>\n        getBorder(props.$color, props.$colorPalette).hover};\n      border-top: ${(props) =>\n        getBorder(props.$color, props.$colorPalette).hover};\n      border-bottom: ${(props) =>\n        getBorder(props.$color, props.$colorPalette).hover};\n    }\n\n    &:active {\n      border-left: ${(props) =>\n        getBorder(props.$color, props.$colorPalette).active};\n      border-top: ${(props) =>\n        getBorder(props.$color, props.$colorPalette).active};\n      border-bottom: ${(props) =>\n        getBorder(props.$color, props.$colorPalette).active};\n    }\n  }\n  & > :last-child {\n    border-top-right-radius: 4px;\n    border-bottom-right-radius: 4px;\n    border: ${(props) => getBorder(props.$color, props.$colorPalette).default};\n\n    &:hover {\n      border: ${(props) => getBorder(props.$color, props.$colorPalette).hover};\n    }\n    &:active {\n      border: ${(props) =>\n        getBorder(props.$color, props.$colorPalette).active};\n    }\n  }\n`;\n\nconst getIndexFromValue = (value: string, children: React.ReactNode) => {\n  const childrenArray = React.Children.toArray(children);\n  return childrenArray.findIndex((child: any) => child.props.value === value);\n};\n\nconst ToggleButtonGroup = ({\n  children,\n  value,\n  color = colorTokens.default.primary.main,\n  className,\n  size,\n  style,\n  width = \"fit-content\",\n  //Events\n  onClick,\n  \"data-testid\": dataTestId,\n  ...props\n}: ToggleButtonGroupProps) => {\n  const [selectedIndex, setSelectedIndex] = React.useState<number | null>(\n    value ? getIndexFromValue(value, children) : null\n  );\n\n  React.useEffect(() => {\n    setSelectedIndex(value ? getIndexFromValue(value, children) : null);\n  }, [value, children]);\n\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme,color);\n\n  const _onClick = (e: React.MouseEvent, value?: string, index?: number) => {\n    setSelectedIndex(index ?? null);\n    onClick && onClick(e, value);\n  };\n\n  return (\n    <StyledToggleBtnGroup\n      $width={width}\n      $color={color}\n      $colorPalette={colorPalette}\n      className={className}\n      style={style}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {React.Children.map(children, (child, index) => {\n        if (React.isValidElement(child) && child.type) {\n          const childElement = child as React.ReactElement;\n          const childType = childElement.type;\n\n          if (typeof childType === \"string\") return child;\n          /* causing an issue in production build as they define a custom name for the component */\n          if ((childType as any).displayName === \"ToggleButton\") {\n          return React.cloneElement(childElement, {\n            index: index,\n            selected: selectedIndex === index,\n            ...(!childElement.props.color && color && { color }),\n            ...(!childElement.props.size && size && { size }),\n            onClick: _onClick,\n          });\n          }\n        }\n        return child;\n      })}\n    </StyledToggleBtnGroup>\n  );\n};\n\nexport default ToggleButtonGroup;\n"],"names":[],"sourceRoot":""}