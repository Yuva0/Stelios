"use strict";(self.webpackChunkstelios=self.webpackChunkstelios||[]).push([[1680],{"./src/stories/components/Autocomplete/Autocomplete.variants.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Variants:()=>Variants,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_components_Autocomplete_Autocomplete__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/Autocomplete/Autocomplete.tsx"),_components_ThemeProvider_ThemeProvider__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/ThemeProvider/ThemeProvider.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Autocomplete",component:_components_Autocomplete_Autocomplete__WEBPACK_IMPORTED_MODULE_1__.A,parameters:{layout:"fullscreen"},argTypes:{}},Variants={render:()=>{const[inputValue,setInputValue]=react__WEBPACK_IMPORTED_MODULE_0__.useState([]),[selectedValue,setSelectedValue]=react__WEBPACK_IMPORTED_MODULE_0__.useState();return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components_ThemeProvider_ThemeProvider__WEBPACK_IMPORTED_MODULE_2__.NP,{appearance:"light",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div",{style:{display:"flex",flexDirection:"column",gap:"1rem",backgroundColor:"white"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components_Autocomplete_Autocomplete__WEBPACK_IMPORTED_MODULE_1__.A,{label:"Variant1",options:[{title:"Test1",value:"Test1"},{title:"Test2",value:"Test2"},{title:"Test3",value:"Test3"}],onInputChange:(event,value)=>setInputValue(value),onChange:(event,_ref)=>{let{title,value}=_ref;return setSelectedValue(value)}}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components_Autocomplete_Autocomplete__WEBPACK_IMPORTED_MODULE_1__.A,{onChange:(event,_ref2)=>{let{title,value}=_ref2;return setSelectedValue(value)},style:{background:"white"}})]})})}};Variants.parameters={...Variants.parameters,docs:{...Variants.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [inputValue, setInputValue] = React.useState<string | string[] | undefined>([]);\n    const [selectedValue, setSelectedValue] = React.useState<string | string[] | undefined>();\n    return <ThemeProvider appearance="light">\n      <div style={{\n        display: "flex",\n        flexDirection: "column",\n        gap: "1rem",\n        backgroundColor: "white"\n      }}>\n        <Autocomplete label="Variant1" options={[{\n          title: "Test1",\n          value: "Test1"\n        }, {\n          title: "Test2",\n          value: "Test2"\n        }, {\n          title: "Test3",\n          value: "Test3"\n        }]} onInputChange={(event, value) => setInputValue(value)} onChange={(event, {\n          title,\n          value\n        }) => setSelectedValue(value)} />\n        <Autocomplete onChange={(event, {\n          title,\n          value\n        }) => setSelectedValue(value)} style={{\n          background: "white"\n        }} />\n        {/* <div>\n          <Tetxt variant="paragraph">Input Value: {inputValue}</Text>\n          <Text variant="paragraph">Selected Value: {selectedValue}</Text>\n         </div> */}\n      </div>\n      </ThemeProvider>;\n  }\n}',...Variants.parameters?.docs?.source}}};const __namedExportsOrder=["Variants"]}}]);