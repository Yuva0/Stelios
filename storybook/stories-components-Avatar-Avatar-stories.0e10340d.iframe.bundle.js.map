{"version":3,"file":"stories-components-Avatar-Avatar-stories.0e10340d.iframe.bundle.js","mappings":";;;;AAqDA;AAkBA;ACsMA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AACA","sources":["webpack://stelios/./src/components/Avatar/Avatar.tsx","webpack://stelios/./src/components/Text/Text.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { AvatarProps, AvatarStyledProps } from \"./Avatar.types\";\nimport styled from \"styled-components\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport Text from \"../Text/Text\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\n\nconst Avatar: React.FunctionComponent<AvatarProps> = ({\n  src,\n  alt,\n  initials,\n  variant = \"contained\",\n  size = \"medium\",\n  shape = \"rounded\",\n  type = \"image\",\n  color = colorTokens.default.primary.main,\n\n  // Test props\n  \"data-testid\": dataTestId,\n  ...props\n}) => {\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme, color);\n  const AvatarContent = () => {\n    switch (type) {\n      case \"image\":\n        return <img src={src} alt={alt} />;\n      case \"initials\":\n        const _size = size === \"xlarge\" || size === \"medium\" ? \"large\" : \"medium\";\n        return <Text size={_size} disableColor variant=\"span\">{initials}</Text>;\n    }\n  };\n\n  return (\n    <StyledImgContainer\n      $shape={shape}\n      $size={size}\n      $variant={variant}\n      $colorPalette={colorPalette}\n      $color={color}\n      data-testid={dataTestId}\n      {...props}\n    >\n      <AvatarContent />\n    </StyledImgContainer>\n  );\n};\n\nconst StyledImgContainer = styled.div<AvatarStyledProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  ${(props) => {\n    const properties = styleHandler(props.$size, props.$shape, props.$variant, props.$colorPalette, props.$color);\n    return `\n      border-radius: ${properties.borderRadius};\n      width: ${properties.width};\n      height: ${properties.height};\n      background-color: ${properties.backgroundColor};\n      box-shadow: ${properties.boxShadow};\n      color: ${properties.color};\n      outline: ${properties.outline};\n      & img {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n        border-radius: ${properties.borderRadius};\n      }\n    `;\n  }}\n`;\nconst styleHandler = (\n  size: AvatarStyledProps[\"$size\"],\n  shape: AvatarStyledProps[\"$shape\"],\n  variant: AvatarStyledProps[\"$variant\"],\n  colorPalette: any,\n  color: AvatarStyledProps[\"$color\"]\n) => {\n  return {\n    ...sizeHandler(size),\n    ...shapeHandler(shape),\n    ...variantHandler(variant, colorPalette, color),\n  };\n};\nconst shapeHandler = (shape: AvatarStyledProps[\"$shape\"]) => {\n  switch (shape) {\n    case \"rounded\":\n      return {\n        borderRadius: \"50%\",\n      };\n    case \"square\":\n      return {\n        borderRadius: \"8px\",\n      };\n  }\n};\nconst sizeHandler = (size: AvatarStyledProps[\"$size\"]) => {\n  switch (size) {\n    case \"small\":\n      return {\n        width: \"3rem\",\n        height: \"3rem\",\n      };\n    case \"medium\":\n      return {\n        width: \"5rem\",\n        height: \"5rem\",\n      };\n    case \"large\":\n      return {\n        width: \"7rem\",\n        height: \"7rem\",\n      };\n    case \"xlarge\":\n      return {\n        width: \"10rem\",\n        height: \"10rem\",\n      };\n  }\n};\nconst variantHandler = (\n  variant: AvatarStyledProps[\"$variant\"],\n  colorPalette: AvatarStyledProps[\"$colorPalette\"],\n  color: AvatarStyledProps[\"$color\"]\n) => {\n  switch (variant) {\n    case \"contained\":\n      return {\n        backgroundColor: colorPalette[color].accentScale[8],\n        color: colorPalette[color].accentContrast,\n        outline: \"none\" ,\n        boxShadow: \"none\",\n      };\n    case \"outlined\":\n      return {\n        backgroundColor: \"transparent\",\n        color: colorPalette[color].accentScale[10],\n        outline: `1px solid ${colorPalette[color].accentScale[8]}`,\n        boxShadow: \"none\",\n      };\n    case \"neumorph\":\n      return {\n        backgroundColor: \"transparent\",\n        color: colorPalette[color].accentScale[10],\n        boxShadow: `-6px -6px 14px rgba(255, 255, 255, .7),\n          -6px -6px 10px rgba(255, 255, 255, .5),\n          6px 6px 8px rgba(255, 255, 255, .075),\n          6px 6px 10px rgba(0, 0, 0, .15)`,\n        outline: \"none\",\n      }\n  }\n};\n\nexport default Avatar;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextProps, TextStyleProps } from \"./Text.types\";\nimport { Helmet } from \"react-helmet\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\nimport colorTokens from \"../../tokens/colors.json\";\n\ninterface StyledProps {\n  $disableColor?: boolean;\n  $color?: string;\n}\n\nconst Text = ({\n  variant = \"div\",\n  strong,\n  children,\n  align = \"center\",\n  color = colorTokens.default.primary.main,\n  preciseColor,\n  wrap = false,\n  size = \"medium\",\n  disableColor = false,\n  fontSize,\n  lineHeight,\n  style,\n  className,\n  fontFamily,\n  \"data-testid\": dataTestId,\n  ...props\n}: TextProps) => {\n  const theme = useTheme().theme;\n  let _styledProps: StyledProps;\n  if (disableColor) {\n    _styledProps = { $disableColor: disableColor };\n  } else {\n    const colorPalette = getColorPalette(theme, color);\n    const _color = preciseColor ?? colorPalette![color].accentScale[10];\n    _styledProps = { $disableColor: disableColor, $color: _color };\n  }\n\n  const _Text = () => {\n    switch (variant) {\n      case \"h1\":\n        return (\n          <StyledH1\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH1>\n        );\n      case \"h2\":\n        return (\n          <StyledH2\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH2>\n        );\n      case \"h3\":\n        return (\n          <StyledH3\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH3>\n        );\n      case \"h4\":\n        return (\n          <StyledH4\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH4>\n        );\n      case \"h5\":\n        return (\n          <StyledH5\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH5>\n        );\n      case \"h6\":\n        return (\n          <StyledH6\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledH6>\n        );\n      case \"div\":\n        return (\n          <StyledDiv\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledDiv>\n        );\n      case \"paragraph\":\n        return (\n          <StyledP\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledP>\n        );\n      case \"label\":\n        return (\n          <StyledLabel\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledLabel>\n        );\n      case \"span\":\n        return (\n          <StyledSpan\n            $variant={variant}\n            $strong={strong}\n            $align={align}\n            $wrap={wrap}\n            $size={size}\n            $fontSize={fontSize}\n            $lineHeight={lineHeight}\n            $fontFamily={fontFamily}\n            style={style}\n            className={className}\n            data-testid={dataTestId}\n            {...props}\n            {..._styledProps}\n          >\n            {children}\n          </StyledSpan>\n        );\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link\n          rel=\"preconnect\"\n          href=\"https://fonts.gstatic.com\"\n          crossOrigin=\"\"\n        />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Alegreya:wght@400;700&family=Varela+Round&display=swap\"\n          rel=\"stylesheet\"\n        />\n      </Helmet>\n      {_Text()}\n    </>\n  );\n};\nexport default Text;\n\nconst commonStyles = `\n  padding: 0;\n  margin: 0;\n`;\nconst StyledH1 = styled.h1<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2.25rem\"\n        : \"2rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"4rem\"\n      : props.$size === \"medium\"\n        ? \"3.5rem\"\n        : \"3rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${commonStyles}\n`;\nconst StyledH2 = styled.h2<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"2.25rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3.5rem\"\n      : props.$size === \"medium\"\n        ? \"3rem\"\n        : \"2.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH3 = styled.h3<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"3rem\"\n      : props.$size === \"medium\"\n        ? \"2.5rem\"\n        : \"2rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH4 = styled.h4<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2.5rem\"\n      : props.$size === \"medium\"\n        ? \"2rem\"\n        : \"1.75rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH5 = styled.h5<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.5rem\"\n      : props.$size === \"medium\"\n        ? \"1.25rem\"\n        : \"1rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"2rem\"\n      : props.$size === \"medium\"\n        ? \"1.75rem\"\n        : \"1.5rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledH6 = styled.h6<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? '\"Alegreya, serif\"'};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledDiv = styled.div<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledLabel = styled.label<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledSpan = styled.span<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\nconst StyledP = styled.p<TextStyleProps>`\n  font-size: ${(props) =>\n    (props.$fontSize ?? (props.$size === \"large\"\n      ? \"1.25rem\"\n      : props.$size === \"medium\"\n        ? \"1rem\"\n        : \"0.875rem\"))};\n  line-height: ${(props) =>\n    (props.$lineHeight ?? props.$size === \"large\")\n      ? \"1.75rem\"\n      : props.$size === \"medium\"\n        ? \"1.5rem\"\n        : \"1.25rem\"};\n  font-weight: ${(props) => (props.$strong ? \"700\" : \"400\")};\n  font-family: ${(props) => props.$fontFamily ?? `'Varela Round', sans-serif`};\n  ${(props) => !props.$disableColor && `color: ${props.$color};`}\n  ${commonStyles}\n`;\n"],"names":[],"sourceRoot":""}