{"version":3,"file":"stories-components-ColorPicker-ColorPicker-stories.82e35411.iframe.bundle.js","mappings":";AAYA;AACA","sources":["webpack://stelios/./src/components/ColorPicker/ColorPicker.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { ChromePicker, ColorResult } from \"react-color\";\nimport { ColorPickerProps, ColorPickerStyleProps } from \"./ColorPicker.types\";\nimport Input from \"../Input/Input\";\nimport styled from \"styled-components\";\nimport { usePopper } from \"react-popper\";\nimport ClickAwayListener from \"../ClickAwayListener/ClickAwayListener\";\nimport colorTokens from \"../../tokens/colors.json\";\nimport { useTheme } from \"../ThemeProvider/ThemeProvider\";\nimport { getColorPalette } from \"../../helpers/helpers\";\n\nconst StyledChromePicker = styled.div<ColorPickerStyleProps>`\n  display: ${(props) => (props.$open ? \"block\" : \"none\")};\n`;\n\nconst ColorPicker = ({\n  label,\n  color = colorTokens.default.primary.main,\n  open,\n  size,\n  width,\n  variant = \"outlined\",\n  onChange,\n  \"data-testid\": dataTestId,\n}: ColorPickerProps) => {\n  const [isOpen, setIsOpen] = useState(open ?? false);\n  const anchorElement = useRef<HTMLDivElement | null>(null);\n  const popperElement = useRef<HTMLDivElement | null>(null);\n  const theme = useTheme().theme;\n  const colorPalette = getColorPalette(theme,color);\n  const [innerColor, setInnerColor] = useState<string>(colorPalette ? colorPalette[color].main : color);\n\n  React.useEffect(() => {\n    const colorPalette = getColorPalette(theme,color);\n    setInnerColor(colorPalette ? colorPalette[color].main : color);\n  }, [color, theme]);\n\n  useEffect(() => {\n    setIsOpen(open ?? false);\n  }, [open]);\n\n  const { styles, attributes, update } = usePopper(\n    anchorElement.current,\n    popperElement.current,\n    {\n      placement: \"bottom-start\",\n      modifiers: [\n        {\n          name: \"offset\",\n          options: {\n            offset: [0, 2.5],\n          },\n        },\n      ],\n    }\n  );\n\n  const _onChange = (color: ColorResult) => {\n    setInnerColor(color.hex);\n    onChange && onChange(color.hex);\n  };\n\n  const _onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInnerColor(e.target.value);\n    onChange && onChange(e.target.value);\n  };\n\n  const _onInputClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleClickAway = useCallback(() => {\n    setIsOpen(false);\n  }, []);\n\n  useEffect(() => {\n    if (isOpen && update) {\n      update();\n    }\n  }, [isOpen, update]);\n\n  return (\n    <ClickAwayListener onClickAway={handleClickAway}>\n      <Input\n        variant={variant}\n        width={width}\n        size={size}\n        label={label}\n        containerRef={anchorElement}\n        value={innerColor}\n        onChange={_onInputChange}\n        onClick={_onInputClick}\n        color={color}\n        leadingIcon={\n          <div\n            onClick={() => setIsOpen(!isOpen)}\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n              backgroundColor: innerColor,\n              borderRadius: \"4px\",\n            }}\n          />\n        }\n        data-testid={dataTestId}\n      />\n      <StyledChromePicker\n        ref={popperElement}\n        $open={isOpen}\n        style={{ ...styles.popper }}\n        {...attributes.popper}\n      >\n        <ChromePicker disableAlpha color={innerColor} onChange={_onChange} />\n      </StyledChromePicker>\n    </ClickAwayListener>\n  );\n};\n\nexport default ColorPicker;\n"],"names":[],"sourceRoot":""}